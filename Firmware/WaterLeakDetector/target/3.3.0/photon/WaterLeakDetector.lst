
c:/Users/bobg5/Documents/GitHub/WaterLeakSensor/Firmware/WaterLeakDetector/target/3.3.0/photon/WaterLeakDetector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007e60  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a7e80  080a7e80  00017e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a7e88  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000024c  20000000  080a7e8c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000338  20000250  20000250  00040250  2**3
                  ALLOC
  7 .module_info_suffix 00000028  080a80d8  080a80d8  000380d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a8100  080a8100  00038100  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000e6368  00000000  00000000  00038104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00013bdc  00000000  00000000  0011e46c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0001dbd9  00000000  00000000  00132048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000022d8  00000000  00000000  0014fc21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000055c0  00000000  00000000  00151ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002bb4a  00000000  00000000  001574b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00035390  00000000  00000000  00183003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000bb9a5  00000000  00000000  001b8393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000067e4  00000000  00000000  00273d38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f004 f86d 	bl	80a4110 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f004 f875 	bl	80a412c <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a7e8c 	.word	0x080a7e8c
 80a0050:	2000024c 	.word	0x2000024c
 80a0054:	20000250 	.word	0x20000250
 80a0058:	20000588 	.word	0x20000588
 80a005c:	20000588 	.word	0x20000588

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f001 ffdd 	bl	80a2020 <module_user_init_hook>

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42ac      	cmp	r4, r5
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080a7e54 	.word	0x080a7e54
 80a0084:	080a7e78 	.word	0x080a7e78

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 bd0c 	b.w	80a0aa4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fae7 	bl	80a0660 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f001 bf7b 	b.w	80a1f90 <_post_loop>

080a009a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a009a:	f001 ba75 	b.w	80a1588 <malloc>

080a009e <_Znaj>:
 80a009e:	f001 ba73 	b.w	80a1588 <malloc>

080a00a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 80a00a2:	f001 ba79 	b.w	80a1598 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr
	...

080a00b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
 80a00b8:	b513      	push	{r0, r1, r4, lr}
 80a00ba:	4604      	mov	r4, r0
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a00bc:	4b04      	ldr	r3, [pc, #16]	; (80a00d0 <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
 80a00be:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a00c0:	f88d 3000 	strb.w	r3, [sp]
 80a00c4:	233c      	movs	r3, #60	; 0x3c
 80a00c6:	f002 f92f 	bl	80a2328 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
 80a00ca:	4620      	mov	r0, r4
 80a00cc:	b002      	add	sp, #8
 80a00ce:	bd10      	pop	{r4, pc}
 80a00d0:	20000250 	.word	0x20000250

080a00d4 <_ZN17WLDAlarmProcessorC1Ev>:
 * 
 *******************************************************************************/
#include <WLDAlarmProcessor.h>

// Constructor
WLDAlarmProcessor::WLDAlarmProcessor() {
 80a00d4:	f64e 2160 	movw	r1, #60000	; 0xea60
 80a00d8:	4a01      	ldr	r2, [pc, #4]	; (80a00e0 <_ZN17WLDAlarmProcessorC1Ev+0xc>)
 80a00da:	e9c0 1200 	strd	r1, r2, [r0]
    // follow convention and put all initializations in begin() method   
}   // end of Constructor
 80a00de:	4770      	bx	lr
 80a00e0:	05265c00 	.word	0x05265c00

080a00e4 <_ZN17WLDAlarmProcessor5beginEv>:

// Initialization
void WLDAlarmProcessor::begin() {
    // initialize all of the internal variables.

    _lowTempAlarmArm = true;    // arm the alarm upon initialization
 80a00e4:	f240 1301 	movw	r3, #257	; 0x101
 80a00e8:	8103      	strh	r3, [r0, #8]
    _highTempAlarmArm = true;   // arm the alarm upon initialization
    _leakAlarmArm = true;       // arm the alarm upon initialization
 80a00ea:	2301      	movs	r3, #1
 80a00ec:	7283      	strb	r3, [r0, #10]

    _lowTempLastAlarm = 0L;
 80a00ee:	2300      	movs	r3, #0
    _highTempLastAlarm = 0L;
 80a00f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
    _leakLastAlarm = 0L;
 80a00f4:	6143      	str	r3, [r0, #20]

}   // end of begin()
 80a00f6:	4770      	bx	lr

080a00f8 <_ZN17WLDAlarmProcessor15armLowTempAlarmEv>:
}   // end of sendTestAlarm()

// method to re-arm the low temperatre alarm so that a new alarm can be sent immediately
void WLDAlarmProcessor::armLowTempAlarm() {

    _lowTempAlarmArm = true;
 80a00f8:	2301      	movs	r3, #1
 80a00fa:	7203      	strb	r3, [r0, #8]
    return;

}   // end of armLowTempAlarm()
 80a00fc:	4770      	bx	lr

080a00fe <_ZN17WLDAlarmProcessor16armHighTempAlarmEv>:

// method to clear out the holdoff for the high temperatre alarm so that a new alarm can be sent immediately
void WLDAlarmProcessor::armHighTempAlarm() {

    _highTempAlarmArm = true;
 80a00fe:	2301      	movs	r3, #1
 80a0100:	7243      	strb	r3, [r0, #9]
    return;

}   // end of armHighTempAlarm() 
 80a0102:	4770      	bx	lr

080a0104 <_ZN17WLDAlarmProcessor12armLeakAlarmEv>:

// method to clear out the holdoff for the water leak alarm so that a new alarm can be sent immediately
void WLDAlarmProcessor::armLeakAlarm() {

   _leakAlarmArm = true;
 80a0104:	2301      	movs	r3, #1
 80a0106:	7283      	strb	r3, [r0, #10]
   return;

}   // end of armLeakAlarm() 
 80a0108:	4770      	bx	lr

080a010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a010a:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a010c:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a010e:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a0110:	b17c      	cbz	r4, 80a0132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a0112:	6863      	ldr	r3, [r4, #4]
 80a0114:	3b01      	subs	r3, #1
 80a0116:	6063      	str	r3, [r4, #4]
 80a0118:	b95b      	cbnz	r3, 80a0132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a011a:	6823      	ldr	r3, [r4, #0]
 80a011c:	4620      	mov	r0, r4
 80a011e:	689b      	ldr	r3, [r3, #8]
 80a0120:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0122:	68a3      	ldr	r3, [r4, #8]
 80a0124:	3b01      	subs	r3, #1
 80a0126:	60a3      	str	r3, [r4, #8]
 80a0128:	b91b      	cbnz	r3, 80a0132 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a012a:	6823      	ldr	r3, [r4, #0]
 80a012c:	4620      	mov	r0, r4
 80a012e:	68db      	ldr	r3, [r3, #12]
 80a0130:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a0132:	4628      	mov	r0, r5
 80a0134:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0138 <_ZN17WLDAlarmProcessor23sendLowTemperatureAlarmEf>:
void WLDAlarmProcessor::sendLowTemperatureAlarm(float theAlarmTemperature) {
 80a0138:	b530      	push	{r4, r5, lr}
 80a013a:	4604      	mov	r4, r0
 80a013c:	b089      	sub	sp, #36	; 0x24
 80a013e:	460d      	mov	r5, r1
    String alarmMsg = "Low temperature detected. Temperature = ";
 80a0140:	4668      	mov	r0, sp
 80a0142:	4917      	ldr	r1, [pc, #92]	; (80a01a0 <_ZN17WLDAlarmProcessor23sendLowTemperatureAlarmEf+0x68>)
 80a0144:	f001 fc10 	bl	80a1968 <_ZN6StringC1EPK19__FlashStringHelper>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0148:	f001 f830 	bl	80a11ac <HAL_Timer_Get_Milli_Seconds>
    holdoffTime =  WLDAlarmProcessor::diff(millis(), _lowTempLastAlarm); 
 80a014c:	68e3      	ldr	r3, [r4, #12]
//  Used to ensure that alarm holdoffs won't be fooled upon millis() overflow
unsigned long WLDAlarmProcessor::diff(unsigned long current, unsigned long last)  {
    const unsigned long MAX = 0xffffffff;  // an unsigned long is 4 bytes
    unsigned long difference;

    if (current < last) {       // overflow condition
 80a014e:	4283      	cmp	r3, r0
        difference = (MAX - last) + current;
 80a0150:	bf8a      	itet	hi
 80a0152:	43db      	mvnhi	r3, r3
    } else {
        difference = current - last;
 80a0154:	1ac0      	subls	r0, r0, r3
        difference = (MAX - last) + current;
 80a0156:	18c0      	addhi	r0, r0, r3
    if( (_lowTempAlarmArm == true) || ( holdoffTime  >= ONE_DAY) ) {
 80a0158:	7a23      	ldrb	r3, [r4, #8]
 80a015a:	b913      	cbnz	r3, 80a0162 <_ZN17WLDAlarmProcessor23sendLowTemperatureAlarmEf+0x2a>
 80a015c:	6863      	ldr	r3, [r4, #4]
 80a015e:	4283      	cmp	r3, r0
 80a0160:	d818      	bhi.n	80a0194 <_ZN17WLDAlarmProcessor23sendLowTemperatureAlarmEf+0x5c>
        alarmMsg += String(theAlarmTemperature);
 80a0162:	2206      	movs	r2, #6
 80a0164:	4629      	mov	r1, r5
 80a0166:	a804      	add	r0, sp, #16
 80a0168:	f001 fc86 	bl	80a1a78 <_ZN6StringC1Efi>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80a016c:	a904      	add	r1, sp, #16
 80a016e:	4668      	mov	r0, sp
 80a0170:	f001 fcb0 	bl	80a1ad4 <_ZN6String6concatERKS_>
 80a0174:	a804      	add	r0, sp, #16
 80a0176:	f001 fbad 	bl	80a18d4 <_ZN6StringD1Ev>
        Particle.publish("WLDAlarmLowTemp", alarmMsg);
 80a017a:	9a00      	ldr	r2, [sp, #0]
 80a017c:	4909      	ldr	r1, [pc, #36]	; (80a01a4 <_ZN17WLDAlarmProcessor23sendLowTemperatureAlarmEf+0x6c>)
 80a017e:	a804      	add	r0, sp, #16
 80a0180:	f7ff ff9a 	bl	80a00b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0184:	a805      	add	r0, sp, #20
 80a0186:	f7ff ffc0 	bl	80a010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        _lowTempAlarmArm = false;   // disarm the alarm
 80a018a:	2300      	movs	r3, #0
 80a018c:	7223      	strb	r3, [r4, #8]
 80a018e:	f001 f80d 	bl	80a11ac <HAL_Timer_Get_Milli_Seconds>
        _lowTempLastAlarm = millis();  // record the time of the alarm
 80a0192:	60e0      	str	r0, [r4, #12]
    String alarmMsg = "Low temperature detected. Temperature = ";
 80a0194:	4668      	mov	r0, sp
 80a0196:	f001 fb9d 	bl	80a18d4 <_ZN6StringD1Ev>
}   // end of sendLowTemperateAlarm()
 80a019a:	b009      	add	sp, #36	; 0x24
 80a019c:	bd30      	pop	{r4, r5, pc}
 80a019e:	bf00      	nop
 80a01a0:	080a73c0 	.word	0x080a73c0
 80a01a4:	080a73e9 	.word	0x080a73e9

080a01a8 <_ZN17WLDAlarmProcessor24sendHighTemperatureAlarmEf>:
void WLDAlarmProcessor::sendHighTemperatureAlarm(float theAlarmTemperature) {
 80a01a8:	b530      	push	{r4, r5, lr}
 80a01aa:	4604      	mov	r4, r0
 80a01ac:	b089      	sub	sp, #36	; 0x24
 80a01ae:	460d      	mov	r5, r1
    String alarmMsg = "High temperature detected. Temperature = ";
 80a01b0:	4668      	mov	r0, sp
 80a01b2:	4917      	ldr	r1, [pc, #92]	; (80a0210 <_ZN17WLDAlarmProcessor24sendHighTemperatureAlarmEf+0x68>)
 80a01b4:	f001 fbd8 	bl	80a1968 <_ZN6StringC1EPK19__FlashStringHelper>
 80a01b8:	f000 fff8 	bl	80a11ac <HAL_Timer_Get_Milli_Seconds>
    holdoffTime = WLDAlarmProcessor::diff( millis(), _highTempLastAlarm );
 80a01bc:	6923      	ldr	r3, [r4, #16]
    if (current < last) {       // overflow condition
 80a01be:	4283      	cmp	r3, r0
        difference = (MAX - last) + current;
 80a01c0:	bf8a      	itet	hi
 80a01c2:	43db      	mvnhi	r3, r3
        difference = current - last;
 80a01c4:	1ac0      	subls	r0, r0, r3
        difference = (MAX - last) + current;
 80a01c6:	18c0      	addhi	r0, r0, r3
    if( (_highTempAlarmArm == true) || ( holdoffTime >= ONE_DAY) ) {  
 80a01c8:	7a63      	ldrb	r3, [r4, #9]
 80a01ca:	b913      	cbnz	r3, 80a01d2 <_ZN17WLDAlarmProcessor24sendHighTemperatureAlarmEf+0x2a>
 80a01cc:	6863      	ldr	r3, [r4, #4]
 80a01ce:	4283      	cmp	r3, r0
 80a01d0:	d818      	bhi.n	80a0204 <_ZN17WLDAlarmProcessor24sendHighTemperatureAlarmEf+0x5c>
        alarmMsg += String(theAlarmTemperature);
 80a01d2:	2206      	movs	r2, #6
 80a01d4:	4629      	mov	r1, r5
 80a01d6:	a804      	add	r0, sp, #16
 80a01d8:	f001 fc4e 	bl	80a1a78 <_ZN6StringC1Efi>
 80a01dc:	a904      	add	r1, sp, #16
 80a01de:	4668      	mov	r0, sp
 80a01e0:	f001 fc78 	bl	80a1ad4 <_ZN6String6concatERKS_>
 80a01e4:	a804      	add	r0, sp, #16
 80a01e6:	f001 fb75 	bl	80a18d4 <_ZN6StringD1Ev>
        Particle.publish("WLDAlarmHighTemp", alarmMsg);
 80a01ea:	9a00      	ldr	r2, [sp, #0]
 80a01ec:	4909      	ldr	r1, [pc, #36]	; (80a0214 <_ZN17WLDAlarmProcessor24sendHighTemperatureAlarmEf+0x6c>)
 80a01ee:	a804      	add	r0, sp, #16
 80a01f0:	f7ff ff62 	bl	80a00b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a01f4:	a805      	add	r0, sp, #20
 80a01f6:	f7ff ff88 	bl	80a010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        _highTempAlarmArm = false;   // disarm the alarm
 80a01fa:	2300      	movs	r3, #0
 80a01fc:	7263      	strb	r3, [r4, #9]
 80a01fe:	f000 ffd5 	bl	80a11ac <HAL_Timer_Get_Milli_Seconds>
        _highTempLastAlarm = millis();  // record the time of the alarm
 80a0202:	6120      	str	r0, [r4, #16]
    String alarmMsg = "High temperature detected. Temperature = ";
 80a0204:	4668      	mov	r0, sp
 80a0206:	f001 fb65 	bl	80a18d4 <_ZN6StringD1Ev>
}   // end of sendHighTemperatureAlarm()
 80a020a:	b009      	add	sp, #36	; 0x24
 80a020c:	bd30      	pop	{r4, r5, pc}
 80a020e:	bf00      	nop
 80a0210:	080a73f9 	.word	0x080a73f9
 80a0214:	080a7423 	.word	0x080a7423

080a0218 <_ZN17WLDAlarmProcessor18sendWaterLeakAlarmEv>:
void WLDAlarmProcessor::sendWaterLeakAlarm() {
 80a0218:	b510      	push	{r4, lr}
 80a021a:	4604      	mov	r4, r0
 80a021c:	b08a      	sub	sp, #40	; 0x28
    String alarmMsg = "Water Leak Alarm Detected.";
 80a021e:	4915      	ldr	r1, [pc, #84]	; (80a0274 <_ZN17WLDAlarmProcessor18sendWaterLeakAlarmEv+0x5c>)
 80a0220:	a802      	add	r0, sp, #8
 80a0222:	f001 fba1 	bl	80a1968 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0226:	f000 ffc1 	bl	80a11ac <HAL_Timer_Get_Milli_Seconds>
    holdoffTime = WLDAlarmProcessor::diff( millis(), _leakLastAlarm );
 80a022a:	6963      	ldr	r3, [r4, #20]
    if (current < last) {       // overflow condition
 80a022c:	4283      	cmp	r3, r0
        difference = (MAX - last) + current;
 80a022e:	bf8a      	itet	hi
 80a0230:	43db      	mvnhi	r3, r3
        difference = current - last;
 80a0232:	1ac0      	subls	r0, r0, r3
        difference = (MAX - last) + current;
 80a0234:	18c0      	addhi	r0, r0, r3
    if( (_leakAlarmArm == true) || ( holdoffTime >= ONE_DAY) ) {  
 80a0236:	7aa3      	ldrb	r3, [r4, #10]
 80a0238:	b913      	cbnz	r3, 80a0240 <_ZN17WLDAlarmProcessor18sendWaterLeakAlarmEv+0x28>
 80a023a:	6863      	ldr	r3, [r4, #4]
 80a023c:	4283      	cmp	r3, r0
 80a023e:	d813      	bhi.n	80a0268 <_ZN17WLDAlarmProcessor18sendWaterLeakAlarmEv+0x50>
        String _alarmMsg = "Water leak Detected";
 80a0240:	490d      	ldr	r1, [pc, #52]	; (80a0278 <_ZN17WLDAlarmProcessor18sendWaterLeakAlarmEv+0x60>)
 80a0242:	a806      	add	r0, sp, #24
 80a0244:	f001 fb90 	bl	80a1968 <_ZN6StringC1EPK19__FlashStringHelper>
        Particle.publish("WLDAlarmWaterLeak", _alarmMsg);
 80a0248:	9a06      	ldr	r2, [sp, #24]
 80a024a:	490c      	ldr	r1, [pc, #48]	; (80a027c <_ZN17WLDAlarmProcessor18sendWaterLeakAlarmEv+0x64>)
 80a024c:	4668      	mov	r0, sp
 80a024e:	f7ff ff33 	bl	80a00b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a0252:	a801      	add	r0, sp, #4
 80a0254:	f7ff ff59 	bl	80a010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        _leakAlarmArm = false;   // disarm the alarm
 80a0258:	2300      	movs	r3, #0
 80a025a:	72a3      	strb	r3, [r4, #10]
 80a025c:	f000 ffa6 	bl	80a11ac <HAL_Timer_Get_Milli_Seconds>
        _leakLastAlarm = millis();  // record the time of the alarm
 80a0260:	6160      	str	r0, [r4, #20]
        String _alarmMsg = "Water leak Detected";
 80a0262:	a806      	add	r0, sp, #24
 80a0264:	f001 fb36 	bl	80a18d4 <_ZN6StringD1Ev>
    String alarmMsg = "Water Leak Alarm Detected.";
 80a0268:	a802      	add	r0, sp, #8
 80a026a:	f001 fb33 	bl	80a18d4 <_ZN6StringD1Ev>
}   // end of sendWaterLeakAlarm()
 80a026e:	b00a      	add	sp, #40	; 0x28
 80a0270:	bd10      	pop	{r4, pc}
 80a0272:	bf00      	nop
 80a0274:	080a7434 	.word	0x080a7434
 80a0278:	080a744f 	.word	0x080a744f
 80a027c:	080a7463 	.word	0x080a7463

080a0280 <_ZN17WLDAlarmProcessor13sendTestAlarmEv>:
void WLDAlarmProcessor::sendTestAlarm() {
 80a0280:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    String alarmMsg = "This is a test of the WLD alarm system";
 80a0282:	4909      	ldr	r1, [pc, #36]	; (80a02a8 <_ZN17WLDAlarmProcessor13sendTestAlarmEv+0x28>)
 80a0284:	a802      	add	r0, sp, #8
 80a0286:	f001 fb6f 	bl	80a1968 <_ZN6StringC1EPK19__FlashStringHelper>
    Particle.publish("WLDAlarmTest", alarmMsg);
 80a028a:	9a02      	ldr	r2, [sp, #8]
 80a028c:	4907      	ldr	r1, [pc, #28]	; (80a02ac <_ZN17WLDAlarmProcessor13sendTestAlarmEv+0x2c>)
 80a028e:	4668      	mov	r0, sp
 80a0290:	f7ff ff12 	bl	80a00b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a0294:	a801      	add	r0, sp, #4
 80a0296:	f7ff ff38 	bl	80a010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    String alarmMsg = "This is a test of the WLD alarm system";
 80a029a:	a802      	add	r0, sp, #8
 80a029c:	f001 fb1a 	bl	80a18d4 <_ZN6StringD1Ev>
}   // end of sendTestAlarm()
 80a02a0:	b007      	add	sp, #28
 80a02a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80a02a6:	bf00      	nop
 80a02a8:	080a7475 	.word	0x080a7475
 80a02ac:	080a749c 	.word	0x080a749c

080a02b0 <_GLOBAL__sub_I__ZN17WLDAlarmProcessorC2Ev>:
        val_(val) {
 80a02b0:	2200      	movs	r2, #0
 80a02b2:	4b01      	ldr	r3, [pc, #4]	; (80a02b8 <_GLOBAL__sub_I__ZN17WLDAlarmProcessorC2Ev+0x8>)
 80a02b4:	701a      	strb	r2, [r3, #0]
    }
    return difference;
 80a02b6:	4770      	bx	lr
 80a02b8:	20000250 	.word	0x20000250

080a02bc <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:
    }
 80a02bc:	6810      	ldr	r0, [r2, #0]
 80a02be:	4770      	bx	lr

080a02c0 <_Z9testAlarm6String>:
    return 0;

}   // end of setAlarmLimits()

// Cloud function to send out a test alarm
int testAlarm(String nothing) {
 80a02c0:	b508      	push	{r3, lr}
    alarmer.sendTestAlarm(); 
 80a02c2:	4802      	ldr	r0, [pc, #8]	; (80a02cc <_Z9testAlarm6String+0xc>)
 80a02c4:	f7ff ffdc 	bl	80a0280 <_ZN17WLDAlarmProcessor13sendTestAlarmEv>

    return 0;
    
}   // end of testAlarm
 80a02c8:	2000      	movs	r0, #0
 80a02ca:	bd08      	pop	{r3, pc}
 80a02cc:	200002e8 	.word	0x200002e8

080a02d0 <_ZN10CloudClass9_variableEPKcRK6String.isra.0>:
    static inline bool _variable(const char* varKey, const String& var)
 80a02d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        spark_variable_t extra = {};
 80a02d2:	2300      	movs	r3, #0
 80a02d4:	9301      	str	r3, [sp, #4]
 80a02d6:	9303      	str	r3, [sp, #12]
        extra.size = sizeof(extra);
 80a02d8:	230c      	movs	r3, #12
 80a02da:	f8ad 3004 	strh.w	r3, [sp, #4]
        extra.update = update_string_variable;
 80a02de:	4b04      	ldr	r3, [pc, #16]	; (80a02f0 <_ZN10CloudClass9_variableEPKcRK6String.isra.0+0x20>)
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a02e0:	2204      	movs	r2, #4
        extra.update = update_string_variable;
 80a02e2:	9302      	str	r3, [sp, #8]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a02e4:	ab01      	add	r3, sp, #4
 80a02e6:	f001 f917 	bl	80a1518 <spark_variable>
    }
 80a02ea:	b005      	add	sp, #20
 80a02ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80a02f0:	080a02bd 	.word	0x080a02bd

080a02f4 <_Z14dateTimeStringv>:
String dateTimeString(){
 80a02f4:	b510      	push	{r4, lr}
 80a02f6:	b08a      	sub	sp, #40	; 0x28
 80a02f8:	4604      	mov	r4, r0
    time_t timeNow = Time.now();
 80a02fa:	f001 fdc8 	bl	80a1e8e <_ZN9TimeClass3nowEv>
    String dateTime = Time.format(timeNow,TIME_FORMAT_DEFAULT) + " UTC";
 80a02fe:	4b0f      	ldr	r3, [pc, #60]	; (80a033c <_Z14dateTimeStringv+0x48>)
    time_t timeNow = Time.now();
 80a0300:	4602      	mov	r2, r0
    String dateTime = Time.format(timeNow,TIME_FORMAT_DEFAULT) + " UTC";
 80a0302:	681b      	ldr	r3, [r3, #0]
 80a0304:	490e      	ldr	r1, [pc, #56]	; (80a0340 <_Z14dateTimeStringv+0x4c>)
 80a0306:	9300      	str	r3, [sp, #0]
 80a0308:	17c3      	asrs	r3, r0, #31
 80a030a:	a802      	add	r0, sp, #8
 80a030c:	f001 fd60 	bl	80a1dd0 <_ZN9TimeClass6formatExPKc>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80a0310:	a902      	add	r1, sp, #8
 80a0312:	a806      	add	r0, sp, #24
 80a0314:	f001 fb67 	bl	80a19e6 <_ZN6StringC1ERKS_>
 80a0318:	490a      	ldr	r1, [pc, #40]	; (80a0344 <_Z14dateTimeStringv+0x50>)
 80a031a:	a806      	add	r0, sp, #24
 80a031c:	f001 fbfe 	bl	80a1b1c <_ZplRK15StringSumHelperPKc>
 80a0320:	4601      	mov	r1, r0
 80a0322:	4620      	mov	r0, r4
 80a0324:	f001 fb5f 	bl	80a19e6 <_ZN6StringC1ERKS_>
class StringSumHelper : public String
 80a0328:	a806      	add	r0, sp, #24
 80a032a:	f001 fad3 	bl	80a18d4 <_ZN6StringD1Ev>
 80a032e:	a802      	add	r0, sp, #8
 80a0330:	f001 fad0 	bl	80a18d4 <_ZN6StringD1Ev>
}   // end of dateTimeString()
 80a0334:	4620      	mov	r0, r4
 80a0336:	b00a      	add	sp, #40	; 0x28
 80a0338:	bd10      	pop	{r4, pc}
 80a033a:	bf00      	nop
 80a033c:	20000008 	.word	0x20000008
 80a0340:	20000394 	.word	0x20000394
 80a0344:	080a74a9 	.word	0x080a74a9

080a0348 <_Z22writeAlarmStatusStringv>:
void writeAlarmStatusString() {
 80a0348:	b510      	push	{r4, lr}
    if(Alarms.lowTempAlarm == false) {
 80a034a:	4c13      	ldr	r4, [pc, #76]	; (80a0398 <_Z22writeAlarmStatusStringv+0x50>)
    currentAlarms = "";
 80a034c:	4913      	ldr	r1, [pc, #76]	; (80a039c <_Z22writeAlarmStatusStringv+0x54>)
 80a034e:	4814      	ldr	r0, [pc, #80]	; (80a03a0 <_Z22writeAlarmStatusStringv+0x58>)
 80a0350:	f001 fb5c 	bl	80a1a0c <_ZN6StringaSEPKc>
    if(Alarms.lowTempAlarm == false) {
 80a0354:	7823      	ldrb	r3, [r4, #0]
 80a0356:	b9cb      	cbnz	r3, 80a038c <_Z22writeAlarmStatusStringv+0x44>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80a0358:	4912      	ldr	r1, [pc, #72]	; (80a03a4 <_Z22writeAlarmStatusStringv+0x5c>)
 80a035a:	4811      	ldr	r0, [pc, #68]	; (80a03a0 <_Z22writeAlarmStatusStringv+0x58>)
 80a035c:	f001 fbbe 	bl	80a1adc <_ZN6String6concatEPKc>
 80a0360:	4911      	ldr	r1, [pc, #68]	; (80a03a8 <_Z22writeAlarmStatusStringv+0x60>)
 80a0362:	480f      	ldr	r0, [pc, #60]	; (80a03a0 <_Z22writeAlarmStatusStringv+0x58>)
 80a0364:	f001 fbba 	bl	80a1adc <_ZN6String6concatEPKc>
    if(Alarms.highTempAlarm == false) {
 80a0368:	7863      	ldrb	r3, [r4, #1]
 80a036a:	b98b      	cbnz	r3, 80a0390 <_Z22writeAlarmStatusStringv+0x48>
 80a036c:	490d      	ldr	r1, [pc, #52]	; (80a03a4 <_Z22writeAlarmStatusStringv+0x5c>)
 80a036e:	480c      	ldr	r0, [pc, #48]	; (80a03a0 <_Z22writeAlarmStatusStringv+0x58>)
 80a0370:	f001 fbb4 	bl	80a1adc <_ZN6String6concatEPKc>
 80a0374:	490c      	ldr	r1, [pc, #48]	; (80a03a8 <_Z22writeAlarmStatusStringv+0x60>)
 80a0376:	480a      	ldr	r0, [pc, #40]	; (80a03a0 <_Z22writeAlarmStatusStringv+0x58>)
 80a0378:	f001 fbb0 	bl	80a1adc <_ZN6String6concatEPKc>
    if(Alarms.waterLeakAlarm == false) {
 80a037c:	78a3      	ldrb	r3, [r4, #2]
 80a037e:	b94b      	cbnz	r3, 80a0394 <_Z22writeAlarmStatusStringv+0x4c>
 80a0380:	4908      	ldr	r1, [pc, #32]	; (80a03a4 <_Z22writeAlarmStatusStringv+0x5c>)
 80a0382:	4807      	ldr	r0, [pc, #28]	; (80a03a0 <_Z22writeAlarmStatusStringv+0x58>)
}   // end of writeAlarmStatusString
 80a0384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0388:	f001 bba8 	b.w	80a1adc <_ZN6String6concatEPKc>
 80a038c:	4907      	ldr	r1, [pc, #28]	; (80a03ac <_Z22writeAlarmStatusStringv+0x64>)
 80a038e:	e7e4      	b.n	80a035a <_Z22writeAlarmStatusStringv+0x12>
 80a0390:	4906      	ldr	r1, [pc, #24]	; (80a03ac <_Z22writeAlarmStatusStringv+0x64>)
 80a0392:	e7ec      	b.n	80a036e <_Z22writeAlarmStatusStringv+0x26>
 80a0394:	4905      	ldr	r1, [pc, #20]	; (80a03ac <_Z22writeAlarmStatusStringv+0x64>)
 80a0396:	e7f4      	b.n	80a0382 <_Z22writeAlarmStatusStringv+0x3a>
 80a0398:	20000258 	.word	0x20000258
 80a039c:	080a76e0 	.word	0x080a76e0
 80a03a0:	20000300 	.word	0x20000300
 80a03a4:	080a7560 	.word	0x080a7560
 80a03a8:	080a74b0 	.word	0x080a74b0
 80a03ac:	080a74ae 	.word	0x080a74ae

080a03b0 <_Z15alarmIntegratorff>:
        sensorReading - the sensor voltage reading to be thresholded and integrated
    return:
        the alarm value as a boolean.  The alarm value is set after 5 thresholds are accumulated
            for either sensor and stays set until 5 under-thresholds are accumulated for both sensors
*/
bool alarmIntegrator(float sensorAReading, float sensorBReading) {
 80a03b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        thresholdedReadingB = false;
    }

    // integrate thresholds or under thresholds; clamp them at ALARM_LIMIT and 0
    if(thresholdedReadingA == true)  {       // increment integrator
        if(integratedValueA < ALARM_LIMIT)  {
 80a03b2:	4d1a      	ldr	r5, [pc, #104]	; (80a041c <_Z15alarmIntegratorff+0x6c>)
bool alarmIntegrator(float sensorAReading, float sensorBReading) {
 80a03b4:	460f      	mov	r7, r1
    if(sensorAReading > WATER_LEVEL_THRESHOLD) {
 80a03b6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
        if(integratedValueA < ALARM_LIMIT)  {
 80a03ba:	782c      	ldrb	r4, [r5, #0]
    if(sensorAReading > WATER_LEVEL_THRESHOLD) {
 80a03bc:	f003 fbd6 	bl	80a3b6c <__aeabi_fcmpgt>
 80a03c0:	b9c8      	cbnz	r0, 80a03f6 <_Z15alarmIntegratorff+0x46>
            integratedValueA++;
        } else {
            integratedValueA = ALARM_LIMIT;  // clamp at max value
        }
    } else {    // thresholdedReading was false
        if(integratedValueA > 0) {           // decrement integrator
 80a03c2:	b1e4      	cbz	r4, 80a03fe <_Z15alarmIntegratorff+0x4e>
            integratedValueA--;
 80a03c4:	3c01      	subs	r4, #1
 80a03c6:	e000      	b.n	80a03ca <_Z15alarmIntegratorff+0x1a>
            integratedValueA++;
 80a03c8:	3401      	adds	r4, #1
            integratedValueA--;
 80a03ca:	702c      	strb	r4, [r5, #0]
 80a03cc:	e017      	b.n	80a03fe <_Z15alarmIntegratorff+0x4e>

    if(thresholdedReadingB == true)  {       // increment integrator
        if(integratedValueB < ALARM_LIMIT)  {
            integratedValueB++;
        } else {
            integratedValueB = ALARM_LIMIT;  // clamp at max value
 80a03ce:	2305      	movs	r3, #5
 80a03d0:	7033      	strb	r3, [r6, #0]
        }
    }


    // Determine the return value
    if((integratedValueA >= ALARM_LIMIT) || (integratedValueB >= ALARM_LIMIT)) {    // either integrator at the limit
 80a03d2:	7828      	ldrb	r0, [r5, #0]
 80a03d4:	4b12      	ldr	r3, [pc, #72]	; (80a0420 <_Z15alarmIntegratorff+0x70>)
 80a03d6:	2804      	cmp	r0, #4
 80a03d8:	d802      	bhi.n	80a03e0 <_Z15alarmIntegratorff+0x30>
 80a03da:	7832      	ldrb	r2, [r6, #0]
 80a03dc:	2a04      	cmp	r2, #4
 80a03de:	d906      	bls.n	80a03ee <_Z15alarmIntegratorff+0x3e>
        lastAlarmState = true;
 80a03e0:	2001      	movs	r0, #1
        return true;
    } else {
        if((integratedValueA <= 0) && (integratedValueB <= 0)) {    // both integrators at zero
            lastAlarmState = false;
 80a03e2:	7018      	strb	r0, [r3, #0]
            return false;
        } else {
            return lastAlarmState;  // in between condition, no change in alarm return value
        }
    }
}  // end of alarmIntegrator()
 80a03e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(integratedValueB > 0) {           // decrement integrator
 80a03e6:	2c00      	cmp	r4, #0
 80a03e8:	d0f3      	beq.n	80a03d2 <_Z15alarmIntegratorff+0x22>
            integratedValueB--;
 80a03ea:	3c01      	subs	r4, #1
 80a03ec:	e013      	b.n	80a0416 <_Z15alarmIntegratorff+0x66>
        if((integratedValueA <= 0) && (integratedValueB <= 0)) {    // both integrators at zero
 80a03ee:	4310      	orrs	r0, r2
 80a03f0:	d0f7      	beq.n	80a03e2 <_Z15alarmIntegratorff+0x32>
            return lastAlarmState;  // in between condition, no change in alarm return value
 80a03f2:	7818      	ldrb	r0, [r3, #0]
 80a03f4:	e7f6      	b.n	80a03e4 <_Z15alarmIntegratorff+0x34>
        if(integratedValueA < ALARM_LIMIT)  {
 80a03f6:	2c04      	cmp	r4, #4
 80a03f8:	d9e6      	bls.n	80a03c8 <_Z15alarmIntegratorff+0x18>
            integratedValueA = ALARM_LIMIT;  // clamp at max value
 80a03fa:	2305      	movs	r3, #5
 80a03fc:	702b      	strb	r3, [r5, #0]
        if(integratedValueB < ALARM_LIMIT)  {
 80a03fe:	4e09      	ldr	r6, [pc, #36]	; (80a0424 <_Z15alarmIntegratorff+0x74>)
    if(thresholdedReadingB == true)  {       // increment integrator
 80a0400:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a0404:	4638      	mov	r0, r7
        if(integratedValueB < ALARM_LIMIT)  {
 80a0406:	7834      	ldrb	r4, [r6, #0]
    if(thresholdedReadingB == true)  {       // increment integrator
 80a0408:	f003 fbb0 	bl	80a3b6c <__aeabi_fcmpgt>
 80a040c:	2800      	cmp	r0, #0
 80a040e:	d0ea      	beq.n	80a03e6 <_Z15alarmIntegratorff+0x36>
        if(integratedValueB < ALARM_LIMIT)  {
 80a0410:	2c04      	cmp	r4, #4
 80a0412:	d8dc      	bhi.n	80a03ce <_Z15alarmIntegratorff+0x1e>
            integratedValueB++;
 80a0414:	3401      	adds	r4, #1
            integratedValueB--;
 80a0416:	7034      	strb	r4, [r6, #0]
 80a0418:	e7db      	b.n	80a03d2 <_Z15alarmIntegratorff+0x22>
 80a041a:	bf00      	nop
 80a041c:	200002ce 	.word	0x200002ce
 80a0420:	200002cd 	.word	0x200002cd
 80a0424:	200002cf 	.word	0x200002cf

080a0428 <_Z4diffmm>:
        current - the current time value from millis(), as unsigned long
        last - the previous time value from millis(), as unsigned long
    return:
        the difference between current and last, as unsigned long
*/
unsigned long diff(unsigned long current, unsigned long last)  {
 80a0428:	4603      	mov	r3, r0
    const unsigned long MAX = 0xffffffff;  // an unsigned long is 4 bytes
    unsigned long difference;

    if (current < last) {       // overflow condition
        difference = (MAX - last) + current;
 80a042a:	1a40      	subs	r0, r0, r1
    if (current < last) {       // overflow condition
 80a042c:	428b      	cmp	r3, r1
        difference = (MAX - last) + current;
 80a042e:	bf38      	it	cc
 80a0430:	f100 30ff 	addcc.w	r0, r0, #4294967295
    } else {
        difference = current - last;
    }
    return difference;
}  // end of diff()
 80a0434:	4770      	bx	lr
	...

080a0438 <_Z16nbFlashIndicatorb>:
void nbFlashIndicator(boolean flash) {
 80a0438:	b538      	push	{r3, r4, r5, lr}
    static unsigned long lastTime = millis();
 80a043a:	4c17      	ldr	r4, [pc, #92]	; (80a0498 <_Z16nbFlashIndicatorb+0x60>)
void nbFlashIndicator(boolean flash) {
 80a043c:	4605      	mov	r5, r0
    static unsigned long lastTime = millis();
 80a043e:	7823      	ldrb	r3, [r4, #0]
 80a0440:	f3bf 8f5b 	dmb	ish
 80a0444:	07db      	lsls	r3, r3, #31
 80a0446:	d40a      	bmi.n	80a045e <_Z16nbFlashIndicatorb+0x26>
 80a0448:	4620      	mov	r0, r4
 80a044a:	f7ff fe2c 	bl	80a00a6 <__cxa_guard_acquire>
 80a044e:	b130      	cbz	r0, 80a045e <_Z16nbFlashIndicatorb+0x26>
 80a0450:	f000 feac 	bl	80a11ac <HAL_Timer_Get_Milli_Seconds>
 80a0454:	4b11      	ldr	r3, [pc, #68]	; (80a049c <_Z16nbFlashIndicatorb+0x64>)
 80a0456:	6018      	str	r0, [r3, #0]
 80a0458:	4620      	mov	r0, r4
 80a045a:	f7ff fe29 	bl	80a00b0 <__cxa_guard_release>
    if(flash == true) {     // flashes the LED
 80a045e:	4c10      	ldr	r4, [pc, #64]	; (80a04a0 <_Z16nbFlashIndicatorb+0x68>)
 80a0460:	b1ad      	cbz	r5, 80a048e <_Z16nbFlashIndicatorb+0x56>
        if(diff(millis(), lastTime) >= FLASH_INTERVAL) { // flip the LED state
 80a0462:	4d0e      	ldr	r5, [pc, #56]	; (80a049c <_Z16nbFlashIndicatorb+0x64>)
 80a0464:	f000 fea2 	bl	80a11ac <HAL_Timer_Get_Milli_Seconds>
 80a0468:	6829      	ldr	r1, [r5, #0]
 80a046a:	f7ff ffdd 	bl	80a0428 <_Z4diffmm>
 80a046e:	2895      	cmp	r0, #149	; 0x95
 80a0470:	d906      	bls.n	80a0480 <_Z16nbFlashIndicatorb+0x48>
            lastOn = !lastOn;
 80a0472:	7823      	ldrb	r3, [r4, #0]
 80a0474:	f083 0301 	eor.w	r3, r3, #1
 80a0478:	7023      	strb	r3, [r4, #0]
 80a047a:	f000 fe97 	bl	80a11ac <HAL_Timer_Get_Milli_Seconds>
            lastTime = millis();
 80a047e:	6028      	str	r0, [r5, #0]
    if(lastOn == true)  {
 80a0480:	7821      	ldrb	r1, [r4, #0]
 80a0482:	b931      	cbnz	r1, 80a0492 <_Z16nbFlashIndicatorb+0x5a>
}   // end of nbFlashIndicator()
 80a0484:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        digitalWrite(INDICATOR_PIN, LOW);
 80a0488:	2005      	movs	r0, #5
 80a048a:	f002 bc18 	b.w	80a2cbe <digitalWrite>
        lastOn = true;
 80a048e:	2301      	movs	r3, #1
 80a0490:	7023      	strb	r3, [r4, #0]
        digitalWrite(INDICATOR_PIN, HIGH);
 80a0492:	2101      	movs	r1, #1
 80a0494:	e7f6      	b.n	80a0484 <_Z16nbFlashIndicatorb+0x4c>
 80a0496:	bf00      	nop
 80a0498:	200002bc 	.word	0x200002bc
 80a049c:	200002d0 	.word	0x200002d0
 80a04a0:	20000000 	.word	0x20000000

080a04a4 <_Z12nbSoundAlarmb>:
void nbSoundAlarm(boolean sound) {
 80a04a4:	b538      	push	{r3, r4, r5, lr}
    static unsigned long lastTime = millis();
 80a04a6:	4c17      	ldr	r4, [pc, #92]	; (80a0504 <_Z12nbSoundAlarmb+0x60>)
void nbSoundAlarm(boolean sound) {
 80a04a8:	4605      	mov	r5, r0
    static unsigned long lastTime = millis();
 80a04aa:	7823      	ldrb	r3, [r4, #0]
 80a04ac:	f3bf 8f5b 	dmb	ish
 80a04b0:	07db      	lsls	r3, r3, #31
 80a04b2:	d40a      	bmi.n	80a04ca <_Z12nbSoundAlarmb+0x26>
 80a04b4:	4620      	mov	r0, r4
 80a04b6:	f7ff fdf6 	bl	80a00a6 <__cxa_guard_acquire>
 80a04ba:	b130      	cbz	r0, 80a04ca <_Z12nbSoundAlarmb+0x26>
 80a04bc:	f000 fe76 	bl	80a11ac <HAL_Timer_Get_Milli_Seconds>
 80a04c0:	4b11      	ldr	r3, [pc, #68]	; (80a0508 <_Z12nbSoundAlarmb+0x64>)
 80a04c2:	6018      	str	r0, [r3, #0]
 80a04c4:	4620      	mov	r0, r4
 80a04c6:	f7ff fdf3 	bl	80a00b0 <__cxa_guard_release>
    if(sound == true) {     // sound the buzzer
 80a04ca:	4c10      	ldr	r4, [pc, #64]	; (80a050c <_Z12nbSoundAlarmb+0x68>)
 80a04cc:	b1b5      	cbz	r5, 80a04fc <_Z12nbSoundAlarmb+0x58>
        if(diff(millis(), lastTime) >= BEEP_INTERVAL) { // flip the buzzer state
 80a04ce:	4d0e      	ldr	r5, [pc, #56]	; (80a0508 <_Z12nbSoundAlarmb+0x64>)
 80a04d0:	f000 fe6c 	bl	80a11ac <HAL_Timer_Get_Milli_Seconds>
 80a04d4:	6829      	ldr	r1, [r5, #0]
 80a04d6:	f7ff ffa7 	bl	80a0428 <_Z4diffmm>
 80a04da:	2831      	cmp	r0, #49	; 0x31
 80a04dc:	d906      	bls.n	80a04ec <_Z12nbSoundAlarmb+0x48>
            lastOn = !lastOn;
 80a04de:	7823      	ldrb	r3, [r4, #0]
 80a04e0:	f083 0301 	eor.w	r3, r3, #1
 80a04e4:	7023      	strb	r3, [r4, #0]
 80a04e6:	f000 fe61 	bl	80a11ac <HAL_Timer_Get_Milli_Seconds>
            lastTime = millis();
 80a04ea:	6028      	str	r0, [r5, #0]
    if(lastOn == true)  {
 80a04ec:	7823      	ldrb	r3, [r4, #0]
 80a04ee:	b133      	cbz	r3, 80a04fe <_Z12nbSoundAlarmb+0x5a>
        digitalWrite(ALARM_PIN, HIGH);
 80a04f0:	2101      	movs	r1, #1
}   // end of nbSoundAlarm()
 80a04f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        digitalWrite(ALARM_PIN, LOW);
 80a04f6:	2006      	movs	r0, #6
 80a04f8:	f002 bbe1 	b.w	80a2cbe <digitalWrite>
        lastOn = false;
 80a04fc:	7025      	strb	r5, [r4, #0]
        digitalWrite(ALARM_PIN, LOW);
 80a04fe:	2100      	movs	r1, #0
 80a0500:	e7f7      	b.n	80a04f2 <_Z12nbSoundAlarmb+0x4e>
 80a0502:	bf00      	nop
 80a0504:	200002b8 	.word	0x200002b8
 80a0508:	200002c4 	.word	0x200002c4
 80a050c:	200002c1 	.word	0x200002c1

080a0510 <_Z22nbWaterMeasureIntervalm>:
boolean nbWaterMeasureInterval(unsigned long delayTime) {
 80a0510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(lastState == false) {
 80a0512:	4d0d      	ldr	r5, [pc, #52]	; (80a0548 <_Z22nbWaterMeasureIntervalm+0x38>)
boolean nbWaterMeasureInterval(unsigned long delayTime) {
 80a0514:	4607      	mov	r7, r0
    if(lastState == false) {
 80a0516:	782c      	ldrb	r4, [r5, #0]
 80a0518:	4e0c      	ldr	r6, [pc, #48]	; (80a054c <_Z22nbWaterMeasureIntervalm+0x3c>)
 80a051a:	b92c      	cbnz	r4, 80a0528 <_Z22nbWaterMeasureIntervalm+0x18>
 80a051c:	f000 fe46 	bl	80a11ac <HAL_Timer_Get_Milli_Seconds>
        lastState = true;   // in measurement
 80a0520:	2401      	movs	r4, #1
        lastTime = millis();
 80a0522:	6030      	str	r0, [r6, #0]
        lastState = false;  // timing has expired
 80a0524:	702c      	strb	r4, [r5, #0]
        return false;
 80a0526:	e009      	b.n	80a053c <_Z22nbWaterMeasureIntervalm+0x2c>
 80a0528:	f000 fe40 	bl	80a11ac <HAL_Timer_Get_Milli_Seconds>
    if(diff(currentTime, lastTime) < delayTime) { // time not yet expired
 80a052c:	6831      	ldr	r1, [r6, #0]
 80a052e:	4602      	mov	r2, r0
 80a0530:	f7ff ff7a 	bl	80a0428 <_Z4diffmm>
 80a0534:	42b8      	cmp	r0, r7
 80a0536:	d203      	bcs.n	80a0540 <_Z22nbWaterMeasureIntervalm+0x30>
        lastState = true;  // timing in process
 80a0538:	2301      	movs	r3, #1
 80a053a:	702b      	strb	r3, [r5, #0]
}  // end of nbWaterMeasureInterval
 80a053c:	4620      	mov	r0, r4
 80a053e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lastState = false;  // timing has expired
 80a0540:	2400      	movs	r4, #0
        lastTime = currentTime;
 80a0542:	6032      	str	r2, [r6, #0]
        lastState = false;  // timing has expired
 80a0544:	e7ee      	b.n	80a0524 <_Z22nbWaterMeasureIntervalm+0x14>
 80a0546:	bf00      	nop
 80a0548:	200002d8 	.word	0x200002d8
 80a054c:	200002d4 	.word	0x200002d4

080a0550 <_Z14readPushButtonv>:
boolean readPushButton() {
 80a0550:	b570      	push	{r4, r5, r6, lr}
    if(digitalRead(BUTTON_PIN) == LOW) {  // button has been pressed
 80a0552:	2004      	movs	r0, #4
 80a0554:	f002 fbcc 	bl	80a2cf0 <digitalRead>
 80a0558:	4d0e      	ldr	r5, [pc, #56]	; (80a0594 <_Z14readPushButtonv+0x44>)
 80a055a:	4604      	mov	r4, r0
 80a055c:	b9b8      	cbnz	r0, 80a058e <_Z14readPushButtonv+0x3e>
        switch (lastState) {
 80a055e:	782e      	ldrb	r6, [r5, #0]
 80a0560:	b11e      	cbz	r6, 80a056a <_Z14readPushButtonv+0x1a>
 80a0562:	2e01      	cmp	r6, #1
 80a0564:	d009      	beq.n	80a057a <_Z14readPushButtonv+0x2a>
                    return false;
 80a0566:	4620      	mov	r0, r4
 80a0568:	e006      	b.n	80a0578 <_Z14readPushButtonv+0x28>
 80a056a:	f000 fe1f 	bl	80a11ac <HAL_Timer_Get_Milli_Seconds>
                beginTime = millis();
 80a056e:	4b0a      	ldr	r3, [pc, #40]	; (80a0598 <_Z14readPushButtonv+0x48>)
 80a0570:	6018      	str	r0, [r3, #0]
                lastState = DEBOUNCING;
 80a0572:	2301      	movs	r3, #1
                    return true;
 80a0574:	4630      	mov	r0, r6
                    lastState = DEBOUNCED;
 80a0576:	702b      	strb	r3, [r5, #0]
}  // end of readPushButton
 80a0578:	bd70      	pop	{r4, r5, r6, pc}
 80a057a:	f000 fe17 	bl	80a11ac <HAL_Timer_Get_Milli_Seconds>
                if(diff(millis(), beginTime) < DEBOUNCE_TIME) {
 80a057e:	4b06      	ldr	r3, [pc, #24]	; (80a0598 <_Z14readPushButtonv+0x48>)
 80a0580:	6819      	ldr	r1, [r3, #0]
 80a0582:	f7ff ff51 	bl	80a0428 <_Z4diffmm>
 80a0586:	2809      	cmp	r0, #9
 80a0588:	d9ed      	bls.n	80a0566 <_Z14readPushButtonv+0x16>
                    lastState = DEBOUNCED;
 80a058a:	2302      	movs	r3, #2
 80a058c:	e7f2      	b.n	80a0574 <_Z14readPushButtonv+0x24>
        lastState = OFF;
 80a058e:	2000      	movs	r0, #0
 80a0590:	7028      	strb	r0, [r5, #0]
        return false;
 80a0592:	e7f1      	b.n	80a0578 <_Z14readPushButtonv+0x28>
 80a0594:	200002cc 	.word	0x200002cc
 80a0598:	200002c8 	.word	0x200002c8

080a059c <_Z7readDHTb>:
readDHT():  read temperature and humidity from the DHT11 sensor
    arguments:
        startRead:  true to start a reading, false otherwise
    return: status code, per global definitions
*/
int readDHT(boolean startRead) {
 80a059c:	b510      	push	{r4, lr}
    static int _state = COMPLETE_OK;

    if(_state == ACQUIRING) {  // test to see if we are done
 80a059e:	4c0d      	ldr	r4, [pc, #52]	; (80a05d4 <_Z7readDHTb+0x38>)
 80a05a0:	6823      	ldr	r3, [r4, #0]
 80a05a2:	b97b      	cbnz	r3, 80a05c4 <_Z7readDHTb+0x28>
        if(DHT.acquiring() == false) { // done acquriring
 80a05a4:	480c      	ldr	r0, [pc, #48]	; (80a05d8 <_Z7readDHTb+0x3c>)
 80a05a6:	f000 fd3b 	bl	80a1020 <_ZN14PietteTech_DHT9acquiringEv>
 80a05aa:	b938      	cbnz	r0, 80a05bc <_Z7readDHTb+0x20>
            dhtResultCode = DHT.getStatus();  // store the result code fromt he library
 80a05ac:	480a      	ldr	r0, [pc, #40]	; (80a05d8 <_Z7readDHTb+0x3c>)
 80a05ae:	f000 fd50 	bl	80a1052 <_ZN14PietteTech_DHT9getStatusEv>
 80a05b2:	4b0a      	ldr	r3, [pc, #40]	; (80a05dc <_Z7readDHTb+0x40>)
 80a05b4:	6018      	str	r0, [r3, #0]
           if(dhtResultCode == DHTLIB_OK) {
 80a05b6:	b918      	cbnz	r0, 80a05c0 <_Z7readDHTb+0x24>
               _state = COMPLETE_OK;
 80a05b8:	2301      	movs	r3, #1
           } else {
               _state = COMPLETE_ERROR;
 80a05ba:	6023      	str	r3, [r4, #0]
        }
    }

    return _state;

}  // end of readDHT()
 80a05bc:	6820      	ldr	r0, [r4, #0]
 80a05be:	bd10      	pop	{r4, pc}
               _state = COMPLETE_ERROR;
 80a05c0:	2302      	movs	r3, #2
 80a05c2:	e7fa      	b.n	80a05ba <_Z7readDHTb+0x1e>
        if(startRead == true) {  // we must start a new reading of sensor data
 80a05c4:	2800      	cmp	r0, #0
 80a05c6:	d0f9      	beq.n	80a05bc <_Z7readDHTb+0x20>
           _state = ACQUIRING;  // set the state to acquiring
 80a05c8:	2300      	movs	r3, #0
            DHT.acquire(); // start the acquisition
 80a05ca:	4803      	ldr	r0, [pc, #12]	; (80a05d8 <_Z7readDHTb+0x3c>)
           _state = ACQUIRING;  // set the state to acquiring
 80a05cc:	6023      	str	r3, [r4, #0]
            DHT.acquire(); // start the acquisition
 80a05ce:	f000 fc5b 	bl	80a0e88 <_ZN14PietteTech_DHT7acquireEv>
 80a05d2:	e7f3      	b.n	80a05bc <_Z7readDHTb+0x20>
 80a05d4:	20000004 	.word	0x20000004
 80a05d8:	2000025c 	.word	0x2000025c
 80a05dc:	20000310 	.word	0x20000310

080a05e0 <_Z9meterTempf>:

/* meterTemp():  display temperature reading on the servo meter
    arguments:
        temperature: the temperature to display on the meter
*/
void meterTemp(float temperature)  {
 80a05e0:	b508      	push	{r3, lr}
    int _temp, _mve, _cmd;

    _temp = (int)(temperature + 0.5);  // round and truncate to an integer
 80a05e2:	f002 fdbf 	bl	80a3164 <__aeabi_f2d>
 80a05e6:	4b0d      	ldr	r3, [pc, #52]	; (80a061c <_Z9meterTempf+0x3c>)
 80a05e8:	2200      	movs	r2, #0
 80a05ea:	f002 fc5d 	bl	80a2ea8 <__adddf3>
 80a05ee:	f003 f8ab 	bl	80a3748 <__aeabi_d2iz>
 80a05f2:	2878      	cmp	r0, #120	; 0x78
 80a05f4:	4601      	mov	r1, r0
 80a05f6:	bfa8      	it	ge
 80a05f8:	2178      	movge	r1, #120	; 0x78
        _temp = LO_TEMP;
    } else if(_temp > HI_TEMP) {
        _temp = HI_TEMP;
    }

    _mve = (_temp - LO_TEMP) * (MAX_POS - MIN_POS) / TEMP_RANGE;
 80a05fa:	2928      	cmp	r1, #40	; 0x28
 80a05fc:	bfb8      	it	lt
 80a05fe:	2128      	movlt	r1, #40	; 0x28
 80a0600:	23aa      	movs	r3, #170	; 0xaa
 80a0602:	3928      	subs	r1, #40	; 0x28
 80a0604:	4359      	muls	r1, r3
 80a0606:	2350      	movs	r3, #80	; 0x50
 80a0608:	fbb1 f1f3 	udiv	r1, r1, r3
    _cmd = MAX_POS - _mve;
    myservo.write(_cmd);

    return;
}  // end of meterTemp()
 80a060c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    myservo.write(_cmd);
 80a0610:	4803      	ldr	r0, [pc, #12]	; (80a0620 <_Z9meterTempf+0x40>)
 80a0612:	f1c1 01af 	rsb	r1, r1, #175	; 0xaf
 80a0616:	f001 b837 	b.w	80a1688 <_ZN5Servo5writeEi>
 80a061a:	bf00      	nop
 80a061c:	3fe00000 	.word	0x3fe00000
 80a0620:	20000360 	.word	0x20000360

080a0624 <_Z13meterHumidityf>:

/* meterHumidity():  display humidity reading on the servo meter
    arguments:
        humidity: the humidity to display on the meter
*/
void meterHumidity(float humidity)  {
 80a0624:	b508      	push	{r3, lr}
    int _hum, _mve, _cmd;

    _hum = (int)(humidity + 0.5);  // round and truncate to an integer
 80a0626:	f002 fd9d 	bl	80a3164 <__aeabi_f2d>
 80a062a:	4b0b      	ldr	r3, [pc, #44]	; (80a0658 <_Z13meterHumidityf+0x34>)
 80a062c:	2200      	movs	r2, #0
 80a062e:	f002 fc3b 	bl	80a2ea8 <__adddf3>
 80a0632:	f003 f889 	bl	80a3748 <__aeabi_d2iz>
 80a0636:	2864      	cmp	r0, #100	; 0x64
 80a0638:	bfa8      	it	ge
 80a063a:	2064      	movge	r0, #100	; 0x64
        _hum = LO_HUM;
    } else if(_hum > HI_HUM) {
        _hum = HI_HUM;
    }

    _mve = (_hum - LO_HUM) * (MAX_POS - MIN_POS) / HUM_RANGE;
 80a063c:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
 80a0640:	20aa      	movs	r0, #170	; 0xaa
 80a0642:	2364      	movs	r3, #100	; 0x64
 80a0644:	4341      	muls	r1, r0
 80a0646:	fbb1 f1f3 	udiv	r1, r1, r3
    _cmd = MAX_POS - _mve;
    myservo.write(_cmd);

    return;
}  // end of meterHumidity()
 80a064a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    myservo.write(_cmd);
 80a064e:	4803      	ldr	r0, [pc, #12]	; (80a065c <_Z13meterHumidityf+0x38>)
 80a0650:	f1c1 01af 	rsb	r1, r1, #175	; 0xaf
 80a0654:	f001 b818 	b.w	80a1688 <_ZN5Servo5writeEi>
 80a0658:	3fe00000 	.word	0x3fe00000
 80a065c:	20000360 	.word	0x20000360

080a0660 <loop>:
void loop() {
 80a0660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(digitalRead(TOGGLE_PIN) == LOW)  {   // indicates a temperature reading
 80a0664:	2001      	movs	r0, #1
void loop() {
 80a0666:	b085      	sub	sp, #20
    if(digitalRead(TOGGLE_PIN) == LOW)  {   // indicates a temperature reading
 80a0668:	f002 fb42 	bl	80a2cf0 <digitalRead>
 80a066c:	4602      	mov	r2, r0
 80a066e:	fab0 f080 	clz	r0, r0
    if(toggle != lastToggle) {  // user has changed the toggle switch state
 80a0672:	4bad      	ldr	r3, [pc, #692]	; (80a0928 <loop+0x2c8>)
    if(digitalRead(TOGGLE_PIN) == LOW)  {   // indicates a temperature reading
 80a0674:	0940      	lsrs	r0, r0, #5
    if(toggle != lastToggle) {  // user has changed the toggle switch state
 80a0676:	7819      	ldrb	r1, [r3, #0]
 80a0678:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 80a092c <loop+0x2cc>
 80a067c:	4281      	cmp	r1, r0
 80a067e:	f88a 0000 	strb.w	r0, [sl]
 80a0682:	d007      	beq.n	80a0694 <loop+0x34>
        lastToggle = toggle;
 80a0684:	7018      	strb	r0, [r3, #0]
        if(toggle == false) {   // display humidity now
 80a0686:	2a00      	cmp	r2, #0
 80a0688:	f000 811b 	beq.w	80a08c2 <loop+0x262>
	        meterHumidity(mg_smoothedHumidity);
 80a068c:	4ba8      	ldr	r3, [pc, #672]	; (80a0930 <loop+0x2d0>)
 80a068e:	6818      	ldr	r0, [r3, #0]
 80a0690:	f7ff ffc8 	bl	80a0624 <_Z13meterHumidityf>
    int sensorStatus = readDHT(false);  // refresh the sensor status but don't start a new reading
 80a0694:	2000      	movs	r0, #0
 80a0696:	f7ff ff81 	bl	80a059c <_Z7readDHTb>
	if(sensorStatus != ACQUIRING) {
 80a069a:	2800      	cmp	r0, #0
 80a069c:	f000 80b8 	beq.w	80a0810 <loop+0x1b0>
        if(newData == true) { // we have new data
 80a06a0:	4fa4      	ldr	r7, [pc, #656]	; (80a0934 <loop+0x2d4>)
 80a06a2:	783b      	ldrb	r3, [r7, #0]
 80a06a4:	2b00      	cmp	r3, #0
 80a06a6:	f000 8098 	beq.w	80a07da <loop+0x17a>
            currentTemp = DHT.getFahrenheit();
 80a06aa:	48a3      	ldr	r0, [pc, #652]	; (80a0938 <loop+0x2d8>)
 80a06ac:	f000 fcf4 	bl	80a1098 <_ZN14PietteTech_DHT13getFahrenheitEv>
 80a06b0:	4683      	mov	fp, r0
            currentHumidity = DHT.getHumidity();
 80a06b2:	48a1      	ldr	r0, [pc, #644]	; (80a0938 <loop+0x2d8>)
 80a06b4:	f000 fcd4 	bl	80a1060 <_ZN14PietteTech_DHT11getHumidityEv>
            if (mg_smoothedTemp < 10) {   // first time init
 80a06b8:	4ca0      	ldr	r4, [pc, #640]	; (80a093c <loop+0x2dc>)
            currentHumidity = DHT.getHumidity();
 80a06ba:	4606      	mov	r6, r0
            if (mg_smoothedTemp < 10) {   // first time init
 80a06bc:	49a0      	ldr	r1, [pc, #640]	; (80a0940 <loop+0x2e0>)
 80a06be:	6820      	ldr	r0, [r4, #0]
 80a06c0:	f003 fa36 	bl	80a3b30 <__aeabi_fcmplt>
 80a06c4:	b108      	cbz	r0, 80a06ca <loop+0x6a>
                mg_smoothedTemp = currentTemp;
 80a06c6:	f8c4 b000 	str.w	fp, [r4]
            if (mg_smoothedHumidity < 10){  // first time init
 80a06ca:	4d99      	ldr	r5, [pc, #612]	; (80a0930 <loop+0x2d0>)
 80a06cc:	499c      	ldr	r1, [pc, #624]	; (80a0940 <loop+0x2e0>)
 80a06ce:	6828      	ldr	r0, [r5, #0]
 80a06d0:	f003 fa2e 	bl	80a3b30 <__aeabi_fcmplt>
 80a06d4:	b100      	cbz	r0, 80a06d8 <loop+0x78>
                mg_smoothedHumidity = currentHumidity;
 80a06d6:	602e      	str	r6, [r5, #0]
            mg_smoothedTemp =  (0.9 * mg_smoothedTemp) +  (0.1 * currentTemp);
 80a06d8:	6820      	ldr	r0, [r4, #0]
 80a06da:	f002 fd43 	bl	80a3164 <__aeabi_f2d>
 80a06de:	a38a      	add	r3, pc, #552	; (adr r3, 80a0908 <loop+0x2a8>)
 80a06e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a06e4:	f002 fd96 	bl	80a3214 <__aeabi_dmul>
 80a06e8:	4680      	mov	r8, r0
 80a06ea:	4658      	mov	r0, fp
 80a06ec:	4689      	mov	r9, r1
 80a06ee:	f002 fd39 	bl	80a3164 <__aeabi_f2d>
 80a06f2:	a387      	add	r3, pc, #540	; (adr r3, 80a0910 <loop+0x2b0>)
 80a06f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a06f8:	f002 fd8c 	bl	80a3214 <__aeabi_dmul>
 80a06fc:	4602      	mov	r2, r0
 80a06fe:	460b      	mov	r3, r1
 80a0700:	4640      	mov	r0, r8
 80a0702:	4649      	mov	r1, r9
 80a0704:	f002 fbd0 	bl	80a2ea8 <__adddf3>
 80a0708:	f003 f866 	bl	80a37d8 <__aeabi_d2f>
 80a070c:	6020      	str	r0, [r4, #0]
 80a070e:	4683      	mov	fp, r0
            mg_smoothedHumidity =  (0.9 * mg_smoothedHumidity) +  (0.1 * currentHumidity);
 80a0710:	6828      	ldr	r0, [r5, #0]
 80a0712:	f002 fd27 	bl	80a3164 <__aeabi_f2d>
 80a0716:	a37c      	add	r3, pc, #496	; (adr r3, 80a0908 <loop+0x2a8>)
 80a0718:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a071c:	f002 fd7a 	bl	80a3214 <__aeabi_dmul>
 80a0720:	4680      	mov	r8, r0
 80a0722:	4630      	mov	r0, r6
 80a0724:	4689      	mov	r9, r1
 80a0726:	f002 fd1d 	bl	80a3164 <__aeabi_f2d>
 80a072a:	a379      	add	r3, pc, #484	; (adr r3, 80a0910 <loop+0x2b0>)
 80a072c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0730:	f002 fd70 	bl	80a3214 <__aeabi_dmul>
 80a0734:	460b      	mov	r3, r1
 80a0736:	4602      	mov	r2, r0
 80a0738:	4649      	mov	r1, r9
 80a073a:	4640      	mov	r0, r8
 80a073c:	f002 fbb4 	bl	80a2ea8 <__adddf3>
 80a0740:	f003 f84a 	bl	80a37d8 <__aeabi_d2f>
	        if(toggle == true)  {   // temperature reading called for
 80a0744:	f89a 3000 	ldrb.w	r3, [sl]
            mg_smoothedHumidity =  (0.9 * mg_smoothedHumidity) +  (0.1 * currentHumidity);
 80a0748:	6028      	str	r0, [r5, #0]
	        if(toggle == true)  {   // temperature reading called for
 80a074a:	2b00      	cmp	r3, #0
 80a074c:	f000 80be 	beq.w	80a08cc <loop+0x26c>
	            meterTemp(mg_smoothedTemp);
 80a0750:	4658      	mov	r0, fp
 80a0752:	f7ff ff45 	bl	80a05e0 <_Z9meterTempf>
            temperature = String(mg_smoothedTemp);
 80a0756:	2206      	movs	r2, #6
 80a0758:	6821      	ldr	r1, [r4, #0]
 80a075a:	4668      	mov	r0, sp
 80a075c:	f001 f98c 	bl	80a1a78 <_ZN6StringC1Efi>
 80a0760:	4669      	mov	r1, sp
 80a0762:	4878      	ldr	r0, [pc, #480]	; (80a0944 <loop+0x2e4>)
 80a0764:	f001 f94a 	bl	80a19fc <_ZN6StringaSEOS_>
 80a0768:	4668      	mov	r0, sp
 80a076a:	f001 f8b3 	bl	80a18d4 <_ZN6StringD1Ev>
            humidity = String(mg_smoothedHumidity);
 80a076e:	2206      	movs	r2, #6
 80a0770:	6829      	ldr	r1, [r5, #0]
 80a0772:	4668      	mov	r0, sp
 80a0774:	f001 f980 	bl	80a1a78 <_ZN6StringC1Efi>
 80a0778:	4669      	mov	r1, sp
 80a077a:	4873      	ldr	r0, [pc, #460]	; (80a0948 <loop+0x2e8>)
 80a077c:	f001 f93e 	bl	80a19fc <_ZN6StringaSEOS_>
 80a0780:	4668      	mov	r0, sp
 80a0782:	f001 f8a7 	bl	80a18d4 <_ZN6StringD1Ev>
            if(mg_smoothedTemp < lowTempAlarmLimit.toFloat()) { // we have a low temperature alarm
 80a0786:	4871      	ldr	r0, [pc, #452]	; (80a094c <loop+0x2ec>)
 80a0788:	f001 fa16 	bl	80a1bb8 <_ZNK6String7toFloatEv>
 80a078c:	6821      	ldr	r1, [r4, #0]
 80a078e:	f003 f9ed 	bl	80a3b6c <__aeabi_fcmpgt>
 80a0792:	3800      	subs	r0, #0
 80a0794:	bf18      	it	ne
 80a0796:	2001      	movne	r0, #1
 80a0798:	4d6d      	ldr	r5, [pc, #436]	; (80a0950 <loop+0x2f0>)
 80a079a:	7028      	strb	r0, [r5, #0]
            if(mg_smoothedTemp > highTempAlarmLimit.toFloat()) { // we have a high temperature alarm
 80a079c:	486d      	ldr	r0, [pc, #436]	; (80a0954 <loop+0x2f4>)
 80a079e:	f001 fa0b 	bl	80a1bb8 <_ZNK6String7toFloatEv>
 80a07a2:	6826      	ldr	r6, [r4, #0]
 80a07a4:	4631      	mov	r1, r6
 80a07a6:	f003 f9c3 	bl	80a3b30 <__aeabi_fcmplt>
 80a07aa:	2800      	cmp	r0, #0
 80a07ac:	f000 8091 	beq.w	80a08d2 <loop+0x272>
                Alarms.highTempAlarm = true; // set the high temperature alarm flag
 80a07b0:	2301      	movs	r3, #1
                alarmer.sendHighTemperatureAlarm(mg_smoothedTemp); // send out the alarm for processing
 80a07b2:	4631      	mov	r1, r6
 80a07b4:	4868      	ldr	r0, [pc, #416]	; (80a0958 <loop+0x2f8>)
                Alarms.highTempAlarm = true; // set the high temperature alarm flag
 80a07b6:	706b      	strb	r3, [r5, #1]
                alarmer.sendHighTemperatureAlarm(mg_smoothedTemp); // send out the alarm for processing
 80a07b8:	f7ff fcf6 	bl	80a01a8 <_ZN17WLDAlarmProcessor24sendHighTemperatureAlarmEf>
            if(Alarms.lowTempAlarm == true) {   // low temp alarm needs processing
 80a07bc:	782b      	ldrb	r3, [r5, #0]
 80a07be:	2b00      	cmp	r3, #0
 80a07c0:	f000 8089 	beq.w	80a08d6 <loop+0x276>
                alarmer.sendLowTemperatureAlarm(mg_smoothedTemp); // send out the alarm for processing
 80a07c4:	4864      	ldr	r0, [pc, #400]	; (80a0958 <loop+0x2f8>)
 80a07c6:	6821      	ldr	r1, [r4, #0]
 80a07c8:	f7ff fcb6 	bl	80a0138 <_ZN17WLDAlarmProcessor23sendLowTemperatureAlarmEf>
                alarmer.armHighTempAlarm();  // reset the alarm processing for a new alarm in the future
 80a07cc:	4862      	ldr	r0, [pc, #392]	; (80a0958 <loop+0x2f8>)
 80a07ce:	f7ff fc96 	bl	80a00fe <_ZN17WLDAlarmProcessor16armHighTempAlarmEv>
            writeAlarmStatusString();
 80a07d2:	f7ff fdb9 	bl	80a0348 <_Z22writeAlarmStatusStringv>
	        newData = false; // don't publish/process results again until a new reading
 80a07d6:	2300      	movs	r3, #0
 80a07d8:	703b      	strb	r3, [r7, #0]
        if((diff(millis(), lastReadTime)) >= DHT_SAMPLE_INTERVAL) { // we are ready for a new reading
 80a07da:	4d60      	ldr	r5, [pc, #384]	; (80a095c <loop+0x2fc>)
 80a07dc:	f000 fce6 	bl	80a11ac <HAL_Timer_Get_Milli_Seconds>
 80a07e0:	6829      	ldr	r1, [r5, #0]
 80a07e2:	f7ff fe21 	bl	80a0428 <_Z4diffmm>
 80a07e6:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
 80a07ea:	d311      	bcc.n	80a0810 <loop+0x1b0>
          newData = true; // set flag to indicate that a new reading will result
 80a07ec:	2401      	movs	r4, #1
          readDHT(true);  // start a new reading
 80a07ee:	2001      	movs	r0, #1
 80a07f0:	f7ff fed4 	bl	80a059c <_Z7readDHTb>
          newData = true; // set flag to indicate that a new reading will result
 80a07f4:	703c      	strb	r4, [r7, #0]
 80a07f6:	f000 fcd9 	bl	80a11ac <HAL_Timer_Get_Milli_Seconds>
            ledState = !ledState;
 80a07fa:	4a59      	ldr	r2, [pc, #356]	; (80a0960 <loop+0x300>)
          lastReadTime = millis();
 80a07fc:	6028      	str	r0, [r5, #0]
            ledState = !ledState;
 80a07fe:	7813      	ldrb	r3, [r2, #0]
 80a0800:	ea83 0104 	eor.w	r1, r3, r4
 80a0804:	7011      	strb	r1, [r2, #0]
            if (ledState) {
 80a0806:	b101      	cbz	r1, 80a080a <loop+0x1aa>
                digitalWrite(LED_PIN, HIGH);
 80a0808:	4621      	mov	r1, r4
                digitalWrite(LED_PIN, LOW);
 80a080a:	2007      	movs	r0, #7
 80a080c:	f002 fa57 	bl	80a2cbe <digitalWrite>
    if(nbWaterMeasureInterval(20) == false) {  // 20 ms between sensor readings
 80a0810:	2014      	movs	r0, #20
 80a0812:	f7ff fe7d 	bl	80a0510 <_Z22nbWaterMeasureIntervalm>
 80a0816:	4f53      	ldr	r7, [pc, #332]	; (80a0964 <loop+0x304>)
 80a0818:	4605      	mov	r5, r0
 80a081a:	4e53      	ldr	r6, [pc, #332]	; (80a0968 <loop+0x308>)
 80a081c:	2800      	cmp	r0, #0
 80a081e:	d13f      	bne.n	80a08a0 <loop+0x240>
        waterLevelA = analogRead(WATER_SENSOR_A_PIN);
 80a0820:	200a      	movs	r0, #10
 80a0822:	f002 fa78 	bl	80a2d16 <analogRead>
 80a0826:	4680      	mov	r8, r0
        waterLevelB = analogRead(WATER_SENSOR_B_PIN);
 80a0828:	200b      	movs	r0, #11
 80a082a:	f002 fa74 	bl	80a2d16 <analogRead>
        waterSensorVoltageB = ((float)waterLevelB * 3.3) / 4095;
 80a082e:	f003 f8dd 	bl	80a39ec <__aeabi_i2f>
 80a0832:	f002 fc97 	bl	80a3164 <__aeabi_f2d>
 80a0836:	a338      	add	r3, pc, #224	; (adr r3, 80a0918 <loop+0x2b8>)
 80a0838:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a083c:	f002 fcea 	bl	80a3214 <__aeabi_dmul>
 80a0840:	a337      	add	r3, pc, #220	; (adr r3, 80a0920 <loop+0x2c0>)
 80a0842:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0846:	f002 fe0f 	bl	80a3468 <__aeabi_ddiv>
 80a084a:	f002 ffc5 	bl	80a37d8 <__aeabi_d2f>
 80a084e:	4604      	mov	r4, r0
        waterSensorVoltageA = ((float)waterLevelA * 3.3) / 4095;
 80a0850:	4640      	mov	r0, r8
 80a0852:	f003 f8cb 	bl	80a39ec <__aeabi_i2f>
 80a0856:	f002 fc85 	bl	80a3164 <__aeabi_f2d>
 80a085a:	a32f      	add	r3, pc, #188	; (adr r3, 80a0918 <loop+0x2b8>)
 80a085c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0860:	f002 fcd8 	bl	80a3214 <__aeabi_dmul>
 80a0864:	a32e      	add	r3, pc, #184	; (adr r3, 80a0920 <loop+0x2c0>)
 80a0866:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a086a:	f002 fdfd 	bl	80a3468 <__aeabi_ddiv>
 80a086e:	f002 ffb3 	bl	80a37d8 <__aeabi_d2f>
        if(alarmIntegrator(waterSensorVoltageA, waterSensorVoltageB) == true) {
 80a0872:	4621      	mov	r1, r4
 80a0874:	f7ff fd9c 	bl	80a03b0 <_Z15alarmIntegratorff>
 80a0878:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80a096c <loop+0x30c>
 80a087c:	4604      	mov	r4, r0
 80a087e:	4b34      	ldr	r3, [pc, #208]	; (80a0950 <loop+0x2f0>)
 80a0880:	2800      	cmp	r0, #0
 80a0882:	d036      	beq.n	80a08f2 <loop+0x292>
            indicator = true;
 80a0884:	2401      	movs	r4, #1
            alarmer.sendWaterLeakAlarm();   // send the alarm for processing
 80a0886:	4834      	ldr	r0, [pc, #208]	; (80a0958 <loop+0x2f8>)
            Alarms.waterLeakAlarm = true;   // set the alarm flag
 80a0888:	709c      	strb	r4, [r3, #2]
            indicator = true;
 80a088a:	703c      	strb	r4, [r7, #0]
            alarmer.sendWaterLeakAlarm();   // send the alarm for processing
 80a088c:	f7ff fcc4 	bl	80a0218 <_ZN17WLDAlarmProcessor18sendWaterLeakAlarmEv>
            writeAlarmStatusString();   // update the alarm status global string
 80a0890:	f7ff fd5a 	bl	80a0348 <_Z22writeAlarmStatusStringv>
            if(mute == false) {
 80a0894:	f898 3000 	ldrb.w	r3, [r8]
                alarm = true;
 80a0898:	2b00      	cmp	r3, #0
 80a089a:	bf08      	it	eq
 80a089c:	4625      	moveq	r5, r4
 80a089e:	7035      	strb	r5, [r6, #0]
    if(readPushButton() == true) {
 80a08a0:	f7ff fe56 	bl	80a0550 <_Z14readPushButtonv>
 80a08a4:	b120      	cbz	r0, 80a08b0 <loop+0x250>
        mute = true; // set the alarm mute flag
 80a08a6:	2201      	movs	r2, #1
 80a08a8:	4b30      	ldr	r3, [pc, #192]	; (80a096c <loop+0x30c>)
 80a08aa:	701a      	strb	r2, [r3, #0]
        alarm = false; // mute the alarm right now
 80a08ac:	2300      	movs	r3, #0
 80a08ae:	7033      	strb	r3, [r6, #0]
    nbFlashIndicator(indicator);
 80a08b0:	7838      	ldrb	r0, [r7, #0]
 80a08b2:	f7ff fdc1 	bl	80a0438 <_Z16nbFlashIndicatorb>
    nbSoundAlarm(alarm);
 80a08b6:	7830      	ldrb	r0, [r6, #0]
} // end of loop()
 80a08b8:	b005      	add	sp, #20
 80a08ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    nbSoundAlarm(alarm);
 80a08be:	f7ff bdf1 	b.w	80a04a4 <_Z12nbSoundAlarmb>
            meterTemp(mg_smoothedTemp); // display temperature now
 80a08c2:	4b1e      	ldr	r3, [pc, #120]	; (80a093c <loop+0x2dc>)
 80a08c4:	6818      	ldr	r0, [r3, #0]
 80a08c6:	f7ff fe8b 	bl	80a05e0 <_Z9meterTempf>
 80a08ca:	e6e3      	b.n	80a0694 <loop+0x34>
	         meterHumidity(mg_smoothedHumidity);
 80a08cc:	f7ff feaa 	bl	80a0624 <_Z13meterHumidityf>
 80a08d0:	e741      	b.n	80a0756 <loop+0xf6>
                Alarms.highTempAlarm = false; // set the low temperature alarm flag
 80a08d2:	7068      	strb	r0, [r5, #1]
 80a08d4:	e772      	b.n	80a07bc <loop+0x15c>
            } else if(Alarms.highTempAlarm == true) {     // high temp alarm needs processing
 80a08d6:	786b      	ldrb	r3, [r5, #1]
 80a08d8:	b13b      	cbz	r3, 80a08ea <loop+0x28a>
                alarmer.sendHighTemperatureAlarm(mg_smoothedTemp); // send out the alarm for processing
 80a08da:	6821      	ldr	r1, [r4, #0]
 80a08dc:	481e      	ldr	r0, [pc, #120]	; (80a0958 <loop+0x2f8>)
 80a08de:	f7ff fc63 	bl	80a01a8 <_ZN17WLDAlarmProcessor24sendHighTemperatureAlarmEf>
                alarmer.armLowTempAlarm();  // reset the alarm processing for a new alarm in the future 
 80a08e2:	481d      	ldr	r0, [pc, #116]	; (80a0958 <loop+0x2f8>)
 80a08e4:	f7ff fc08 	bl	80a00f8 <_ZN17WLDAlarmProcessor15armLowTempAlarmEv>
 80a08e8:	e773      	b.n	80a07d2 <loop+0x172>
                alarmer.armHighTempAlarm();  // reset the alarm processing for a new alarm in the future
 80a08ea:	481b      	ldr	r0, [pc, #108]	; (80a0958 <loop+0x2f8>)
 80a08ec:	f7ff fc07 	bl	80a00fe <_ZN17WLDAlarmProcessor16armHighTempAlarmEv>
 80a08f0:	e7f7      	b.n	80a08e2 <loop+0x282>
            Alarms.waterLeakAlarm = false;   // set the alarm flag
 80a08f2:	7098      	strb	r0, [r3, #2]
            indicator = false;
 80a08f4:	7038      	strb	r0, [r7, #0]
            alarmer.armLeakAlarm();   // send the alarm for processing
 80a08f6:	4818      	ldr	r0, [pc, #96]	; (80a0958 <loop+0x2f8>)
 80a08f8:	f7ff fc04 	bl	80a0104 <_ZN17WLDAlarmProcessor12armLeakAlarmEv>
            writeAlarmStatusString();   // update the alarm status global string
 80a08fc:	f7ff fd24 	bl	80a0348 <_Z22writeAlarmStatusStringv>
            alarm = false;
 80a0900:	7034      	strb	r4, [r6, #0]
            mute = false;   // reset alarm muting
 80a0902:	f888 4000 	strb.w	r4, [r8]
 80a0906:	e7cb      	b.n	80a08a0 <loop+0x240>
 80a0908:	cccccccd 	.word	0xcccccccd
 80a090c:	3feccccc 	.word	0x3feccccc
 80a0910:	9999999a 	.word	0x9999999a
 80a0914:	3fb99999 	.word	0x3fb99999
 80a0918:	66666666 	.word	0x66666666
 80a091c:	400a6666 	.word	0x400a6666
 80a0920:	00000000 	.word	0x00000000
 80a0924:	40affe00 	.word	0x40affe00
 80a0928:	200002d9 	.word	0x200002d9
 80a092c:	200002e2 	.word	0x200002e2
 80a0930:	20000358 	.word	0x20000358
 80a0934:	200002e3 	.word	0x200002e3
 80a0938:	2000025c 	.word	0x2000025c
 80a093c:	2000035c 	.word	0x2000035c
 80a0940:	41200000 	.word	0x41200000
 80a0944:	20000370 	.word	0x20000370
 80a0948:	20000324 	.word	0x20000324
 80a094c:	20000348 	.word	0x20000348
 80a0950:	20000258 	.word	0x20000258
 80a0954:	20000314 	.word	0x20000314
 80a0958:	200002e8 	.word	0x200002e8
 80a095c:	200002dc 	.word	0x200002dc
 80a0960:	20000344 	.word	0x20000344
 80a0964:	200002e4 	.word	0x200002e4
 80a0968:	200002e1 	.word	0x200002e1
 80a096c:	200002e0 	.word	0x200002e0

080a0970 <_Z14setAlarmLimits6String>:
int setAlarmLimits(String alarmLimits) {
 80a0970:	b570      	push	{r4, r5, r6, lr}
 80a0972:	4604      	mov	r4, r0
    for(unsigned int i = 0; i < alarmLimits.length(); i++) {
 80a0974:	2500      	movs	r5, #0
int setAlarmLimits(String alarmLimits) {
 80a0976:	b08a      	sub	sp, #40	; 0x28
    for(unsigned int i = 0; i < alarmLimits.length(); i++) {
 80a0978:	68a3      	ldr	r3, [r4, #8]
 80a097a:	429d      	cmp	r5, r3
 80a097c:	d220      	bcs.n	80a09c0 <_Z14setAlarmLimits6String+0x50>
        if (alarmLimits.charAt(i) == ',') {
 80a097e:	4629      	mov	r1, r5
 80a0980:	4620      	mov	r0, r4
 80a0982:	f001 f8e8 	bl	80a1b56 <_ZNK6String6charAtEj>
 80a0986:	282c      	cmp	r0, #44	; 0x2c
            highTempAlarmLimit = alarmLimits.substring(i+1);
 80a0988:	f105 0601 	add.w	r6, r5, #1
        if (alarmLimits.charAt(i) == ',') {
 80a098c:	d17c      	bne.n	80a0a88 <_Z14setAlarmLimits6String+0x118>
            lowTempAlarmLimit = alarmLimits.substring(0, i);
 80a098e:	462b      	mov	r3, r5
 80a0990:	2200      	movs	r2, #0
 80a0992:	4621      	mov	r1, r4
 80a0994:	a806      	add	r0, sp, #24
 80a0996:	f001 f8e1 	bl	80a1b5c <_ZNK6String9substringEjj>
 80a099a:	a906      	add	r1, sp, #24
 80a099c:	483b      	ldr	r0, [pc, #236]	; (80a0a8c <_Z14setAlarmLimits6String+0x11c>)
 80a099e:	f001 f82d 	bl	80a19fc <_ZN6StringaSEOS_>
 80a09a2:	a806      	add	r0, sp, #24
 80a09a4:	f000 ff96 	bl	80a18d4 <_ZN6StringD1Ev>
            highTempAlarmLimit = alarmLimits.substring(i+1);
 80a09a8:	4632      	mov	r2, r6
 80a09aa:	4621      	mov	r1, r4
 80a09ac:	a806      	add	r0, sp, #24
 80a09ae:	f001 f8f7 	bl	80a1ba0 <_ZNK6String9substringEj>
 80a09b2:	4837      	ldr	r0, [pc, #220]	; (80a0a90 <_Z14setAlarmLimits6String+0x120>)
 80a09b4:	a906      	add	r1, sp, #24
 80a09b6:	f001 f821 	bl	80a19fc <_ZN6StringaSEOS_>
 80a09ba:	a806      	add	r0, sp, #24
 80a09bc:	f000 ff8a 	bl	80a18d4 <_ZN6StringD1Ev>
    AlarmLimits.version = (uint8_t)0;
 80a09c0:	2500      	movs	r5, #0
 80a09c2:	4c34      	ldr	r4, [pc, #208]	; (80a0a94 <_Z14setAlarmLimits6String+0x124>)
    AlarmLimits.tempAlarmLowLimit = (int16_t)(lowTempAlarmLimit.toInt());
 80a09c4:	4831      	ldr	r0, [pc, #196]	; (80a0a8c <_Z14setAlarmLimits6String+0x11c>)
    AlarmLimits.version = (uint8_t)0;
 80a09c6:	7025      	strb	r5, [r4, #0]
    AlarmLimits.tempAlarmLowLimit = (int16_t)(lowTempAlarmLimit.toInt());
 80a09c8:	f001 f8f1 	bl	80a1bae <_ZNK6String5toIntEv>
 80a09cc:	8060      	strh	r0, [r4, #2]
    AlarmLimits.tempAlarmHighLimit = (int16_t)(highTempAlarmLimit.toInt());    
 80a09ce:	4830      	ldr	r0, [pc, #192]	; (80a0a90 <_Z14setAlarmLimits6String+0x120>)
 80a09d0:	f001 f8ed 	bl	80a1bae <_ZNK6String5toIntEv>
 80a09d4:	80a0      	strh	r0, [r4, #4]
    EEPROM.put(addr, AlarmLimits.version);
 80a09d6:	f002 f9f5 	bl	80a2dc4 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a09da:	4621      	mov	r1, r4
 80a09dc:	2201      	movs	r2, #1
 80a09de:	200a      	movs	r0, #10
 80a09e0:	f000 fbf4 	bl	80a11cc <HAL_EEPROM_Put>
    EEPROM.put(addr, AlarmLimits.tempAlarmLowLimit);
 80a09e4:	f002 f9ee 	bl	80a2dc4 <_Z21__fetch_global_EEPROMv>
 80a09e8:	2202      	movs	r2, #2
 80a09ea:	2014      	movs	r0, #20
 80a09ec:	18a1      	adds	r1, r4, r2
 80a09ee:	f000 fbed 	bl	80a11cc <HAL_EEPROM_Put>
    EEPROM.put(addr, AlarmLimits.tempAlarmHighLimit);
 80a09f2:	f002 f9e7 	bl	80a2dc4 <_Z21__fetch_global_EEPROMv>
 80a09f6:	1d21      	adds	r1, r4, #4
 80a09f8:	2202      	movs	r2, #2
 80a09fa:	201e      	movs	r0, #30
 80a09fc:	f000 fbe6 	bl	80a11cc <HAL_EEPROM_Put>
    String testStruct = String(AlarmLimits.version);
 80a0a00:	220a      	movs	r2, #10
 80a0a02:	7821      	ldrb	r1, [r4, #0]
 80a0a04:	a802      	add	r0, sp, #8
 80a0a06:	f001 f812 	bl	80a1a2e <_ZN6StringC1Ehh>
 80a0a0a:	4923      	ldr	r1, [pc, #140]	; (80a0a98 <_Z14setAlarmLimits6String+0x128>)
 80a0a0c:	a802      	add	r0, sp, #8
 80a0a0e:	f001 f865 	bl	80a1adc <_ZN6String6concatEPKc>
	String & operator += (int num)			{concat(num); return (*this);}
 80a0a12:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80a0a16:	a802      	add	r0, sp, #8
 80a0a18:	f001 f86f 	bl	80a1afa <_ZN6String6concatEi>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80a0a1c:	491e      	ldr	r1, [pc, #120]	; (80a0a98 <_Z14setAlarmLimits6String+0x128>)
 80a0a1e:	a802      	add	r0, sp, #8
 80a0a20:	f001 f85c 	bl	80a1adc <_ZN6String6concatEPKc>
	String & operator += (int num)			{concat(num); return (*this);}
 80a0a24:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80a0a28:	a802      	add	r0, sp, #8
 80a0a2a:	f001 f866 	bl	80a1afa <_ZN6String6concatEi>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a0a2e:	4b1b      	ldr	r3, [pc, #108]	; (80a0a9c <_Z14setAlarmLimits6String+0x12c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0a30:	9a02      	ldr	r2, [sp, #8]
 80a0a32:	781b      	ldrb	r3, [r3, #0]
 80a0a34:	491a      	ldr	r1, [pc, #104]	; (80a0aa0 <_Z14setAlarmLimits6String+0x130>)
 80a0a36:	f88d 3000 	strb.w	r3, [sp]
 80a0a3a:	a806      	add	r0, sp, #24
 80a0a3c:	233c      	movs	r3, #60	; 0x3c
 80a0a3e:	f001 fc73 	bl	80a2328 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0a42:	a807      	add	r0, sp, #28
 80a0a44:	f7ff fb61 	bl	80a010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    lowTempAlarmLimit = String(AlarmLimits.tempAlarmLowLimit);
 80a0a48:	220a      	movs	r2, #10
 80a0a4a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80a0a4e:	a806      	add	r0, sp, #24
 80a0a50:	f000 ffff 	bl	80a1a52 <_ZN6StringC1Eih>
 80a0a54:	a906      	add	r1, sp, #24
 80a0a56:	480d      	ldr	r0, [pc, #52]	; (80a0a8c <_Z14setAlarmLimits6String+0x11c>)
 80a0a58:	f000 ffd0 	bl	80a19fc <_ZN6StringaSEOS_>
 80a0a5c:	a806      	add	r0, sp, #24
 80a0a5e:	f000 ff39 	bl	80a18d4 <_ZN6StringD1Ev>
    highTempAlarmLimit = String(AlarmLimits.tempAlarmHighLimit); 
 80a0a62:	220a      	movs	r2, #10
 80a0a64:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80a0a68:	a806      	add	r0, sp, #24
 80a0a6a:	f000 fff2 	bl	80a1a52 <_ZN6StringC1Eih>
 80a0a6e:	a906      	add	r1, sp, #24
 80a0a70:	4807      	ldr	r0, [pc, #28]	; (80a0a90 <_Z14setAlarmLimits6String+0x120>)
 80a0a72:	f000 ffc3 	bl	80a19fc <_ZN6StringaSEOS_>
 80a0a76:	a806      	add	r0, sp, #24
 80a0a78:	f000 ff2c 	bl	80a18d4 <_ZN6StringD1Ev>
    String testStruct = String(AlarmLimits.version);
 80a0a7c:	a802      	add	r0, sp, #8
 80a0a7e:	f000 ff29 	bl	80a18d4 <_ZN6StringD1Ev>
}   // end of setAlarmLimits()
 80a0a82:	4628      	mov	r0, r5
 80a0a84:	b00a      	add	sp, #40	; 0x28
 80a0a86:	bd70      	pop	{r4, r5, r6, pc}
            highTempAlarmLimit = alarmLimits.substring(i+1);
 80a0a88:	4635      	mov	r5, r6
 80a0a8a:	e775      	b.n	80a0978 <_Z14setAlarmLimits6String+0x8>
 80a0a8c:	20000348 	.word	0x20000348
 80a0a90:	20000314 	.word	0x20000314
 80a0a94:	20000252 	.word	0x20000252
 80a0a98:	080a74b0 	.word	0x080a74b0
 80a0a9c:	200002c0 	.word	0x200002c0
 80a0aa0:	080a74b2 	.word	0x080a74b2

080a0aa4 <setup>:
void setup() {
 80a0aa4:	b570      	push	{r4, r5, r6, lr}
    pinMode(LED_PIN, OUTPUT);
 80a0aa6:	2101      	movs	r1, #1
void setup() {
 80a0aa8:	b088      	sub	sp, #32
    pinMode(LED_PIN, OUTPUT);
 80a0aaa:	2007      	movs	r0, #7
 80a0aac:	f002 f8f6 	bl	80a2c9c <pinMode>
    pinMode(ALARM_PIN, OUTPUT);
 80a0ab0:	2101      	movs	r1, #1
 80a0ab2:	2006      	movs	r0, #6
 80a0ab4:	f002 f8f2 	bl	80a2c9c <pinMode>
    pinMode(INDICATOR_PIN, OUTPUT);
 80a0ab8:	2101      	movs	r1, #1
 80a0aba:	2005      	movs	r0, #5
 80a0abc:	f002 f8ee 	bl	80a2c9c <pinMode>
    pinMode(BUTTON_PIN, INPUT_PULLUP);
 80a0ac0:	2102      	movs	r1, #2
 80a0ac2:	2004      	movs	r0, #4
 80a0ac4:	f002 f8ea 	bl	80a2c9c <pinMode>
    pinMode(TOGGLE_PIN, INPUT_PULLUP);  // toggle switch uses an internal pullup
 80a0ac8:	2102      	movs	r1, #2
 80a0aca:	2001      	movs	r0, #1
 80a0acc:	f002 f8e6 	bl	80a2c9c <pinMode>
    myservo.attach(SERVO_PIN);  // attaches to the servo object
 80a0ad0:	2400      	movs	r4, #0
 80a0ad2:	23b4      	movs	r3, #180	; 0xb4
 80a0ad4:	f44f 7208 	mov.w	r2, #544	; 0x220
 80a0ad8:	210f      	movs	r1, #15
 80a0ada:	e9cd 4300 	strd	r4, r3, [sp]
 80a0ade:	4836      	ldr	r0, [pc, #216]	; (80a0bb8 <setup+0x114>)
 80a0ae0:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80a0ae4:	f000 fe0c 	bl	80a1700 <_ZN5Servo6attachEtttss>
        return _variable(name, std::forward<ArgsT>(args)...);
 80a0ae8:	4d34      	ldr	r5, [pc, #208]	; (80a0bbc <setup+0x118>)
    DHT.begin();
 80a0aea:	4835      	ldr	r0, [pc, #212]	; (80a0bc0 <setup+0x11c>)
 80a0aec:	f000 f9ac 	bl	80a0e48 <_ZN14PietteTech_DHT5beginEv>
    alarmer.begin();
 80a0af0:	4834      	ldr	r0, [pc, #208]	; (80a0bc4 <setup+0x120>)
 80a0af2:	f7ff faf7 	bl	80a00e4 <_ZN17WLDAlarmProcessor5beginEv>
 80a0af6:	4629      	mov	r1, r5
 80a0af8:	4833      	ldr	r0, [pc, #204]	; (80a0bc8 <setup+0x124>)
 80a0afa:	f7ff fbe9 	bl	80a02d0 <_ZN10CloudClass9_variableEPKcRK6String.isra.0>
 80a0afe:	4933      	ldr	r1, [pc, #204]	; (80a0bcc <setup+0x128>)
 80a0b00:	4833      	ldr	r0, [pc, #204]	; (80a0bd0 <setup+0x12c>)
 80a0b02:	f7ff fbe5 	bl	80a02d0 <_ZN10CloudClass9_variableEPKcRK6String.isra.0>
 80a0b06:	4933      	ldr	r1, [pc, #204]	; (80a0bd4 <setup+0x130>)
 80a0b08:	4833      	ldr	r0, [pc, #204]	; (80a0bd8 <setup+0x134>)
 80a0b0a:	f7ff fbe1 	bl	80a02d0 <_ZN10CloudClass9_variableEPKcRK6String.isra.0>
 80a0b0e:	4933      	ldr	r1, [pc, #204]	; (80a0bdc <setup+0x138>)
 80a0b10:	4833      	ldr	r0, [pc, #204]	; (80a0be0 <setup+0x13c>)
 80a0b12:	f7ff fbdd 	bl	80a02d0 <_ZN10CloudClass9_variableEPKcRK6String.isra.0>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a0b16:	4e33      	ldr	r6, [pc, #204]	; (80a0be4 <setup+0x140>)
        return _variable(name, std::forward<ArgsT>(args)...);
 80a0b18:	4933      	ldr	r1, [pc, #204]	; (80a0be8 <setup+0x144>)
 80a0b1a:	4834      	ldr	r0, [pc, #208]	; (80a0bec <setup+0x148>)
 80a0b1c:	f7ff fbd8 	bl	80a02d0 <_ZN10CloudClass9_variableEPKcRK6String.isra.0>
 80a0b20:	4933      	ldr	r1, [pc, #204]	; (80a0bf0 <setup+0x14c>)
 80a0b22:	4834      	ldr	r0, [pc, #208]	; (80a0bf4 <setup+0x150>)
 80a0b24:	f7ff fbd4 	bl	80a02d0 <_ZN10CloudClass9_variableEPKcRK6String.isra.0>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a0b28:	4630      	mov	r0, r6
 80a0b2a:	4a33      	ldr	r2, [pc, #204]	; (80a0bf8 <setup+0x154>)
 80a0b2c:	4933      	ldr	r1, [pc, #204]	; (80a0bfc <setup+0x158>)
 80a0b2e:	f001 fb04 	bl	80a213a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a0b32:	4a33      	ldr	r2, [pc, #204]	; (80a0c00 <setup+0x15c>)
 80a0b34:	4630      	mov	r0, r6
 80a0b36:	4933      	ldr	r1, [pc, #204]	; (80a0c04 <setup+0x160>)
 80a0b38:	f001 faff 	bl	80a213a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    info = "Firmware Verison 2.0. Last reset at: ";
 80a0b3c:	4932      	ldr	r1, [pc, #200]	; (80a0c08 <setup+0x164>)
 80a0b3e:	4628      	mov	r0, r5
 80a0b40:	f000 ff64 	bl	80a1a0c <_ZN6StringaSEPKc>
    info += dateTimeString();
 80a0b44:	a804      	add	r0, sp, #16
 80a0b46:	f7ff fbd5 	bl	80a02f4 <_Z14dateTimeStringv>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80a0b4a:	a904      	add	r1, sp, #16
 80a0b4c:	4628      	mov	r0, r5
 80a0b4e:	f000 ffc1 	bl	80a1ad4 <_ZN6String6concatERKS_>
 80a0b52:	a804      	add	r0, sp, #16
 80a0b54:	f000 febe 	bl	80a18d4 <_ZN6StringD1Ev>
    Alarms.lowTempAlarm = false;
 80a0b58:	4b2c      	ldr	r3, [pc, #176]	; (80a0c0c <setup+0x168>)
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80a0b5a:	4d2d      	ldr	r5, [pc, #180]	; (80a0c10 <setup+0x16c>)
 80a0b5c:	701c      	strb	r4, [r3, #0]
    Alarms.highTempAlarm = false;
 80a0b5e:	705c      	strb	r4, [r3, #1]
    Alarms.waterLeakAlarm = false;
 80a0b60:	709c      	strb	r4, [r3, #2]
    String testStruct = String(AlarmLimits.version);
 80a0b62:	4c2c      	ldr	r4, [pc, #176]	; (80a0c14 <setup+0x170>)
 80a0b64:	220a      	movs	r2, #10
 80a0b66:	7821      	ldrb	r1, [r4, #0]
 80a0b68:	a804      	add	r0, sp, #16
 80a0b6a:	f000 ff60 	bl	80a1a2e <_ZN6StringC1Ehh>
 80a0b6e:	4629      	mov	r1, r5
 80a0b70:	a804      	add	r0, sp, #16
 80a0b72:	f000 ffb3 	bl	80a1adc <_ZN6String6concatEPKc>
	String & operator += (int num)			{concat(num); return (*this);}
 80a0b76:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80a0b7a:	a804      	add	r0, sp, #16
 80a0b7c:	f000 ffbd 	bl	80a1afa <_ZN6String6concatEi>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80a0b80:	4629      	mov	r1, r5
 80a0b82:	a804      	add	r0, sp, #16
 80a0b84:	f000 ffaa 	bl	80a1adc <_ZN6String6concatEPKc>
	String & operator += (int num)			{concat(num); return (*this);}
 80a0b88:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80a0b8c:	a804      	add	r0, sp, #16
 80a0b8e:	f000 ffb4 	bl	80a1afa <_ZN6String6concatEi>
 80a0b92:	4b21      	ldr	r3, [pc, #132]	; (80a0c18 <setup+0x174>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0b94:	9a04      	ldr	r2, [sp, #16]
 80a0b96:	781b      	ldrb	r3, [r3, #0]
 80a0b98:	4920      	ldr	r1, [pc, #128]	; (80a0c1c <setup+0x178>)
 80a0b9a:	f88d 3000 	strb.w	r3, [sp]
 80a0b9e:	a802      	add	r0, sp, #8
 80a0ba0:	233c      	movs	r3, #60	; 0x3c
 80a0ba2:	f001 fbc1 	bl	80a2328 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0ba6:	a803      	add	r0, sp, #12
 80a0ba8:	f7ff faaf 	bl	80a010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0bac:	a804      	add	r0, sp, #16
 80a0bae:	f000 fe91 	bl	80a18d4 <_ZN6StringD1Ev>
}  // end of setup()
 80a0bb2:	b008      	add	sp, #32
 80a0bb4:	bd70      	pop	{r4, r5, r6, pc}
 80a0bb6:	bf00      	nop
 80a0bb8:	20000360 	.word	0x20000360
 80a0bbc:	20000334 	.word	0x20000334
 80a0bc0:	2000025c 	.word	0x2000025c
 80a0bc4:	200002e8 	.word	0x200002e8
 80a0bc8:	080a74c2 	.word	0x080a74c2
 80a0bcc:	20000370 	.word	0x20000370
 80a0bd0:	080a74c7 	.word	0x080a74c7
 80a0bd4:	20000324 	.word	0x20000324
 80a0bd8:	080a74d3 	.word	0x080a74d3
 80a0bdc:	20000300 	.word	0x20000300
 80a0be0:	080a74dc 	.word	0x080a74dc
 80a0be4:	080a210f 	.word	0x080a210f
 80a0be8:	20000348 	.word	0x20000348
 80a0bec:	080a74e3 	.word	0x080a74e3
 80a0bf0:	20000314 	.word	0x20000314
 80a0bf4:	080a74f8 	.word	0x080a74f8
 80a0bf8:	080a750e 	.word	0x080a750e
 80a0bfc:	080a0971 	.word	0x080a0971
 80a0c00:	080a7524 	.word	0x080a7524
 80a0c04:	080a02c1 	.word	0x080a02c1
 80a0c08:	080a7536 	.word	0x080a7536
 80a0c0c:	20000258 	.word	0x20000258
 80a0c10:	080a74b0 	.word	0x080a74b0
 80a0c14:	20000252 	.word	0x20000252
 80a0c18:	200002c0 	.word	0x200002c0
 80a0c1c:	080a74b2 	.word	0x080a74b2

080a0c20 <_GLOBAL__sub_I_dhtResultCode>:
        val_(val) {
 80a0c20:	2300      	movs	r3, #0
 80a0c22:	4a14      	ldr	r2, [pc, #80]	; (80a0c74 <_GLOBAL__sub_I_dhtResultCode+0x54>)
}  // end of meterHumidity()
 80a0c24:	b510      	push	{r4, lr}
PietteTech_DHT DHT(DHTPIN, DHTTYPE);    // create DHT object to read temp and humidity
 80a0c26:	2102      	movs	r1, #2
 80a0c28:	7013      	strb	r3, [r2, #0]
 80a0c2a:	4813      	ldr	r0, [pc, #76]	; (80a0c78 <_GLOBAL__sub_I_dhtResultCode+0x58>)
 80a0c2c:	220b      	movs	r2, #11
 80a0c2e:	f000 f908 	bl	80a0e42 <_ZN14PietteTech_DHTC1EhhPFvvE>
String info = "";   // this string will hold the firmware version number and the last reset time.
 80a0c32:	4c12      	ldr	r4, [pc, #72]	; (80a0c7c <_GLOBAL__sub_I_dhtResultCode+0x5c>)
Servo myservo;  // create servo object to control a servo
 80a0c34:	4812      	ldr	r0, [pc, #72]	; (80a0c80 <_GLOBAL__sub_I_dhtResultCode+0x60>)
 80a0c36:	f000 fd4f 	bl	80a16d8 <_ZN5ServoC1Ev>
WLDAlarmProcessor alarmer;  // create alarmer object to manage alarms
 80a0c3a:	4812      	ldr	r0, [pc, #72]	; (80a0c84 <_GLOBAL__sub_I_dhtResultCode+0x64>)
 80a0c3c:	f7ff fa4a 	bl	80a00d4 <_ZN17WLDAlarmProcessorC1Ev>
String info = "";   // this string will hold the firmware version number and the last reset time.
 80a0c40:	4621      	mov	r1, r4
 80a0c42:	4811      	ldr	r0, [pc, #68]	; (80a0c88 <_GLOBAL__sub_I_dhtResultCode+0x68>)
 80a0c44:	f000 fe90 	bl	80a1968 <_ZN6StringC1EPK19__FlashStringHelper>
String temperature = "";   // this string will hold the currently averaged temperature
 80a0c48:	4621      	mov	r1, r4
 80a0c4a:	4810      	ldr	r0, [pc, #64]	; (80a0c8c <_GLOBAL__sub_I_dhtResultCode+0x6c>)
 80a0c4c:	f000 fe8c 	bl	80a1968 <_ZN6StringC1EPK19__FlashStringHelper>
String humidity = "";   // this string will hold the currently averaged humidity
 80a0c50:	4621      	mov	r1, r4
 80a0c52:	480f      	ldr	r0, [pc, #60]	; (80a0c90 <_GLOBAL__sub_I_dhtResultCode+0x70>)
 80a0c54:	f000 fe88 	bl	80a1968 <_ZN6StringC1EPK19__FlashStringHelper>
String currentAlarms = "0,0,0"; // this string holds the high temp alarm, low temp alarm, leak alarm
 80a0c58:	490e      	ldr	r1, [pc, #56]	; (80a0c94 <_GLOBAL__sub_I_dhtResultCode+0x74>)
 80a0c5a:	480f      	ldr	r0, [pc, #60]	; (80a0c98 <_GLOBAL__sub_I_dhtResultCode+0x78>)
 80a0c5c:	f000 fe84 	bl	80a1968 <_ZN6StringC1EPK19__FlashStringHelper>
String lowTempAlarmLimit = "";    // this string holds the low temp alarm limit
 80a0c60:	4621      	mov	r1, r4
 80a0c62:	480e      	ldr	r0, [pc, #56]	; (80a0c9c <_GLOBAL__sub_I_dhtResultCode+0x7c>)
 80a0c64:	f000 fe80 	bl	80a1968 <_ZN6StringC1EPK19__FlashStringHelper>
String highTempAlarmLimit = "";   // this string holds the high temp alarm limit
 80a0c68:	4621      	mov	r1, r4
}  // end of meterHumidity()
 80a0c6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
String highTempAlarmLimit = "";   // this string holds the high temp alarm limit
 80a0c6e:	480c      	ldr	r0, [pc, #48]	; (80a0ca0 <_GLOBAL__sub_I_dhtResultCode+0x80>)
 80a0c70:	f000 be7a 	b.w	80a1968 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0c74:	200002c0 	.word	0x200002c0
 80a0c78:	2000025c 	.word	0x2000025c
 80a0c7c:	080a76e0 	.word	0x080a76e0
 80a0c80:	20000360 	.word	0x20000360
 80a0c84:	200002e8 	.word	0x200002e8
 80a0c88:	20000334 	.word	0x20000334
 80a0c8c:	20000370 	.word	0x20000370
 80a0c90:	20000324 	.word	0x20000324
 80a0c94:	080a755c 	.word	0x080a755c
 80a0c98:	20000300 	.word	0x20000300
 80a0c9c:	20000348 	.word	0x20000348
 80a0ca0:	20000314 	.word	0x20000314

080a0ca4 <_ZN14PietteTech_DHT12_isrCallbackEv>:
// NOTE:  isrCallback is only here for backwards compatibility with v0.3 and earlier
//        it is no longer used or needed
// 
void PietteTech_DHT::isrCallback() { }

void PietteTech_DHT::_isrCallback() {
 80a0ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // so we'll set _detachISR inside the ISR when we're done
  // and count on code on the main thread to detach it via detachISRIfRequested().
  // Getting another interrupt after we've already requested a detach is benign
  // so we'll just ignore this interrupt and return.

  if (_detachISR) return;
 80a0ca6:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
void PietteTech_DHT::_isrCallback() {
 80a0caa:	4604      	mov	r4, r0
  if (_detachISR) return;
 80a0cac:	b98b      	cbnz	r3, 80a0cd2 <_ZN14PietteTech_DHT12_isrCallbackEv+0x2e>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0cae:	f000 fa75 	bl	80a119c <HAL_Timer_Get_Micro_Seconds>

  unsigned long newUs = micros();
  unsigned long delta = (newUs - _us);
  _us = newUs;

  if (delta > 6000) {
 80a0cb2:	f241 7170 	movw	r1, #6000	; 0x1770
  unsigned long delta = (newUs - _us);
 80a0cb6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  _us = newUs;
 80a0cb8:	63a0      	str	r0, [r4, #56]	; 0x38
  unsigned long delta = (newUs - _us);
 80a0cba:	1a83      	subs	r3, r0, r2
  if (delta > 6000) {
 80a0cbc:	428b      	cmp	r3, r1
 80a0cbe:	d909      	bls.n	80a0cd4 <_ZN14PietteTech_DHT12_isrCallbackEv+0x30>
    _status = DHTLIB_ERROR_ISR_TIMEOUT;
 80a0cc0:	f06f 0301 	mvn.w	r3, #1
 80a0cc4:	62e3      	str	r3, [r4, #44]	; 0x2c
    _state = STOPPED;
 80a0cc6:	2303      	movs	r3, #3
 80a0cc8:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
#if (SYSTEM_VERSION < SYSTEM_VERSION_v121RC3)
    detachInterrupt(_sigPin);
#else
    _detachISR = true;
 80a0ccc:	2301      	movs	r3, #1
 80a0cce:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    }
    break;
  default:
    break;
  }
}
 80a0cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (_state) {
 80a0cd4:	f894 502a 	ldrb.w	r5, [r4, #42]	; 0x2a
 80a0cd8:	f005 01ff 	and.w	r1, r5, #255	; 0xff
 80a0cdc:	2d00      	cmp	r5, #0
 80a0cde:	d048      	beq.n	80a0d72 <_ZN14PietteTech_DHT12_isrCallbackEv+0xce>
 80a0ce0:	2901      	cmp	r1, #1
 80a0ce2:	d1f6      	bne.n	80a0cd2 <_ZN14PietteTech_DHT12_isrCallbackEv+0x2e>
    if (60 < delta && delta < 155) { //valid in timing
 80a0ce4:	f1a3 023d 	sub.w	r2, r3, #61	; 0x3d
 80a0ce8:	2a5d      	cmp	r2, #93	; 0x5d
 80a0cea:	d870      	bhi.n	80a0dce <_ZN14PietteTech_DHT12_isrCallbackEv+0x12a>
      _bits[_idx] <<= 1; // shift the data
 80a0cec:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
      if (delta > 110) //is a one
 80a0cf0:	2b6e      	cmp	r3, #110	; 0x6e
      _bits[_idx] <<= 1; // shift the data
 80a0cf2:	4421      	add	r1, r4
 80a0cf4:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
 80a0cf8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a0cfc:	b2d2      	uxtb	r2, r2
 80a0cfe:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
      if (delta > 110) //is a one
 80a0d02:	d908      	bls.n	80a0d16 <_ZN14PietteTech_DHT12_isrCallbackEv+0x72>
        _bits[_idx] |= 1;
 80a0d04:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 80a0d08:	4422      	add	r2, r4
 80a0d0a:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
 80a0d0e:	f041 0101 	orr.w	r1, r1, #1
 80a0d12:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
      *_e++ = delta;  // record the edge -> edge time
 80a0d16:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a0d18:	b2db      	uxtb	r3, r3
 80a0d1a:	1c51      	adds	r1, r2, #1
 80a0d1c:	6421      	str	r1, [r4, #64]	; 0x40
 80a0d1e:	7013      	strb	r3, [r2, #0]
      if (_cnt == 0) { // we have completed the byte, go to next
 80a0d20:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80a0d24:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80a0d28:	2b00      	cmp	r3, #0
 80a0d2a:	d149      	bne.n	80a0dc0 <_ZN14PietteTech_DHT12_isrCallbackEv+0x11c>
        _cnt = 7; // restart at MSB
 80a0d2c:	2307      	movs	r3, #7
 80a0d2e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if (++_idx == 5) { // go to next byte, if we have got 5 bytes stop.
 80a0d32:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80a0d36:	3301      	adds	r3, #1
 80a0d38:	b2db      	uxtb	r3, r3
 80a0d3a:	2b05      	cmp	r3, #5
 80a0d3c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 80a0d40:	d1c7      	bne.n	80a0cd2 <_ZN14PietteTech_DHT12_isrCallbackEv+0x2e>
          _detachISR = true;
 80a0d42:	2001      	movs	r0, #1
 80a0d44:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
          uint8_t sum = _bits[0] + _bits[1] + _bits[2] + _bits[3];
 80a0d48:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 80a0d4c:	f894 7031 	ldrb.w	r7, [r4, #49]	; 0x31
 80a0d50:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 80a0d54:	4439      	add	r1, r7
 80a0d56:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 80a0d5a:	440a      	add	r2, r1
          if (_bits[4] != sum) {
 80a0d5c:	f894 6034 	ldrb.w	r6, [r4, #52]	; 0x34
          uint8_t sum = _bits[0] + _bits[1] + _bits[2] + _bits[3];
 80a0d60:	4413      	add	r3, r2
          if (_bits[4] != sum) {
 80a0d62:	b2db      	uxtb	r3, r3
 80a0d64:	42b3      	cmp	r3, r6
 80a0d66:	d024      	beq.n	80a0db2 <_ZN14PietteTech_DHT12_isrCallbackEv+0x10e>
            _status = DHTLIB_ERROR_CHECKSUM;
 80a0d68:	f04f 33ff 	mov.w	r3, #4294967295
 80a0d6c:	62e3      	str	r3, [r4, #44]	; 0x2c
            _state = STOPPED;
 80a0d6e:	2303      	movs	r3, #3
 80a0d70:	e011      	b.n	80a0d96 <_ZN14PietteTech_DHT12_isrCallbackEv+0xf2>
    if (delta < 65) {       // Spec: 20-200us to first falling edge of response
 80a0d72:	2b40      	cmp	r3, #64	; 0x40
 80a0d74:	d804      	bhi.n	80a0d80 <_ZN14PietteTech_DHT12_isrCallbackEv+0xdc>
      _us -= delta;
 80a0d76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a0d78:	441a      	add	r2, r3
 80a0d7a:	1a12      	subs	r2, r2, r0
 80a0d7c:	63a2      	str	r2, [r4, #56]	; 0x38
      break; //do nothing, it started the response signal
 80a0d7e:	e7a8      	b.n	80a0cd2 <_ZN14PietteTech_DHT12_isrCallbackEv+0x2e>
      *_e++ = delta;  // record the edge -> edge time
 80a0d80:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a0d82:	b2d9      	uxtb	r1, r3
    } if (125 < delta && delta < 220) {   // account for timing offset with Particle Mesh devices
 80a0d84:	3b7e      	subs	r3, #126	; 0x7e
 80a0d86:	2b5d      	cmp	r3, #93	; 0x5d
      *_e++ = delta;  // record the edge -> edge time
 80a0d88:	f102 0001 	add.w	r0, r2, #1
 80a0d8c:	f04f 0301 	mov.w	r3, #1
    } if (125 < delta && delta < 220) {   // account for timing offset with Particle Mesh devices
 80a0d90:	d804      	bhi.n	80a0d9c <_ZN14PietteTech_DHT12_isrCallbackEv+0xf8>
      *_e++ = delta;  // record the edge -> edge time
 80a0d92:	6420      	str	r0, [r4, #64]	; 0x40
 80a0d94:	7011      	strb	r1, [r2, #0]
      _state = STOPPED;
 80a0d96:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 80a0d9a:	e79a      	b.n	80a0cd2 <_ZN14PietteTech_DHT12_isrCallbackEv+0x2e>
      _detachISR = true;
 80a0d9c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
      _status = DHTLIB_ERROR_RESPONSE_TIMEOUT;
 80a0da0:	f06f 0302 	mvn.w	r3, #2
 80a0da4:	62e3      	str	r3, [r4, #44]	; 0x2c
      _state = STOPPED;
 80a0da6:	2303      	movs	r3, #3
      *_e++ = delta;  // record the edge -> edge time
 80a0da8:	6420      	str	r0, [r4, #64]	; 0x40
      _state = STOPPED;
 80a0daa:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
      *_e++ = delta;  // record the edge -> edge time
 80a0dae:	7011      	strb	r1, [r2, #0]
 80a0db0:	e78f      	b.n	80a0cd2 <_ZN14PietteTech_DHT12_isrCallbackEv+0x2e>
            _state = ACQUIRED;
 80a0db2:	2302      	movs	r3, #2
            _status = DHTLIB_OK;
 80a0db4:	62e5      	str	r5, [r4, #44]	; 0x2c
            _state = ACQUIRED;
 80a0db6:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            _convert = true;
 80a0dba:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 80a0dbe:	e788      	b.n	80a0cd2 <_ZN14PietteTech_DHT12_isrCallbackEv+0x2e>
      else _cnt--;
 80a0dc0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80a0dc4:	3b01      	subs	r3, #1
 80a0dc6:	b2db      	uxtb	r3, r3
 80a0dc8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 80a0dcc:	e781      	b.n	80a0cd2 <_ZN14PietteTech_DHT12_isrCallbackEv+0x2e>
    else if (delta < 10) {
 80a0dce:	2b09      	cmp	r3, #9
      _status = DHTLIB_ERROR_DELTA;
 80a0dd0:	bf94      	ite	ls
 80a0dd2:	f06f 0205 	mvnls.w	r2, #5
      _status = DHTLIB_ERROR_DATA_TIMEOUT;
 80a0dd6:	f06f 0203 	mvnhi.w	r2, #3
      _detachISR = true;
 80a0dda:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
 80a0dde:	2303      	movs	r3, #3
      _status = DHTLIB_ERROR_DATA_TIMEOUT;
 80a0de0:	62e2      	str	r2, [r4, #44]	; 0x2c
 80a0de2:	e7d8      	b.n	80a0d96 <_ZN14PietteTech_DHT12_isrCallbackEv+0xf2>

080a0de4 <_ZNSt17_Function_handlerIFvvESt5_BindIFM14PietteTech_DHTFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0de4:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
 80a0de6:	6803      	ldr	r3, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 80a0de8:	685a      	ldr	r2, [r3, #4]
 80a0dea:	6899      	ldr	r1, [r3, #8]
 80a0dec:	1054      	asrs	r4, r2, #1
 80a0dee:	eb01 0062 	add.w	r0, r1, r2, asr #1
 80a0df2:	07d2      	lsls	r2, r2, #31
 80a0df4:	bf48      	it	mi
 80a0df6:	590a      	ldrmi	r2, [r1, r4]
 80a0df8:	681b      	ldr	r3, [r3, #0]
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
 80a0dfa:	bc10      	pop	{r4}
 80a0dfc:	bf48      	it	mi
 80a0dfe:	58d3      	ldrmi	r3, [r2, r3]
 80a0e00:	4718      	bx	r3

080a0e02 <_ZNSt17_Function_handlerIFvvESt5_BindIFM14PietteTech_DHTFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	switch (__op)
 80a0e02:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0e04:	b538      	push	{r3, r4, r5, lr}
 80a0e06:	4604      	mov	r4, r0
	switch (__op)
 80a0e08:	d102      	bne.n	80a0e10 <_ZNSt17_Function_handlerIFvvESt5_BindIFM14PietteTech_DHTFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
 80a0e0a:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
 80a0e0c:	6023      	str	r3, [r4, #0]
	}
 80a0e0e:	e003      	b.n	80a0e18 <_ZNSt17_Function_handlerIFvvESt5_BindIFM14PietteTech_DHTFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	  switch (__op)
 80a0e10:	2a02      	cmp	r2, #2
 80a0e12:	d003      	beq.n	80a0e1c <_ZNSt17_Function_handlerIFvvESt5_BindIFM14PietteTech_DHTFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
 80a0e14:	2a03      	cmp	r2, #3
 80a0e16:	d00d      	beq.n	80a0e34 <_ZNSt17_Function_handlerIFvvESt5_BindIFM14PietteTech_DHTFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
      }
 80a0e18:	2000      	movs	r0, #0
 80a0e1a:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a0e1c:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
 80a0e1e:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a0e20:	f7ff f93b 	bl	80a009a <_Znwj>
 80a0e24:	4603      	mov	r3, r0
 80a0e26:	2800      	cmp	r0, #0
 80a0e28:	d0f0      	beq.n	80a0e0c <_ZNSt17_Function_handlerIFvvESt5_BindIFM14PietteTech_DHTFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
 80a0e2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80a0e2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80a0e32:	e7eb      	b.n	80a0e0c <_ZNSt17_Function_handlerIFvvESt5_BindIFM14PietteTech_DHTFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
 80a0e34:	6800      	ldr	r0, [r0, #0]
 80a0e36:	2800      	cmp	r0, #0
 80a0e38:	d0ee      	beq.n	80a0e18 <_ZNSt17_Function_handlerIFvvESt5_BindIFM14PietteTech_DHTFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
 80a0e3a:	210c      	movs	r1, #12
 80a0e3c:	f7ff f931 	bl	80a00a2 <_ZdlPvj>
 80a0e40:	e7ea      	b.n	80a0e18 <_ZNSt17_Function_handlerIFvvESt5_BindIFM14PietteTech_DHTFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>

080a0e42 <_ZN14PietteTech_DHTC1EhhPFvvE>:
  _type = dht_type;
 80a0e42:	e9c0 1211 	strd	r1, r2, [r0, #68]	; 0x44
}
 80a0e46:	4770      	bx	lr

080a0e48 <_ZN14PietteTech_DHT5beginEv>:
  _state = STOPPED;
 80a0e48:	2203      	movs	r2, #3
void PietteTech_DHT::begin() {
 80a0e4a:	b538      	push	{r3, r4, r5, lr}
  _lastreadtime = 0;
 80a0e4c:	2300      	movs	r3, #0
  _state = STOPPED;
 80a0e4e:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
  _firstreading = true;
 80a0e52:	2501      	movs	r5, #1
  _status = DHTLIB_ERROR_NOTSTARTED;
 80a0e54:	f06f 0206 	mvn.w	r2, #6
void PietteTech_DHT::begin() {
 80a0e58:	4604      	mov	r4, r0
  _lastreadtime = 0;
 80a0e5a:	64c3      	str	r3, [r0, #76]	; 0x4c
  _status = DHTLIB_ERROR_NOTSTARTED;
 80a0e5c:	62c2      	str	r2, [r0, #44]	; 0x2c
  pinMode(_sigPin, OUTPUT);
 80a0e5e:	4629      	mov	r1, r5
  _detachISR = false;
 80a0e60:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
  _firstreading = true;
 80a0e64:	f880 5050 	strb.w	r5, [r0, #80]	; 0x50
  pinMode(_sigPin, OUTPUT);
 80a0e68:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
 80a0e6c:	f001 ff16 	bl	80a2c9c <pinMode>
  digitalWrite(_sigPin, HIGH);
 80a0e70:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 80a0e74:	4629      	mov	r1, r5
 80a0e76:	f001 ff22 	bl	80a2cbe <digitalWrite>
}
 80a0e7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  delay(1000); // allow for sensor to settle after startup
 80a0e7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0e82:	f001 b82b 	b.w	80a1edc <delay>
	...

080a0e88 <_ZN14PietteTech_DHT7acquireEv>:
int PietteTech_DHT::acquire() {
 80a0e88:	b570      	push	{r4, r5, r6, lr}
 80a0e8a:	4604      	mov	r4, r0
 80a0e8c:	b086      	sub	sp, #24
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0e8e:	f000 f98d 	bl	80a11ac <HAL_Timer_Get_Milli_Seconds>
  if (!_firstreading && ((currenttime - _lastreadtime) < 2000)) {
 80a0e92:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80a0e96:	b923      	cbnz	r3, 80a0ea2 <_ZN14PietteTech_DHT7acquireEv+0x1a>
 80a0e98:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80a0e9a:	1ac3      	subs	r3, r0, r3
 80a0e9c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80a0ea0:	d367      	bcc.n	80a0f72 <_ZN14PietteTech_DHT7acquireEv+0xea>
  if (_state == STOPPED || _state == ACQUIRED) {
 80a0ea2:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80a0ea6:	2b03      	cmp	r3, #3
 80a0ea8:	d003      	beq.n	80a0eb2 <_ZN14PietteTech_DHT7acquireEv+0x2a>
 80a0eaa:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80a0eae:	2b02      	cmp	r3, #2
 80a0eb0:	d161      	bne.n	80a0f76 <_ZN14PietteTech_DHT7acquireEv+0xee>
    _firstreading = false;
 80a0eb2:	2300      	movs	r3, #0
    for (int i = 0; i < 41; i++) _edges[i] = 0;
 80a0eb4:	461a      	mov	r2, r3
    _firstreading = false;
 80a0eb6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    _lastreadtime = currenttime;
 80a0eba:	64e0      	str	r0, [r4, #76]	; 0x4c
    _state = RESPONSE;
 80a0ebc:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    for (int i = 0; i < 41; i++) _edges[i] = 0;
 80a0ec0:	54e2      	strb	r2, [r4, r3]
 80a0ec2:	3301      	adds	r3, #1
 80a0ec4:	2b29      	cmp	r3, #41	; 0x29
 80a0ec6:	d1fb      	bne.n	80a0ec0 <_ZN14PietteTech_DHT7acquireEv+0x38>
    _cnt = 7;
 80a0ec8:	2307      	movs	r3, #7
    for (int i = 0; i < 5; i++) _bits[i] = 0;
 80a0eca:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 80a0ece:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
 80a0ed2:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
 80a0ed6:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
 80a0eda:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    _cnt = 7;
 80a0ede:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    _hum = 0;
 80a0ee2:	2300      	movs	r3, #0
    pinMode(_sigPin, OUTPUT);
 80a0ee4:	2101      	movs	r1, #1
    _hum = 0;
 80a0ee6:	6563      	str	r3, [r4, #84]	; 0x54
    _temp = 0;
 80a0ee8:	65a3      	str	r3, [r4, #88]	; 0x58
    pinMode(_sigPin, OUTPUT);
 80a0eea:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
    _idx = 0;
 80a0eee:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
    _e = &_edges[0];
 80a0ef2:	6424      	str	r4, [r4, #64]	; 0x40
    pinMode(_sigPin, OUTPUT);
 80a0ef4:	f001 fed2 	bl	80a2c9c <pinMode>
    digitalWrite(_sigPin, LOW);
 80a0ef8:	2100      	movs	r1, #0
 80a0efa:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 80a0efe:	f001 fede 	bl	80a2cbe <digitalWrite>
    if (_type == DHT11)
 80a0f02:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80a0f04:	2b0b      	cmp	r3, #11
 80a0f06:	d12f      	bne.n	80a0f68 <_ZN14PietteTech_DHT7acquireEv+0xe0>
      delay(18);                  // DHT11 Spec: 18ms min
 80a0f08:	2012      	movs	r0, #18
 80a0f0a:	f000 ffe7 	bl	80a1edc <delay>
    pinMode(_sigPin, INPUT);        // Note Hi-Z mode with pullup resistor
 80a0f0e:	2100      	movs	r1, #0
 80a0f10:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
    _detachISR = false;
 80a0f14:	2500      	movs	r5, #0
    pinMode(_sigPin, INPUT);        // Note Hi-Z mode with pullup resistor
 80a0f16:	f001 fec1 	bl	80a2c9c <pinMode>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0f1a:	f000 f93f 	bl	80a119c <HAL_Timer_Get_Micro_Seconds>
    _us = micros();
 80a0f1e:	63a0      	str	r0, [r4, #56]	; 0x38
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0f20:	200c      	movs	r0, #12
    _detachISR = false;
 80a0f22:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
    attachInterrupt(_sigPin, &PietteTech_DHT::_isrCallback, this, FALLING);
 80a0f26:	f8b4 6044 	ldrh.w	r6, [r4, #68]	; 0x44
    _Function_base() : _M_manager(nullptr) { }
 80a0f2a:	9504      	str	r5, [sp, #16]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0f2c:	f7ff f8b5 	bl	80a009a <_Znwj>
 80a0f30:	b118      	cbz	r0, 80a0f3a <_ZN14PietteTech_DHT7acquireEv+0xb2>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
 80a0f32:	4b12      	ldr	r3, [pc, #72]	; (80a0f7c <_ZN14PietteTech_DHT7acquireEv+0xf4>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0f34:	6084      	str	r4, [r0, #8]
 80a0f36:	e9c0 3500 	strd	r3, r5, [r0]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0f3a:	4b11      	ldr	r3, [pc, #68]	; (80a0f80 <_ZN14PietteTech_DHT7acquireEv+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0f3c:	9002      	str	r0, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
 80a0f3e:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 80a0f40:	4b10      	ldr	r3, [pc, #64]	; (80a0f84 <_ZN14PietteTech_DHT7acquireEv+0xfc>)
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
 80a0f42:	2202      	movs	r2, #2
 80a0f44:	9304      	str	r3, [sp, #16]
 80a0f46:	2300      	movs	r3, #0
 80a0f48:	4630      	mov	r0, r6
 80a0f4a:	9300      	str	r3, [sp, #0]
 80a0f4c:	a902      	add	r1, sp, #8
 80a0f4e:	f04f 33ff 	mov.w	r3, #4294967295
 80a0f52:	f001 fcb7 	bl	80a28c4 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>
      if (_M_manager)
 80a0f56:	9b04      	ldr	r3, [sp, #16]
 80a0f58:	b11b      	cbz	r3, 80a0f62 <_ZN14PietteTech_DHT7acquireEv+0xda>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0f5a:	a902      	add	r1, sp, #8
 80a0f5c:	2203      	movs	r2, #3
 80a0f5e:	4608      	mov	r0, r1
 80a0f60:	4798      	blx	r3
 80a0f62:	2001      	movs	r0, #1
}
 80a0f64:	b006      	add	sp, #24
 80a0f66:	bd70      	pop	{r4, r5, r6, pc}
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a0f68:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80a0f6c:	f000 f90e 	bl	80a118c <HAL_Delay_Microseconds>
 80a0f70:	e7cd      	b.n	80a0f0e <_ZN14PietteTech_DHT7acquireEv+0x86>
    return DHTLIB_ACQUIRED;
 80a0f72:	2002      	movs	r0, #2
 80a0f74:	e7f6      	b.n	80a0f64 <_ZN14PietteTech_DHT7acquireEv+0xdc>
    return DHTLIB_ERROR_ACQUIRING;
 80a0f76:	f06f 0004 	mvn.w	r0, #4
 80a0f7a:	e7f3      	b.n	80a0f64 <_ZN14PietteTech_DHT7acquireEv+0xdc>
 80a0f7c:	080a0ca5 	.word	0x080a0ca5
 80a0f80:	080a0de5 	.word	0x080a0de5
 80a0f84:	080a0e03 	.word	0x080a0e03

080a0f88 <_ZN14PietteTech_DHT7convertEv>:

void PietteTech_DHT::convert() {
 80a0f88:	b510      	push	{r4, lr}
  // Calculate the temperature and humidity based on the sensor type
  switch (_type) {
 80a0f8a:	6c83      	ldr	r3, [r0, #72]	; 0x48
void PietteTech_DHT::convert() {
 80a0f8c:	4604      	mov	r4, r0
  switch (_type) {
 80a0f8e:	2b0b      	cmp	r3, #11
 80a0f90:	d02a      	beq.n	80a0fe8 <_ZN14PietteTech_DHT7convertEv+0x60>
 80a0f92:	3b15      	subs	r3, #21
 80a0f94:	2b01      	cmp	r3, #1
 80a0f96:	d831      	bhi.n	80a0ffc <_ZN14PietteTech_DHT7convertEv+0x74>
    _hum = _bits[0];
    _temp = _bits[2];
    break;
  case DHT22:
  case DHT21:
    _hum = word(_bits[0], _bits[1]) * 0.1;
 80a0f98:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 80a0f9c:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
  ret_val += (high << 8);
 80a0fa0:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    _hum = word(_bits[0], _bits[1]) * 0.1;
 80a0fa4:	b280      	uxth	r0, r0
 80a0fa6:	f002 f8cb 	bl	80a3140 <__aeabi_i2d>
 80a0faa:	a31b      	add	r3, pc, #108	; (adr r3, 80a1018 <_ZN14PietteTech_DHT7convertEv+0x90>)
 80a0fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0fb0:	f002 f930 	bl	80a3214 <__aeabi_dmul>
 80a0fb4:	f002 fc10 	bl	80a37d8 <__aeabi_d2f>
    _temp = (_bits[2] & 0x80 ?
 80a0fb8:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    _hum = word(_bits[0], _bits[1]) * 0.1;
 80a0fbc:	6560      	str	r0, [r4, #84]	; 0x54
      -word(_bits[2] & 0x7F, _bits[3]) :
      word(_bits[2], _bits[3])) * 0.1;
 80a0fbe:	061b      	lsls	r3, r3, #24
 80a0fc0:	d520      	bpl.n	80a1004 <_ZN14PietteTech_DHT7convertEv+0x7c>
      -word(_bits[2] & 0x7F, _bits[3]) :
 80a0fc2:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 80a0fc6:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
  ret_val += (high << 8);
 80a0fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      -word(_bits[2] & 0x7F, _bits[3]) :
 80a0fce:	eb00 2003 	add.w	r0, r0, r3, lsl #8
      word(_bits[2], _bits[3])) * 0.1;
 80a0fd2:	4240      	negs	r0, r0
 80a0fd4:	f002 f8b4 	bl	80a3140 <__aeabi_i2d>
 80a0fd8:	a30f      	add	r3, pc, #60	; (adr r3, 80a1018 <_ZN14PietteTech_DHT7convertEv+0x90>)
 80a0fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0fde:	f002 f919 	bl	80a3214 <__aeabi_dmul>
 80a0fe2:	f002 fbf9 	bl	80a37d8 <__aeabi_d2f>
 80a0fe6:	e008      	b.n	80a0ffa <_ZN14PietteTech_DHT7convertEv+0x72>
    _hum = _bits[0];
 80a0fe8:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
 80a0fec:	f002 fcfa 	bl	80a39e4 <__aeabi_ui2f>
 80a0ff0:	6560      	str	r0, [r4, #84]	; 0x54
    _temp = _bits[2];
 80a0ff2:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 80a0ff6:	f002 fcf5 	bl	80a39e4 <__aeabi_ui2f>
      word(_bits[2], _bits[3])) * 0.1;
 80a0ffa:	65a0      	str	r0, [r4, #88]	; 0x58
    break;
  }
  _convert = false;
 80a0ffc:	2300      	movs	r3, #0
 80a0ffe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80a1002:	bd10      	pop	{r4, pc}
      word(_bits[2], _bits[3])) * 0.1;
 80a1004:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 80a1008:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
  ret_val += (high << 8);
 80a100c:	eb00 2003 	add.w	r0, r0, r3, lsl #8
      word(_bits[2], _bits[3])) * 0.1;
 80a1010:	b280      	uxth	r0, r0
 80a1012:	e7df      	b.n	80a0fd4 <_ZN14PietteTech_DHT7convertEv+0x4c>
 80a1014:	f3af 8000 	nop.w
 80a1018:	9999999a 	.word	0x9999999a
 80a101c:	3fb99999 	.word	0x3fb99999

080a1020 <_ZN14PietteTech_DHT9acquiringEv>:

bool PietteTech_DHT::acquiring() {
  if (_state != ACQUIRED && _state != STOPPED)
 80a1020:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 80a1024:	2b02      	cmp	r3, #2
 80a1026:	d005      	beq.n	80a1034 <_ZN14PietteTech_DHT9acquiringEv+0x14>
 80a1028:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 80a102c:	3803      	subs	r0, #3
 80a102e:	bf18      	it	ne
 80a1030:	2001      	movne	r0, #1
 80a1032:	4770      	bx	lr
    return true;
  return false;
 80a1034:	2000      	movs	r0, #0
}
 80a1036:	4770      	bx	lr

080a1038 <_ZN14PietteTech_DHT20detachISRIfRequestedEv>:
}

#if (SYSTEM_VERSION < SYSTEM_VERSION_v121RC3)
// no extra steps required
#else
void PietteTech_DHT::detachISRIfRequested() {
 80a1038:	b510      	push	{r4, lr}
  if (_detachISR) {
 80a103a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
void PietteTech_DHT::detachISRIfRequested() {
 80a103e:	4604      	mov	r4, r0
  if (_detachISR) {
 80a1040:	b133      	cbz	r3, 80a1050 <_ZN14PietteTech_DHT20detachISRIfRequestedEv+0x18>
    detachInterrupt(_sigPin);
 80a1042:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
 80a1046:	f001 fbf7 	bl	80a2838 <_Z15detachInterruptt>
    _detachISR = false;
 80a104a:	2300      	movs	r3, #0
 80a104c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  }
}
 80a1050:	bd10      	pop	{r4, pc}

080a1052 <_ZN14PietteTech_DHT9getStatusEv>:
int PietteTech_DHT::getStatus() {
 80a1052:	b510      	push	{r4, lr}
 80a1054:	4604      	mov	r4, r0
  detachISRIfRequested();
 80a1056:	f7ff ffef 	bl	80a1038 <_ZN14PietteTech_DHT20detachISRIfRequestedEv>
  return _status;
 80a105a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
}
 80a105c:	bd10      	pop	{r4, pc}
	...

080a1060 <_ZN14PietteTech_DHT11getHumidityEv>:
float PietteTech_DHT::getHumidity() {
 80a1060:	b510      	push	{r4, lr}
 80a1062:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 80a1064:	f7ff ffe8 	bl	80a1038 <_ZN14PietteTech_DHT20detachISRIfRequestedEv>
 80a1068:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80a106c:	2b03      	cmp	r3, #3
 80a106e:	d103      	bne.n	80a1078 <_ZN14PietteTech_DHT11getHumidityEv+0x18>
 80a1070:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80a1072:	f002 fcbb 	bl	80a39ec <__aeabi_i2f>
}
 80a1076:	bd10      	pop	{r4, pc}
  DHT_CHECK_STATE;
 80a1078:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80a107c:	2b02      	cmp	r3, #2
 80a107e:	d107      	bne.n	80a1090 <_ZN14PietteTech_DHT11getHumidityEv+0x30>
 80a1080:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80a1084:	b113      	cbz	r3, 80a108c <_ZN14PietteTech_DHT11getHumidityEv+0x2c>
 80a1086:	4620      	mov	r0, r4
 80a1088:	f7ff ff7e 	bl	80a0f88 <_ZN14PietteTech_DHT7convertEv>
  return _hum;
 80a108c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80a108e:	e7f2      	b.n	80a1076 <_ZN14PietteTech_DHT11getHumidityEv+0x16>
  DHT_CHECK_STATE;
 80a1090:	4800      	ldr	r0, [pc, #0]	; (80a1094 <_ZN14PietteTech_DHT11getHumidityEv+0x34>)
 80a1092:	e7f0      	b.n	80a1076 <_ZN14PietteTech_DHT11getHumidityEv+0x16>
 80a1094:	c0a00000 	.word	0xc0a00000

080a1098 <_ZN14PietteTech_DHT13getFahrenheitEv>:
float PietteTech_DHT::getFahrenheit() {
 80a1098:	b510      	push	{r4, lr}
 80a109a:	4604      	mov	r4, r0
  DHT_CHECK_STATE;
 80a109c:	f7ff ffcc 	bl	80a1038 <_ZN14PietteTech_DHT20detachISRIfRequestedEv>
 80a10a0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80a10a4:	2b03      	cmp	r3, #3
 80a10a6:	d103      	bne.n	80a10b0 <_ZN14PietteTech_DHT13getFahrenheitEv+0x18>
 80a10a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80a10aa:	f002 fc9f 	bl	80a39ec <__aeabi_i2f>
}
 80a10ae:	bd10      	pop	{r4, pc}
  DHT_CHECK_STATE;
 80a10b0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80a10b4:	2b02      	cmp	r3, #2
 80a10b6:	d117      	bne.n	80a10e8 <_ZN14PietteTech_DHT13getFahrenheitEv+0x50>
 80a10b8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80a10bc:	b113      	cbz	r3, 80a10c4 <_ZN14PietteTech_DHT13getFahrenheitEv+0x2c>
 80a10be:	4620      	mov	r0, r4
 80a10c0:	f7ff ff62 	bl	80a0f88 <_ZN14PietteTech_DHT7convertEv>
  return CtoF(_temp);
 80a10c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80a10c6:	f002 f84d 	bl	80a3164 <__aeabi_f2d>
  // 
  void     isrCallback();
  int      acquire();
  int      acquireAndWait(uint32_t timeout = 0);
  static inline
  double   CtoF(double celsius)    { return (celsius * 9 / 5 + 32); };
 80a10ca:	2200      	movs	r2, #0
 80a10cc:	4b07      	ldr	r3, [pc, #28]	; (80a10ec <_ZN14PietteTech_DHT13getFahrenheitEv+0x54>)
 80a10ce:	f002 f8a1 	bl	80a3214 <__aeabi_dmul>
 80a10d2:	2200      	movs	r2, #0
 80a10d4:	4b06      	ldr	r3, [pc, #24]	; (80a10f0 <_ZN14PietteTech_DHT13getFahrenheitEv+0x58>)
 80a10d6:	f002 f9c7 	bl	80a3468 <__aeabi_ddiv>
 80a10da:	2200      	movs	r2, #0
 80a10dc:	4b05      	ldr	r3, [pc, #20]	; (80a10f4 <_ZN14PietteTech_DHT13getFahrenheitEv+0x5c>)
 80a10de:	f001 fee3 	bl	80a2ea8 <__adddf3>
 80a10e2:	f002 fb79 	bl	80a37d8 <__aeabi_d2f>
 80a10e6:	e7e2      	b.n	80a10ae <_ZN14PietteTech_DHT13getFahrenheitEv+0x16>
  DHT_CHECK_STATE;
 80a10e8:	4803      	ldr	r0, [pc, #12]	; (80a10f8 <_ZN14PietteTech_DHT13getFahrenheitEv+0x60>)
 80a10ea:	e7e0      	b.n	80a10ae <_ZN14PietteTech_DHT13getFahrenheitEv+0x16>
 80a10ec:	40220000 	.word	0x40220000
 80a10f0:	40140000 	.word	0x40140000
 80a10f4:	40400000 	.word	0x40400000
 80a10f8:	c0a00000 	.word	0xc0a00000

080a10fc <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a10fc:	b508      	push	{r3, lr}
 80a10fe:	4b02      	ldr	r3, [pc, #8]	; (80a1108 <HAL_Validate_Pin_Function+0xc>)
 80a1100:	681b      	ldr	r3, [r3, #0]
 80a1102:	685b      	ldr	r3, [r3, #4]
 80a1104:	9301      	str	r3, [sp, #4]
 80a1106:	bd08      	pop	{r3, pc}
 80a1108:	080601b0 	.word	0x080601b0

080a110c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a110c:	b508      	push	{r3, lr}
 80a110e:	4b02      	ldr	r3, [pc, #8]	; (80a1118 <HAL_Pin_Mode+0xc>)
 80a1110:	681b      	ldr	r3, [r3, #0]
 80a1112:	689b      	ldr	r3, [r3, #8]
 80a1114:	9301      	str	r3, [sp, #4]
 80a1116:	bd08      	pop	{r3, pc}
 80a1118:	080601b0 	.word	0x080601b0

080a111c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a111c:	b508      	push	{r3, lr}
 80a111e:	4b02      	ldr	r3, [pc, #8]	; (80a1128 <HAL_Get_Pin_Mode+0xc>)
 80a1120:	681b      	ldr	r3, [r3, #0]
 80a1122:	68db      	ldr	r3, [r3, #12]
 80a1124:	9301      	str	r3, [sp, #4]
 80a1126:	bd08      	pop	{r3, pc}
 80a1128:	080601b0 	.word	0x080601b0

080a112c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a112c:	b508      	push	{r3, lr}
 80a112e:	4b02      	ldr	r3, [pc, #8]	; (80a1138 <HAL_GPIO_Write+0xc>)
 80a1130:	681b      	ldr	r3, [r3, #0]
 80a1132:	691b      	ldr	r3, [r3, #16]
 80a1134:	9301      	str	r3, [sp, #4]
 80a1136:	bd08      	pop	{r3, pc}
 80a1138:	080601b0 	.word	0x080601b0

080a113c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a113c:	b508      	push	{r3, lr}
 80a113e:	4b02      	ldr	r3, [pc, #8]	; (80a1148 <HAL_GPIO_Read+0xc>)
 80a1140:	681b      	ldr	r3, [r3, #0]
 80a1142:	695b      	ldr	r3, [r3, #20]
 80a1144:	9301      	str	r3, [sp, #4]
 80a1146:	bd08      	pop	{r3, pc}
 80a1148:	080601b0 	.word	0x080601b0

080a114c <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a114c:	b508      	push	{r3, lr}
 80a114e:	4b02      	ldr	r3, [pc, #8]	; (80a1158 <HAL_Interrupts_Attach+0xc>)
 80a1150:	681b      	ldr	r3, [r3, #0]
 80a1152:	699b      	ldr	r3, [r3, #24]
 80a1154:	9301      	str	r3, [sp, #4]
 80a1156:	bd08      	pop	{r3, pc}
 80a1158:	080601b0 	.word	0x080601b0

080a115c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 80a115c:	b508      	push	{r3, lr}
 80a115e:	4b02      	ldr	r3, [pc, #8]	; (80a1168 <HAL_Interrupts_Detach+0xc>)
 80a1160:	681b      	ldr	r3, [r3, #0]
 80a1162:	69db      	ldr	r3, [r3, #28]
 80a1164:	9301      	str	r3, [sp, #4]
 80a1166:	bd08      	pop	{r3, pc}
 80a1168:	080601b0 	.word	0x080601b0

080a116c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80a116c:	b508      	push	{r3, lr}
 80a116e:	4b02      	ldr	r3, [pc, #8]	; (80a1178 <hal_adc_read+0xc>)
 80a1170:	681b      	ldr	r3, [r3, #0]
 80a1172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1174:	9301      	str	r3, [sp, #4]
 80a1176:	bd08      	pop	{r3, pc}
 80a1178:	080601b0 	.word	0x080601b0

080a117c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a117c:	b508      	push	{r3, lr}
 80a117e:	4b02      	ldr	r3, [pc, #8]	; (80a1188 <HAL_RNG_GetRandomNumber+0xc>)
 80a1180:	681b      	ldr	r3, [r3, #0]
 80a1182:	685b      	ldr	r3, [r3, #4]
 80a1184:	9301      	str	r3, [sp, #4]
 80a1186:	bd08      	pop	{r3, pc}
 80a1188:	0806019c 	.word	0x0806019c

080a118c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a118c:	b508      	push	{r3, lr}
 80a118e:	4b02      	ldr	r3, [pc, #8]	; (80a1198 <HAL_Delay_Microseconds+0xc>)
 80a1190:	681b      	ldr	r3, [r3, #0]
 80a1192:	68db      	ldr	r3, [r3, #12]
 80a1194:	9301      	str	r3, [sp, #4]
 80a1196:	bd08      	pop	{r3, pc}
 80a1198:	0806019c 	.word	0x0806019c

080a119c <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a119c:	b508      	push	{r3, lr}
 80a119e:	4b02      	ldr	r3, [pc, #8]	; (80a11a8 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a11a0:	681b      	ldr	r3, [r3, #0]
 80a11a2:	691b      	ldr	r3, [r3, #16]
 80a11a4:	9301      	str	r3, [sp, #4]
 80a11a6:	bd08      	pop	{r3, pc}
 80a11a8:	0806019c 	.word	0x0806019c

080a11ac <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a11ac:	b508      	push	{r3, lr}
 80a11ae:	4b02      	ldr	r3, [pc, #8]	; (80a11b8 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a11b0:	681b      	ldr	r3, [r3, #0]
 80a11b2:	695b      	ldr	r3, [r3, #20]
 80a11b4:	9301      	str	r3, [sp, #4]
 80a11b6:	bd08      	pop	{r3, pc}
 80a11b8:	0806019c 	.word	0x0806019c

080a11bc <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 80a11bc:	b508      	push	{r3, lr}
 80a11be:	4b02      	ldr	r3, [pc, #8]	; (80a11c8 <HAL_EEPROM_Init+0xc>)
 80a11c0:	681b      	ldr	r3, [r3, #0]
 80a11c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a11c4:	9301      	str	r3, [sp, #4]
 80a11c6:	bd08      	pop	{r3, pc}
 80a11c8:	0806019c 	.word	0x0806019c

080a11cc <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 80a11cc:	b508      	push	{r3, lr}
 80a11ce:	4b02      	ldr	r3, [pc, #8]	; (80a11d8 <HAL_EEPROM_Put+0xc>)
 80a11d0:	681b      	ldr	r3, [r3, #0]
 80a11d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a11d4:	9301      	str	r3, [sp, #4]
 80a11d6:	bd08      	pop	{r3, pc}
 80a11d8:	0806019c 	.word	0x0806019c

080a11dc <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80a11dc:	b508      	push	{r3, lr}
 80a11de:	4b02      	ldr	r3, [pc, #8]	; (80a11e8 <hal_rtc_time_is_valid+0xc>)
 80a11e0:	681b      	ldr	r3, [r3, #0]
 80a11e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a11e4:	9301      	str	r3, [sp, #4]
 80a11e6:	bd08      	pop	{r3, pc}
 80a11e8:	0806019c 	.word	0x0806019c

080a11ec <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80a11ec:	b508      	push	{r3, lr}
 80a11ee:	4b02      	ldr	r3, [pc, #8]	; (80a11f8 <hal_rtc_get_time+0xc>)
 80a11f0:	681b      	ldr	r3, [r3, #0]
 80a11f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a11f4:	9301      	str	r3, [sp, #4]
 80a11f6:	bd08      	pop	{r3, pc}
 80a11f8:	0806019c 	.word	0x0806019c

080a11fc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a11fc:	b508      	push	{r3, lr}
 80a11fe:	4b02      	ldr	r3, [pc, #8]	; (80a1208 <os_mutex_recursive_create+0xc>)
 80a1200:	681b      	ldr	r3, [r3, #0]
 80a1202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1204:	9301      	str	r3, [sp, #4]
 80a1206:	bd08      	pop	{r3, pc}
 80a1208:	080601d0 	.word	0x080601d0

080a120c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a120c:	b508      	push	{r3, lr}
 80a120e:	4b02      	ldr	r3, [pc, #8]	; (80a1218 <os_mutex_recursive_destroy+0xc>)
 80a1210:	681b      	ldr	r3, [r3, #0]
 80a1212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1214:	9301      	str	r3, [sp, #4]
 80a1216:	bd08      	pop	{r3, pc}
 80a1218:	080601d0 	.word	0x080601d0

080a121c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a121c:	b508      	push	{r3, lr}
 80a121e:	4b02      	ldr	r3, [pc, #8]	; (80a1228 <hal_usart_write+0xc>)
 80a1220:	681b      	ldr	r3, [r3, #0]
 80a1222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1224:	9301      	str	r3, [sp, #4]
 80a1226:	bd08      	pop	{r3, pc}
 80a1228:	080601c4 	.word	0x080601c4

080a122c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a122c:	b508      	push	{r3, lr}
 80a122e:	4b02      	ldr	r3, [pc, #8]	; (80a1238 <hal_usart_available+0xc>)
 80a1230:	681b      	ldr	r3, [r3, #0]
 80a1232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1234:	9301      	str	r3, [sp, #4]
 80a1236:	bd08      	pop	{r3, pc}
 80a1238:	080601c4 	.word	0x080601c4

080a123c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a123c:	b508      	push	{r3, lr}
 80a123e:	4b02      	ldr	r3, [pc, #8]	; (80a1248 <hal_usart_read+0xc>)
 80a1240:	681b      	ldr	r3, [r3, #0]
 80a1242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1244:	9301      	str	r3, [sp, #4]
 80a1246:	bd08      	pop	{r3, pc}
 80a1248:	080601c4 	.word	0x080601c4

080a124c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a124c:	b508      	push	{r3, lr}
 80a124e:	4b02      	ldr	r3, [pc, #8]	; (80a1258 <hal_usart_peek+0xc>)
 80a1250:	681b      	ldr	r3, [r3, #0]
 80a1252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1254:	9301      	str	r3, [sp, #4]
 80a1256:	bd08      	pop	{r3, pc}
 80a1258:	080601c4 	.word	0x080601c4

080a125c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a125c:	b508      	push	{r3, lr}
 80a125e:	4b02      	ldr	r3, [pc, #8]	; (80a1268 <hal_usart_flush+0xc>)
 80a1260:	681b      	ldr	r3, [r3, #0]
 80a1262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1264:	9301      	str	r3, [sp, #4]
 80a1266:	bd08      	pop	{r3, pc}
 80a1268:	080601c4 	.word	0x080601c4

080a126c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a126c:	b508      	push	{r3, lr}
 80a126e:	4b02      	ldr	r3, [pc, #8]	; (80a1278 <hal_usart_is_enabled+0xc>)
 80a1270:	681b      	ldr	r3, [r3, #0]
 80a1272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1274:	9301      	str	r3, [sp, #4]
 80a1276:	bd08      	pop	{r3, pc}
 80a1278:	080601c4 	.word	0x080601c4

080a127c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a127c:	b508      	push	{r3, lr}
 80a127e:	4b02      	ldr	r3, [pc, #8]	; (80a1288 <hal_usart_available_data_for_write+0xc>)
 80a1280:	681b      	ldr	r3, [r3, #0]
 80a1282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1284:	9301      	str	r3, [sp, #4]
 80a1286:	bd08      	pop	{r3, pc}
 80a1288:	080601c4 	.word	0x080601c4

080a128c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 80a128c:	b508      	push	{r3, lr}
 80a128e:	4b02      	ldr	r3, [pc, #8]	; (80a1298 <hal_usart_init_ex+0xc>)
 80a1290:	681b      	ldr	r3, [r3, #0]
 80a1292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1294:	9301      	str	r3, [sp, #4]
 80a1296:	bd08      	pop	{r3, pc}
 80a1298:	080601c4 	.word	0x080601c4

080a129c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a129c:	b508      	push	{r3, lr}
 80a129e:	4b02      	ldr	r3, [pc, #8]	; (80a12a8 <hal_i2c_write+0xc>)
 80a12a0:	681b      	ldr	r3, [r3, #0]
 80a12a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a12a4:	9301      	str	r3, [sp, #4]
 80a12a6:	bd08      	pop	{r3, pc}
 80a12a8:	080601ac 	.word	0x080601ac

080a12ac <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a12ac:	b508      	push	{r3, lr}
 80a12ae:	4b02      	ldr	r3, [pc, #8]	; (80a12b8 <hal_i2c_available+0xc>)
 80a12b0:	681b      	ldr	r3, [r3, #0]
 80a12b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a12b4:	9301      	str	r3, [sp, #4]
 80a12b6:	bd08      	pop	{r3, pc}
 80a12b8:	080601ac 	.word	0x080601ac

080a12bc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a12bc:	b508      	push	{r3, lr}
 80a12be:	4b02      	ldr	r3, [pc, #8]	; (80a12c8 <hal_i2c_read+0xc>)
 80a12c0:	681b      	ldr	r3, [r3, #0]
 80a12c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a12c4:	9301      	str	r3, [sp, #4]
 80a12c6:	bd08      	pop	{r3, pc}
 80a12c8:	080601ac 	.word	0x080601ac

080a12cc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a12cc:	b508      	push	{r3, lr}
 80a12ce:	4b02      	ldr	r3, [pc, #8]	; (80a12d8 <hal_i2c_peek+0xc>)
 80a12d0:	681b      	ldr	r3, [r3, #0]
 80a12d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a12d4:	9301      	str	r3, [sp, #4]
 80a12d6:	bd08      	pop	{r3, pc}
 80a12d8:	080601ac 	.word	0x080601ac

080a12dc <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a12dc:	b508      	push	{r3, lr}
 80a12de:	4b02      	ldr	r3, [pc, #8]	; (80a12e8 <hal_i2c_flush+0xc>)
 80a12e0:	681b      	ldr	r3, [r3, #0]
 80a12e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a12e4:	9301      	str	r3, [sp, #4]
 80a12e6:	bd08      	pop	{r3, pc}
 80a12e8:	080601ac 	.word	0x080601ac

080a12ec <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a12ec:	b508      	push	{r3, lr}
 80a12ee:	4b02      	ldr	r3, [pc, #8]	; (80a12f8 <hal_i2c_is_enabled+0xc>)
 80a12f0:	681b      	ldr	r3, [r3, #0]
 80a12f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a12f4:	9301      	str	r3, [sp, #4]
 80a12f6:	bd08      	pop	{r3, pc}
 80a12f8:	080601ac 	.word	0x080601ac

080a12fc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a12fc:	b508      	push	{r3, lr}
 80a12fe:	4b03      	ldr	r3, [pc, #12]	; (80a130c <hal_i2c_init+0x10>)
 80a1300:	681b      	ldr	r3, [r3, #0]
 80a1302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1306:	9301      	str	r3, [sp, #4]
 80a1308:	bd08      	pop	{r3, pc}
 80a130a:	0000      	.short	0x0000
 80a130c:	080601ac 	.word	0x080601ac

080a1310 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a1310:	b508      	push	{r3, lr}
 80a1312:	4b02      	ldr	r3, [pc, #8]	; (80a131c <hal_spi_init+0xc>)
 80a1314:	681b      	ldr	r3, [r3, #0]
 80a1316:	69db      	ldr	r3, [r3, #28]
 80a1318:	9301      	str	r3, [sp, #4]
 80a131a:	bd08      	pop	{r3, pc}
 80a131c:	080601b4 	.word	0x080601b4

080a1320 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a1320:	b508      	push	{r3, lr}
 80a1322:	4b02      	ldr	r3, [pc, #8]	; (80a132c <hal_spi_is_enabled+0xc>)
 80a1324:	681b      	ldr	r3, [r3, #0]
 80a1326:	6a1b      	ldr	r3, [r3, #32]
 80a1328:	9301      	str	r3, [sp, #4]
 80a132a:	bd08      	pop	{r3, pc}
 80a132c:	080601b4 	.word	0x080601b4

080a1330 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
 80a1330:	b508      	push	{r3, lr}
 80a1332:	4b02      	ldr	r3, [pc, #8]	; (80a133c <HAL_Servo_Attach+0xc>)
 80a1334:	681b      	ldr	r3, [r3, #0]
 80a1336:	691b      	ldr	r3, [r3, #16]
 80a1338:	9301      	str	r3, [sp, #4]
 80a133a:	bd08      	pop	{r3, pc}
 80a133c:	080601a8 	.word	0x080601a8

080a1340 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
 80a1340:	b508      	push	{r3, lr}
 80a1342:	4b02      	ldr	r3, [pc, #8]	; (80a134c <HAL_Servo_Detach+0xc>)
 80a1344:	681b      	ldr	r3, [r3, #0]
 80a1346:	695b      	ldr	r3, [r3, #20]
 80a1348:	9301      	str	r3, [sp, #4]
 80a134a:	bd08      	pop	{r3, pc}
 80a134c:	080601a8 	.word	0x080601a8

080a1350 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
 80a1350:	b508      	push	{r3, lr}
 80a1352:	4b02      	ldr	r3, [pc, #8]	; (80a135c <HAL_Servo_Write_Pulse_Width+0xc>)
 80a1354:	681b      	ldr	r3, [r3, #0]
 80a1356:	699b      	ldr	r3, [r3, #24]
 80a1358:	9301      	str	r3, [sp, #4]
 80a135a:	bd08      	pop	{r3, pc}
 80a135c:	080601a8 	.word	0x080601a8

080a1360 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1360:	b508      	push	{r3, lr}
 80a1362:	4b02      	ldr	r3, [pc, #8]	; (80a136c <HAL_USB_USART_Init+0xc>)
 80a1364:	681b      	ldr	r3, [r3, #0]
 80a1366:	681b      	ldr	r3, [r3, #0]
 80a1368:	9301      	str	r3, [sp, #4]
 80a136a:	bd08      	pop	{r3, pc}
 80a136c:	080601d8 	.word	0x080601d8

080a1370 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1370:	b508      	push	{r3, lr}
 80a1372:	4b02      	ldr	r3, [pc, #8]	; (80a137c <HAL_USB_USART_Available_Data+0xc>)
 80a1374:	681b      	ldr	r3, [r3, #0]
 80a1376:	691b      	ldr	r3, [r3, #16]
 80a1378:	9301      	str	r3, [sp, #4]
 80a137a:	bd08      	pop	{r3, pc}
 80a137c:	080601d8 	.word	0x080601d8

080a1380 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1380:	b508      	push	{r3, lr}
 80a1382:	4b02      	ldr	r3, [pc, #8]	; (80a138c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1384:	681b      	ldr	r3, [r3, #0]
 80a1386:	695b      	ldr	r3, [r3, #20]
 80a1388:	9301      	str	r3, [sp, #4]
 80a138a:	bd08      	pop	{r3, pc}
 80a138c:	080601d8 	.word	0x080601d8

080a1390 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1390:	b508      	push	{r3, lr}
 80a1392:	4b02      	ldr	r3, [pc, #8]	; (80a139c <HAL_USB_USART_Receive_Data+0xc>)
 80a1394:	681b      	ldr	r3, [r3, #0]
 80a1396:	699b      	ldr	r3, [r3, #24]
 80a1398:	9301      	str	r3, [sp, #4]
 80a139a:	bd08      	pop	{r3, pc}
 80a139c:	080601d8 	.word	0x080601d8

080a13a0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a13a0:	b508      	push	{r3, lr}
 80a13a2:	4b02      	ldr	r3, [pc, #8]	; (80a13ac <HAL_USB_USART_Send_Data+0xc>)
 80a13a4:	681b      	ldr	r3, [r3, #0]
 80a13a6:	69db      	ldr	r3, [r3, #28]
 80a13a8:	9301      	str	r3, [sp, #4]
 80a13aa:	bd08      	pop	{r3, pc}
 80a13ac:	080601d8 	.word	0x080601d8

080a13b0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a13b0:	b508      	push	{r3, lr}
 80a13b2:	4b02      	ldr	r3, [pc, #8]	; (80a13bc <HAL_USB_USART_Flush_Data+0xc>)
 80a13b4:	681b      	ldr	r3, [r3, #0]
 80a13b6:	6a1b      	ldr	r3, [r3, #32]
 80a13b8:	9301      	str	r3, [sp, #4]
 80a13ba:	bd08      	pop	{r3, pc}
 80a13bc:	080601d8 	.word	0x080601d8

080a13c0 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a13c0:	b508      	push	{r3, lr}
 80a13c2:	4b02      	ldr	r3, [pc, #8]	; (80a13cc <inet_gethostbyname+0xc>)
 80a13c4:	681b      	ldr	r3, [r3, #0]
 80a13c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a13c8:	9301      	str	r3, [sp, #4]
 80a13ca:	bd08      	pop	{r3, pc}
 80a13cc:	080601c0 	.word	0x080601c0

080a13d0 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a13d0:	b508      	push	{r3, lr}
 80a13d2:	4b02      	ldr	r3, [pc, #8]	; (80a13dc <system_mode+0xc>)
 80a13d4:	681b      	ldr	r3, [r3, #0]
 80a13d6:	681b      	ldr	r3, [r3, #0]
 80a13d8:	9301      	str	r3, [sp, #4]
 80a13da:	bd08      	pop	{r3, pc}
 80a13dc:	080601a4 	.word	0x080601a4

080a13e0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a13e0:	b508      	push	{r3, lr}
 80a13e2:	4b02      	ldr	r3, [pc, #8]	; (80a13ec <set_system_mode+0xc>)
 80a13e4:	681b      	ldr	r3, [r3, #0]
 80a13e6:	685b      	ldr	r3, [r3, #4]
 80a13e8:	9301      	str	r3, [sp, #4]
 80a13ea:	bd08      	pop	{r3, pc}
 80a13ec:	080601a4 	.word	0x080601a4

080a13f0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a13f0:	b508      	push	{r3, lr}
 80a13f2:	4b02      	ldr	r3, [pc, #8]	; (80a13fc <system_delay_ms+0xc>)
 80a13f4:	681b      	ldr	r3, [r3, #0]
 80a13f6:	695b      	ldr	r3, [r3, #20]
 80a13f8:	9301      	str	r3, [sp, #4]
 80a13fa:	bd08      	pop	{r3, pc}
 80a13fc:	080601a4 	.word	0x080601a4

080a1400 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a1400:	b508      	push	{r3, lr}
 80a1402:	4b02      	ldr	r3, [pc, #8]	; (80a140c <application_thread_current+0xc>)
 80a1404:	681b      	ldr	r3, [r3, #0]
 80a1406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1408:	9301      	str	r3, [sp, #4]
 80a140a:	bd08      	pop	{r3, pc}
 80a140c:	080601a4 	.word	0x080601a4

080a1410 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a1410:	b508      	push	{r3, lr}
 80a1412:	4b02      	ldr	r3, [pc, #8]	; (80a141c <application_thread_invoke+0xc>)
 80a1414:	681b      	ldr	r3, [r3, #0]
 80a1416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1418:	9301      	str	r3, [sp, #4]
 80a141a:	bd08      	pop	{r3, pc}
 80a141c:	080601a4 	.word	0x080601a4

080a1420 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a1420:	b508      	push	{r3, lr}
 80a1422:	4b02      	ldr	r3, [pc, #8]	; (80a142c <system_thread_get_state+0xc>)
 80a1424:	681b      	ldr	r3, [r3, #0]
 80a1426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1428:	9301      	str	r3, [sp, #4]
 80a142a:	bd08      	pop	{r3, pc}
 80a142c:	080601a4 	.word	0x080601a4

080a1430 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1430:	b508      	push	{r3, lr}
 80a1432:	4b03      	ldr	r3, [pc, #12]	; (80a1440 <system_ctrl_set_app_request_handler+0x10>)
 80a1434:	681b      	ldr	r3, [r3, #0]
 80a1436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a143a:	9301      	str	r3, [sp, #4]
 80a143c:	bd08      	pop	{r3, pc}
 80a143e:	0000      	.short	0x0000
 80a1440:	080601a4 	.word	0x080601a4

080a1444 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1444:	b508      	push	{r3, lr}
 80a1446:	4b03      	ldr	r3, [pc, #12]	; (80a1454 <system_ctrl_set_result+0x10>)
 80a1448:	681b      	ldr	r3, [r3, #0]
 80a144a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a144e:	9301      	str	r3, [sp, #4]
 80a1450:	bd08      	pop	{r3, pc}
 80a1452:	0000      	.short	0x0000
 80a1454:	080601a4 	.word	0x080601a4

080a1458 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1458:	b508      	push	{r3, lr}
 80a145a:	4b02      	ldr	r3, [pc, #8]	; (80a1464 <network_connect+0xc>)
 80a145c:	681b      	ldr	r3, [r3, #0]
 80a145e:	685b      	ldr	r3, [r3, #4]
 80a1460:	9301      	str	r3, [sp, #4]
 80a1462:	bd08      	pop	{r3, pc}
 80a1464:	080601c8 	.word	0x080601c8

080a1468 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1468:	b508      	push	{r3, lr}
 80a146a:	4b02      	ldr	r3, [pc, #8]	; (80a1474 <network_connecting+0xc>)
 80a146c:	681b      	ldr	r3, [r3, #0]
 80a146e:	689b      	ldr	r3, [r3, #8]
 80a1470:	9301      	str	r3, [sp, #4]
 80a1472:	bd08      	pop	{r3, pc}
 80a1474:	080601c8 	.word	0x080601c8

080a1478 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1478:	b508      	push	{r3, lr}
 80a147a:	4b02      	ldr	r3, [pc, #8]	; (80a1484 <network_disconnect+0xc>)
 80a147c:	681b      	ldr	r3, [r3, #0]
 80a147e:	68db      	ldr	r3, [r3, #12]
 80a1480:	9301      	str	r3, [sp, #4]
 80a1482:	bd08      	pop	{r3, pc}
 80a1484:	080601c8 	.word	0x080601c8

080a1488 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1488:	b508      	push	{r3, lr}
 80a148a:	4b02      	ldr	r3, [pc, #8]	; (80a1494 <network_ready+0xc>)
 80a148c:	681b      	ldr	r3, [r3, #0]
 80a148e:	691b      	ldr	r3, [r3, #16]
 80a1490:	9301      	str	r3, [sp, #4]
 80a1492:	bd08      	pop	{r3, pc}
 80a1494:	080601c8 	.word	0x080601c8

080a1498 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1498:	b508      	push	{r3, lr}
 80a149a:	4b02      	ldr	r3, [pc, #8]	; (80a14a4 <network_on+0xc>)
 80a149c:	681b      	ldr	r3, [r3, #0]
 80a149e:	695b      	ldr	r3, [r3, #20]
 80a14a0:	9301      	str	r3, [sp, #4]
 80a14a2:	bd08      	pop	{r3, pc}
 80a14a4:	080601c8 	.word	0x080601c8

080a14a8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a14a8:	b508      	push	{r3, lr}
 80a14aa:	4b02      	ldr	r3, [pc, #8]	; (80a14b4 <network_off+0xc>)
 80a14ac:	681b      	ldr	r3, [r3, #0]
 80a14ae:	699b      	ldr	r3, [r3, #24]
 80a14b0:	9301      	str	r3, [sp, #4]
 80a14b2:	bd08      	pop	{r3, pc}
 80a14b4:	080601c8 	.word	0x080601c8

080a14b8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a14b8:	b508      	push	{r3, lr}
 80a14ba:	4b02      	ldr	r3, [pc, #8]	; (80a14c4 <network_listen+0xc>)
 80a14bc:	681b      	ldr	r3, [r3, #0]
 80a14be:	69db      	ldr	r3, [r3, #28]
 80a14c0:	9301      	str	r3, [sp, #4]
 80a14c2:	bd08      	pop	{r3, pc}
 80a14c4:	080601c8 	.word	0x080601c8

080a14c8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a14c8:	b508      	push	{r3, lr}
 80a14ca:	4b02      	ldr	r3, [pc, #8]	; (80a14d4 <network_listening+0xc>)
 80a14cc:	681b      	ldr	r3, [r3, #0]
 80a14ce:	6a1b      	ldr	r3, [r3, #32]
 80a14d0:	9301      	str	r3, [sp, #4]
 80a14d2:	bd08      	pop	{r3, pc}
 80a14d4:	080601c8 	.word	0x080601c8

080a14d8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a14d8:	b508      	push	{r3, lr}
 80a14da:	4b02      	ldr	r3, [pc, #8]	; (80a14e4 <network_set_listen_timeout+0xc>)
 80a14dc:	681b      	ldr	r3, [r3, #0]
 80a14de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a14e0:	9301      	str	r3, [sp, #4]
 80a14e2:	bd08      	pop	{r3, pc}
 80a14e4:	080601c8 	.word	0x080601c8

080a14e8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a14e8:	b508      	push	{r3, lr}
 80a14ea:	4b02      	ldr	r3, [pc, #8]	; (80a14f4 <network_get_listen_timeout+0xc>)
 80a14ec:	681b      	ldr	r3, [r3, #0]
 80a14ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a14f0:	9301      	str	r3, [sp, #4]
 80a14f2:	bd08      	pop	{r3, pc}
 80a14f4:	080601c8 	.word	0x080601c8

080a14f8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a14f8:	b508      	push	{r3, lr}
 80a14fa:	4b02      	ldr	r3, [pc, #8]	; (80a1504 <network_is_on+0xc>)
 80a14fc:	681b      	ldr	r3, [r3, #0]
 80a14fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1500:	9301      	str	r3, [sp, #4]
 80a1502:	bd08      	pop	{r3, pc}
 80a1504:	080601c8 	.word	0x080601c8

080a1508 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a1508:	b508      	push	{r3, lr}
 80a150a:	4b02      	ldr	r3, [pc, #8]	; (80a1514 <network_is_off+0xc>)
 80a150c:	681b      	ldr	r3, [r3, #0]
 80a150e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1510:	9301      	str	r3, [sp, #4]
 80a1512:	bd08      	pop	{r3, pc}
 80a1514:	080601c8 	.word	0x080601c8

080a1518 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a1518:	b508      	push	{r3, lr}
 80a151a:	4b02      	ldr	r3, [pc, #8]	; (80a1524 <spark_variable+0xc>)
 80a151c:	681b      	ldr	r3, [r3, #0]
 80a151e:	681b      	ldr	r3, [r3, #0]
 80a1520:	9301      	str	r3, [sp, #4]
 80a1522:	bd08      	pop	{r3, pc}
 80a1524:	080601cc 	.word	0x080601cc

080a1528 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a1528:	b508      	push	{r3, lr}
 80a152a:	4b02      	ldr	r3, [pc, #8]	; (80a1534 <spark_function+0xc>)
 80a152c:	681b      	ldr	r3, [r3, #0]
 80a152e:	685b      	ldr	r3, [r3, #4]
 80a1530:	9301      	str	r3, [sp, #4]
 80a1532:	bd08      	pop	{r3, pc}
 80a1534:	080601cc 	.word	0x080601cc

080a1538 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a1538:	b508      	push	{r3, lr}
 80a153a:	4b02      	ldr	r3, [pc, #8]	; (80a1544 <spark_process+0xc>)
 80a153c:	681b      	ldr	r3, [r3, #0]
 80a153e:	689b      	ldr	r3, [r3, #8]
 80a1540:	9301      	str	r3, [sp, #4]
 80a1542:	bd08      	pop	{r3, pc}
 80a1544:	080601cc 	.word	0x080601cc

080a1548 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a1548:	b508      	push	{r3, lr}
 80a154a:	4b02      	ldr	r3, [pc, #8]	; (80a1554 <spark_cloud_flag_connected+0xc>)
 80a154c:	681b      	ldr	r3, [r3, #0]
 80a154e:	695b      	ldr	r3, [r3, #20]
 80a1550:	9301      	str	r3, [sp, #4]
 80a1552:	bd08      	pop	{r3, pc}
 80a1554:	080601cc 	.word	0x080601cc

080a1558 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a1558:	b508      	push	{r3, lr}
 80a155a:	4b02      	ldr	r3, [pc, #8]	; (80a1564 <spark_send_event+0xc>)
 80a155c:	681b      	ldr	r3, [r3, #0]
 80a155e:	6a1b      	ldr	r3, [r3, #32]
 80a1560:	9301      	str	r3, [sp, #4]
 80a1562:	bd08      	pop	{r3, pc}
 80a1564:	080601cc 	.word	0x080601cc

080a1568 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a1568:	b508      	push	{r3, lr}
 80a156a:	4b02      	ldr	r3, [pc, #8]	; (80a1574 <spark_sync_time_pending+0xc>)
 80a156c:	681b      	ldr	r3, [r3, #0]
 80a156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1570:	9301      	str	r3, [sp, #4]
 80a1572:	bd08      	pop	{r3, pc}
 80a1574:	080601cc 	.word	0x080601cc

080a1578 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1578:	b508      	push	{r3, lr}
 80a157a:	4b02      	ldr	r3, [pc, #8]	; (80a1584 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a157c:	681b      	ldr	r3, [r3, #0]
 80a157e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1580:	9301      	str	r3, [sp, #4]
 80a1582:	bd08      	pop	{r3, pc}
 80a1584:	080601cc 	.word	0x080601cc

080a1588 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1588:	b508      	push	{r3, lr}
 80a158a:	4b02      	ldr	r3, [pc, #8]	; (80a1594 <malloc+0xc>)
 80a158c:	681b      	ldr	r3, [r3, #0]
 80a158e:	681b      	ldr	r3, [r3, #0]
 80a1590:	9301      	str	r3, [sp, #4]
 80a1592:	bd08      	pop	{r3, pc}
 80a1594:	080601a0 	.word	0x080601a0

080a1598 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1598:	b508      	push	{r3, lr}
 80a159a:	4b02      	ldr	r3, [pc, #8]	; (80a15a4 <free+0xc>)
 80a159c:	681b      	ldr	r3, [r3, #0]
 80a159e:	685b      	ldr	r3, [r3, #4]
 80a15a0:	9301      	str	r3, [sp, #4]
 80a15a2:	bd08      	pop	{r3, pc}
 80a15a4:	080601a0 	.word	0x080601a0

080a15a8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a15a8:	b508      	push	{r3, lr}
 80a15aa:	4b02      	ldr	r3, [pc, #8]	; (80a15b4 <realloc+0xc>)
 80a15ac:	681b      	ldr	r3, [r3, #0]
 80a15ae:	689b      	ldr	r3, [r3, #8]
 80a15b0:	9301      	str	r3, [sp, #4]
 80a15b2:	bd08      	pop	{r3, pc}
 80a15b4:	080601a0 	.word	0x080601a0

080a15b8 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80a15b8:	b508      	push	{r3, lr}
 80a15ba:	4b02      	ldr	r3, [pc, #8]	; (80a15c4 <siprintf+0xc>)
 80a15bc:	681b      	ldr	r3, [r3, #0]
 80a15be:	691b      	ldr	r3, [r3, #16]
 80a15c0:	9301      	str	r3, [sp, #4]
 80a15c2:	bd08      	pop	{r3, pc}
 80a15c4:	080601a0 	.word	0x080601a0

080a15c8 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a15c8:	b508      	push	{r3, lr}
 80a15ca:	4b02      	ldr	r3, [pc, #8]	; (80a15d4 <siscanf+0xc>)
 80a15cc:	681b      	ldr	r3, [r3, #0]
 80a15ce:	699b      	ldr	r3, [r3, #24]
 80a15d0:	9301      	str	r3, [sp, #4]
 80a15d2:	bd08      	pop	{r3, pc}
 80a15d4:	080601a0 	.word	0x080601a0

080a15d8 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a15d8:	b508      	push	{r3, lr}
 80a15da:	4b02      	ldr	r3, [pc, #8]	; (80a15e4 <snprintf+0xc>)
 80a15dc:	681b      	ldr	r3, [r3, #0]
 80a15de:	69db      	ldr	r3, [r3, #28]
 80a15e0:	9301      	str	r3, [sp, #4]
 80a15e2:	bd08      	pop	{r3, pc}
 80a15e4:	080601a0 	.word	0x080601a0

080a15e8 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 80a15e8:	b508      	push	{r3, lr}
 80a15ea:	4b02      	ldr	r3, [pc, #8]	; (80a15f4 <sniprintf+0xc>)
 80a15ec:	681b      	ldr	r3, [r3, #0]
 80a15ee:	6a1b      	ldr	r3, [r3, #32]
 80a15f0:	9301      	str	r3, [sp, #4]
 80a15f2:	bd08      	pop	{r3, pc}
 80a15f4:	080601a0 	.word	0x080601a0

080a15f8 <abort>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a15f8:	b508      	push	{r3, lr}
 80a15fa:	4b02      	ldr	r3, [pc, #8]	; (80a1604 <abort+0xc>)
 80a15fc:	681b      	ldr	r3, [r3, #0]
 80a15fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1600:	9301      	str	r3, [sp, #4]
 80a1602:	bd08      	pop	{r3, pc}
 80a1604:	080601a0 	.word	0x080601a0

080a1608 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a1608:	b508      	push	{r3, lr}
 80a160a:	4b02      	ldr	r3, [pc, #8]	; (80a1614 <_malloc_r+0xc>)
 80a160c:	681b      	ldr	r3, [r3, #0]
 80a160e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1610:	9301      	str	r3, [sp, #4]
 80a1612:	bd08      	pop	{r3, pc}
 80a1614:	080601a0 	.word	0x080601a0

080a1618 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a1618:	b508      	push	{r3, lr}
 80a161a:	4b02      	ldr	r3, [pc, #8]	; (80a1624 <__errno+0xc>)
 80a161c:	681b      	ldr	r3, [r3, #0]
 80a161e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1620:	9301      	str	r3, [sp, #4]
 80a1622:	bd08      	pop	{r3, pc}
 80a1624:	080601a0 	.word	0x080601a0

080a1628 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 80a1628:	b508      	push	{r3, lr}
 80a162a:	4b02      	ldr	r3, [pc, #8]	; (80a1634 <__assert_func+0xc>)
 80a162c:	681b      	ldr	r3, [r3, #0]
 80a162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1630:	9301      	str	r3, [sp, #4]
 80a1632:	bd08      	pop	{r3, pc}
 80a1634:	080601a0 	.word	0x080601a0

080a1638 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a1638:	b508      	push	{r3, lr}
 80a163a:	4b02      	ldr	r3, [pc, #8]	; (80a1644 <newlib_impure_ptr_callback+0xc>)
 80a163c:	681b      	ldr	r3, [r3, #0]
 80a163e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1640:	9301      	str	r3, [sp, #4]
 80a1642:	bd08      	pop	{r3, pc}
 80a1644:	080601a0 	.word	0x080601a0

080a1648 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a1648:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a164a:	2600      	movs	r6, #0
 80a164c:	4604      	mov	r4, r0
 80a164e:	460d      	mov	r5, r1
 80a1650:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a1654:	f7ff fdd2 	bl	80a11fc <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a1658:	4628      	mov	r0, r5
    _spi = spi;
 80a165a:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a165c:	f7ff fe58 	bl	80a1310 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a1660:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a1662:	6066      	str	r6, [r4, #4]
}
 80a1664:	bd70      	pop	{r4, r5, r6, pc}

080a1666 <_ZN5Servo17writeMicrosecondsEt>:
    /**
     * @brief Check if this instance is attached to a servo.
     * @return true if this instance is attached to a servo, false otherwise.
     * @see Servo::attachedPin()
     */
    bool attached() const { return this->pin != NOT_ATTACHED; }
 80a1666:	f9b0 2000 	ldrsh.w	r2, [r0]
  // write(179).
  return a == this->minAngle || a == this->maxAngle ? a : a + 1;
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{
 80a166a:	460b      	mov	r3, r1

  if (!this->attached())
 80a166c:	1c51      	adds	r1, r2, #1
 80a166e:	d00a      	beq.n	80a1686 <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
 80a1670:	8841      	ldrh	r1, [r0, #2]
 80a1672:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
 80a1674:	4299      	cmp	r1, r3
 80a1676:	d803      	bhi.n	80a1680 <_ZN5Servo17writeMicrosecondsEt+0x1a>
 80a1678:	4298      	cmp	r0, r3
 80a167a:	4601      	mov	r1, r0
 80a167c:	bf28      	it	cs
 80a167e:	4619      	movcs	r1, r3

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
 80a1680:	b290      	uxth	r0, r2
 80a1682:	f7ff be65 	b.w	80a1350 <HAL_Servo_Write_Pulse_Width>
}
 80a1686:	4770      	bx	lr

080a1688 <_ZN5Servo5writeEi>:
{
 80a1688:	b513      	push	{r0, r1, r4, lr}
 80a168a:	4604      	mov	r4, r0
 80a168c:	4608      	mov	r0, r1
 80a168e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80a1692:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80a1696:	4288      	cmp	r0, r1
 80a1698:	db10      	blt.n	80a16bc <_ZN5Servo5writeEi+0x34>
 80a169a:	4290      	cmp	r0, r2
 80a169c:	bfa8      	it	ge
 80a169e:	4610      	movge	r0, r2
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
 80a16a0:	88a3      	ldrh	r3, [r4, #4]
 80a16a2:	9300      	str	r3, [sp, #0]
 80a16a4:	8863      	ldrh	r3, [r4, #2]
 80a16a6:	f000 fc0d 	bl	80a1ec4 <_Z3mapiiiii>
 80a16aa:	68e1      	ldr	r1, [r4, #12]
 80a16ac:	4401      	add	r1, r0
 80a16ae:	4620      	mov	r0, r4
 80a16b0:	b289      	uxth	r1, r1
}
 80a16b2:	b002      	add	sp, #8
 80a16b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
 80a16b8:	f7ff bfd5 	b.w	80a1666 <_ZN5Servo17writeMicrosecondsEt>
 80a16bc:	4608      	mov	r0, r1
 80a16be:	e7ef      	b.n	80a16a0 <_ZN5Servo5writeEi+0x18>

080a16c0 <_ZN5Servo11resetFieldsEv>:
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
 80a16c0:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80a16c4:	4a03      	ldr	r2, [pc, #12]	; (80a16d4 <_ZN5Servo11resetFieldsEv+0x14>)
 80a16c6:	e9c0 2300 	strd	r2, r3, [r0]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
 80a16ca:	23b4      	movs	r3, #180	; 0xb4
 80a16cc:	8103      	strh	r3, [r0, #8]
  this->trim = 0;
 80a16ce:	2300      	movs	r3, #0
 80a16d0:	60c3      	str	r3, [r0, #12]
}
 80a16d2:	4770      	bx	lr
 80a16d4:	0220ffff 	.word	0x0220ffff

080a16d8 <_ZN5ServoC1Ev>:
Servo::Servo()
 80a16d8:	b508      	push	{r3, lr}
  this->resetFields();
 80a16da:	f7ff fff1 	bl	80a16c0 <_ZN5Servo11resetFieldsEv>
}
 80a16de:	bd08      	pop	{r3, pc}

080a16e0 <_ZN5Servo6detachEv>:
{
 80a16e0:	b510      	push	{r4, lr}
 80a16e2:	4604      	mov	r4, r0
 80a16e4:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
 80a16e8:	1c43      	adds	r3, r0, #1
 80a16ea:	d007      	beq.n	80a16fc <_ZN5Servo6detachEv+0x1c>
  HAL_Servo_Detach(this->pin);
 80a16ec:	b280      	uxth	r0, r0
 80a16ee:	f7ff fe27 	bl	80a1340 <HAL_Servo_Detach>
  this->resetFields();
 80a16f2:	4620      	mov	r0, r4
 80a16f4:	f7ff ffe4 	bl	80a16c0 <_ZN5Servo11resetFieldsEv>
  return true;
 80a16f8:	2001      	movs	r0, #1
}
 80a16fa:	bd10      	pop	{r4, pc}
    return false;
 80a16fc:	2000      	movs	r0, #0
 80a16fe:	e7fc      	b.n	80a16fa <_ZN5Servo6detachEv+0x1a>

080a1700 <_ZN5Servo6attachEtttss>:
{
 80a1700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1704:	460d      	mov	r5, r1
 80a1706:	4604      	mov	r4, r0
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
 80a1708:	2102      	movs	r1, #2
 80a170a:	4628      	mov	r0, r5
{
 80a170c:	4690      	mov	r8, r2
 80a170e:	461f      	mov	r7, r3
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
 80a1710:	f7ff fcf4 	bl	80a10fc <HAL_Validate_Pin_Function>
 80a1714:	2802      	cmp	r0, #2
 80a1716:	d003      	beq.n	80a1720 <_ZN5Servo6attachEtttss+0x20>
    return false;
 80a1718:	2600      	movs	r6, #0
}
 80a171a:	4630      	mov	r0, r6
 80a171c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pinAvailable(pin))
 80a1720:	4628      	mov	r0, r5
 80a1722:	f001 fa79 	bl	80a2c18 <pinAvailable>
 80a1726:	4606      	mov	r6, r0
 80a1728:	2800      	cmp	r0, #0
 80a172a:	d0f5      	beq.n	80a1718 <_ZN5Servo6attachEtttss+0x18>
  if (this->attached())
 80a172c:	f9b4 3000 	ldrsh.w	r3, [r4]
 80a1730:	3301      	adds	r3, #1
 80a1732:	d002      	beq.n	80a173a <_ZN5Servo6attachEtttss+0x3a>
    this->detach();
 80a1734:	4620      	mov	r0, r4
 80a1736:	f7ff ffd3 	bl	80a16e0 <_ZN5Servo6detachEv>
  this->minAngle = minAngle;
 80a173a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
  HAL_Servo_Attach(this->pin);
 80a173e:	4628      	mov	r0, r5
  this->minAngle = minAngle;
 80a1740:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
 80a1742:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  this->pin = pin;
 80a1746:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
 80a1748:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
 80a174c:	80a7      	strh	r7, [r4, #4]
  this->maxAngle = maxAngle;
 80a174e:	8123      	strh	r3, [r4, #8]
  HAL_Servo_Attach(this->pin);
 80a1750:	f7ff fdee 	bl	80a1330 <HAL_Servo_Attach>
  return true;
 80a1754:	e7e1      	b.n	80a171a <_ZN5Servo6attachEtttss+0x1a>
	...

080a1758 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a1758:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a175a:	2000      	movs	r0, #0
 80a175c:	4b04      	ldr	r3, [pc, #16]	; (80a1770 <_GLOBAL__sub_I_System+0x18>)
 80a175e:	601a      	str	r2, [r3, #0]
 80a1760:	4b04      	ldr	r3, [pc, #16]	; (80a1774 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a1762:	4a05      	ldr	r2, [pc, #20]	; (80a1778 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a1764:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 80a1768:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a176a:	f7ff be39 	b.w	80a13e0 <set_system_mode>
 80a176e:	bf00      	nop
 80a1770:	2000038c 	.word	0x2000038c
 80a1774:	20000380 	.word	0x20000380
 80a1778:	ffff0000 	.word	0xffff0000

080a177c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a177c:	b510      	push	{r4, lr}
 80a177e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a1780:	f003 fa6e 	bl	80a4c60 <strlen>
 80a1784:	1e43      	subs	r3, r0, #1
 80a1786:	4620      	mov	r0, r4
 80a1788:	4423      	add	r3, r4
	while(i<j){
 80a178a:	4283      	cmp	r3, r0
 80a178c:	d906      	bls.n	80a179c <_Z11str_reversePc+0x20>
		c = *i;
 80a178e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a1790:	7819      	ldrb	r1, [r3, #0]
 80a1792:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a1796:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 80a179a:	e7f6      	b.n	80a178a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 80a179c:	bd10      	pop	{r4, pc}

080a179e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a179e:	b570      	push	{r4, r5, r6, lr}
 80a17a0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a17a2:	1e91      	subs	r1, r2, #2
 80a17a4:	2922      	cmp	r1, #34	; 0x22
 80a17a6:	d81d      	bhi.n	80a17e4 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
 80a17a8:	4625      	mov	r5, r4

	div_t result;
	while(a){
 80a17aa:	b930      	cbnz	r0, 80a17ba <ultoa+0x1c>
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 80a17ac:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
 80a17ae:	4423      	add	r3, r4
 80a17b0:	429d      	cmp	r5, r3
 80a17b2:	d210      	bcs.n	80a17d6 <ultoa+0x38>
            *ptr++ = '0';
 80a17b4:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
 80a17b8:	e7fa      	b.n	80a17b0 <ultoa+0x12>
            result.quot = a/radix;
 80a17ba:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a17be:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a17c2:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a17c4:	2809      	cmp	r0, #9
                *ptr += '0';
 80a17c6:	bf94      	ite	ls
 80a17c8:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
 80a17ca:	3157      	addhi	r1, #87	; 0x57
 80a17cc:	b2c9      	uxtb	r1, r1
            a = result.quot;
 80a17ce:	4630      	mov	r0, r6
 80a17d0:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 80a17d4:	e7e9      	b.n	80a17aa <ultoa+0xc>

	*ptr = '\0';
 80a17d6:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a17d8:	4620      	mov	r0, r4
	*ptr = '\0';
 80a17da:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
 80a17dc:	f7ff ffce 	bl	80a177c <_Z11str_reversePc>
	return buffer;
 80a17e0:	4620      	mov	r0, r4
}
 80a17e2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 80a17e4:	2000      	movs	r0, #0
 80a17e6:	e7fc      	b.n	80a17e2 <ultoa+0x44>

080a17e8 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a17e8:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80a17ea:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a17ec:	460c      	mov	r4, r1
 80a17ee:	4615      	mov	r5, r2
	if(a<0){
 80a17f0:	da0d      	bge.n	80a180e <itoa+0x26>
		*buffer = '-';
 80a17f2:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a17f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a17f8:	bf0c      	ite	eq
 80a17fa:	4618      	moveq	r0, r3
 80a17fc:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80a17fe:	2301      	movs	r3, #1
		*buffer = '-';
 80a1800:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 80a1802:	462a      	mov	r2, r5
 80a1804:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 80a1806:	f7ff ffca 	bl	80a179e <ultoa>
	}
	return buffer;
}
 80a180a:	4620      	mov	r0, r4
 80a180c:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 80a180e:	2301      	movs	r3, #1
 80a1810:	e7f9      	b.n	80a1806 <itoa+0x1e>

080a1812 <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
 80a1812:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
 80a1814:	2301      	movs	r3, #1
 80a1816:	f7ff ffc2 	bl	80a179e <ultoa>
}
 80a181a:	bd08      	pop	{r3, pc}

080a181c <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80a181c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1820:	4607      	mov	r7, r0
 80a1822:	460d      	mov	r5, r1
 80a1824:	4616      	mov	r6, r2
 80a1826:	461c      	mov	r4, r3
    bool negative = val<0;
    if (negative) {
 80a1828:	2200      	movs	r2, #0
 80a182a:	2300      	movs	r3, #0
 80a182c:	4638      	mov	r0, r7
 80a182e:	4629      	mov	r1, r5
 80a1830:	f001 ff62 	bl	80a36f8 <__aeabi_dcmplt>
 80a1834:	b120      	cbz	r0, 80a1840 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80a1836:	232d      	movs	r3, #45	; 0x2d
        val = -val;
 80a1838:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80a183c:	f804 3b01 	strb.w	r3, [r4], #1
 80a1840:	2300      	movs	r3, #0
    }
    long scale = 1;
 80a1842:	f04f 0a01 	mov.w	sl, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80a1846:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
 80a1848:	b2d9      	uxtb	r1, r3
 80a184a:	428e      	cmp	r6, r1
 80a184c:	d903      	bls.n	80a1856 <_Z4dtoadhPc+0x3a>
        scale *= 10;
 80a184e:	fb02 fa0a 	mul.w	sl, r2, sl
    for (uint8_t i=0; i<prec; i++)
 80a1852:	3301      	adds	r3, #1
 80a1854:	e7f8      	b.n	80a1848 <_Z4dtoadhPc+0x2c>
    val *= scale;   // capture all the significant digits
 80a1856:	4650      	mov	r0, sl
 80a1858:	f001 fc72 	bl	80a3140 <__aeabi_i2d>
 80a185c:	463a      	mov	r2, r7
 80a185e:	462b      	mov	r3, r5
 80a1860:	f001 fcd8 	bl	80a3214 <__aeabi_dmul>
 80a1864:	4680      	mov	r8, r0
 80a1866:	4689      	mov	r9, r1
    uint64_t fixed = uint64_t(val);
 80a1868:	f002 f9a2 	bl	80a3bb0 <__aeabi_d2ulz>
 80a186c:	460f      	mov	r7, r1
 80a186e:	4605      	mov	r5, r0
 80a1870:	468b      	mov	fp, r1
    if ((val-fixed)>=0.5)    // round last digit
 80a1872:	f001 fc99 	bl	80a31a8 <__aeabi_ul2d>
 80a1876:	4602      	mov	r2, r0
 80a1878:	460b      	mov	r3, r1
 80a187a:	4640      	mov	r0, r8
 80a187c:	4649      	mov	r1, r9
 80a187e:	f001 fb11 	bl	80a2ea4 <__aeabi_dsub>
 80a1882:	2200      	movs	r2, #0
 80a1884:	4b12      	ldr	r3, [pc, #72]	; (80a18d0 <_Z4dtoadhPc+0xb4>)
 80a1886:	f001 ff4b 	bl	80a3720 <__aeabi_dcmpge>
 80a188a:	b110      	cbz	r0, 80a1892 <_Z4dtoadhPc+0x76>
        fixed++;
 80a188c:	3501      	adds	r5, #1
 80a188e:	f147 0b00 	adc.w	fp, r7, #0

    unsigned long first = (unsigned long)(fixed / scale);
 80a1892:	4652      	mov	r2, sl
 80a1894:	4628      	mov	r0, r5
 80a1896:	4659      	mov	r1, fp
 80a1898:	17d3      	asrs	r3, r2, #31
 80a189a:	f002 f971 	bl	80a3b80 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 80a189e:	2301      	movs	r3, #1
 80a18a0:	4615      	mov	r5, r2
 80a18a2:	4621      	mov	r1, r4
 80a18a4:	220a      	movs	r2, #10
 80a18a6:	f7ff ff7a 	bl	80a179e <ultoa>
    if (prec) {
 80a18aa:	b176      	cbz	r6, 80a18ca <_Z4dtoadhPc+0xae>
        sout += strlen(sout);
 80a18ac:	4620      	mov	r0, r4
 80a18ae:	f003 f9d7 	bl	80a4c60 <strlen>
        *sout++ = '.';
 80a18b2:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
 80a18b4:	1821      	adds	r1, r4, r0
        *sout++ = '.';
 80a18b6:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
 80a18b8:	220a      	movs	r2, #10
 80a18ba:	4633      	mov	r3, r6
 80a18bc:	4628      	mov	r0, r5
 80a18be:	3101      	adds	r1, #1
    }
}
 80a18c0:	b001      	add	sp, #4
 80a18c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ultoa(second, sout, 10, prec);
 80a18c6:	f7ff bf6a 	b.w	80a179e <ultoa>
}
 80a18ca:	b001      	add	sp, #4
 80a18cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a18d0:	3fe00000 	.word	0x3fe00000

080a18d4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a18d4:	b510      	push	{r4, lr}
 80a18d6:	4604      	mov	r4, r0
{
	free(buffer);
 80a18d8:	6800      	ldr	r0, [r0, #0]
 80a18da:	f7ff fe5d 	bl	80a1598 <free>
}
 80a18de:	4620      	mov	r0, r4
 80a18e0:	bd10      	pop	{r4, pc}

080a18e2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a18e2:	b510      	push	{r4, lr}
 80a18e4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a18e6:	6800      	ldr	r0, [r0, #0]
 80a18e8:	b108      	cbz	r0, 80a18ee <_ZN6String10invalidateEv+0xc>
 80a18ea:	f7ff fe55 	bl	80a1598 <free>
	buffer = NULL;
 80a18ee:	2300      	movs	r3, #0
	capacity = len = 0;
 80a18f0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a18f4:	6023      	str	r3, [r4, #0]
}
 80a18f6:	bd10      	pop	{r4, pc}

080a18f8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a18f8:	b538      	push	{r3, r4, r5, lr}
 80a18fa:	4604      	mov	r4, r0
 80a18fc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a18fe:	6800      	ldr	r0, [r0, #0]
 80a1900:	3101      	adds	r1, #1
 80a1902:	f7ff fe51 	bl	80a15a8 <realloc>
	if (newbuffer) {
 80a1906:	b110      	cbz	r0, 80a190e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1908:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a190c:	2001      	movs	r0, #1
	}
	return 0;
}
 80a190e:	bd38      	pop	{r3, r4, r5, pc}

080a1910 <_ZN6String7reserveEj>:
{
 80a1910:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1912:	6803      	ldr	r3, [r0, #0]
{
 80a1914:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1916:	b123      	cbz	r3, 80a1922 <_ZN6String7reserveEj+0x12>
 80a1918:	6843      	ldr	r3, [r0, #4]
 80a191a:	428b      	cmp	r3, r1
 80a191c:	d301      	bcc.n	80a1922 <_ZN6String7reserveEj+0x12>
 80a191e:	2001      	movs	r0, #1
}
 80a1920:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a1922:	4620      	mov	r0, r4
 80a1924:	f7ff ffe8 	bl	80a18f8 <_ZN6String12changeBufferEj>
 80a1928:	2800      	cmp	r0, #0
 80a192a:	d0f9      	beq.n	80a1920 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a192c:	68a3      	ldr	r3, [r4, #8]
 80a192e:	2b00      	cmp	r3, #0
 80a1930:	d1f5      	bne.n	80a191e <_ZN6String7reserveEj+0xe>
 80a1932:	6822      	ldr	r2, [r4, #0]
 80a1934:	7013      	strb	r3, [r2, #0]
 80a1936:	e7f2      	b.n	80a191e <_ZN6String7reserveEj+0xe>

080a1938 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1938:	b570      	push	{r4, r5, r6, lr}
 80a193a:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a193c:	4611      	mov	r1, r2
{
 80a193e:	4604      	mov	r4, r0
 80a1940:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1942:	f7ff ffe5 	bl	80a1910 <_ZN6String7reserveEj>
 80a1946:	b920      	cbnz	r0, 80a1952 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a1948:	4620      	mov	r0, r4
 80a194a:	f7ff ffca 	bl	80a18e2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a194e:	4620      	mov	r0, r4
 80a1950:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a1952:	462a      	mov	r2, r5
 80a1954:	4631      	mov	r1, r6
 80a1956:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a1958:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a195a:	f002 fbd9 	bl	80a4110 <memcpy>
	buffer[len] = 0;
 80a195e:	2100      	movs	r1, #0
 80a1960:	6822      	ldr	r2, [r4, #0]
 80a1962:	68a3      	ldr	r3, [r4, #8]
 80a1964:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a1966:	e7f2      	b.n	80a194e <_ZN6String4copyEPKcj+0x16>

080a1968 <_ZN6StringC1EPK19__FlashStringHelper>:
String::String(const __FlashStringHelper *pstr)
 80a1968:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a196a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 80a196c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a196e:	460d      	mov	r5, r1
	capacity = 0;
 80a1970:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a1974:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1976:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a1978:	b139      	cbz	r1, 80a198a <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 80a197a:	4608      	mov	r0, r1
 80a197c:	f003 f970 	bl	80a4c60 <strlen>
 80a1980:	4629      	mov	r1, r5
 80a1982:	4602      	mov	r2, r0
 80a1984:	4620      	mov	r0, r4
 80a1986:	f7ff ffd7 	bl	80a1938 <_ZN6String4copyEPKcj>
}
 80a198a:	4620      	mov	r0, r4
 80a198c:	bd38      	pop	{r3, r4, r5, pc}

080a198e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a198e:	b538      	push	{r3, r4, r5, lr}
 80a1990:	4605      	mov	r5, r0
	if (buffer) {
 80a1992:	6800      	ldr	r0, [r0, #0]
{
 80a1994:	460c      	mov	r4, r1
	if (buffer) {
 80a1996:	b168      	cbz	r0, 80a19b4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 80a1998:	686a      	ldr	r2, [r5, #4]
 80a199a:	688b      	ldr	r3, [r1, #8]
 80a199c:	429a      	cmp	r2, r3
 80a199e:	d307      	bcc.n	80a19b0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 80a19a0:	6809      	ldr	r1, [r1, #0]
 80a19a2:	f002 fc03 	bl	80a41ac <strcpy>
			len = rhs.len;
 80a19a6:	68a3      	ldr	r3, [r4, #8]
 80a19a8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a19aa:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 80a19ac:	60a3      	str	r3, [r4, #8]
}
 80a19ae:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 80a19b0:	f7ff fdf2 	bl	80a1598 <free>
	buffer = rhs.buffer;
 80a19b4:	6823      	ldr	r3, [r4, #0]
 80a19b6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a19b8:	6863      	ldr	r3, [r4, #4]
 80a19ba:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a19bc:	68a3      	ldr	r3, [r4, #8]
 80a19be:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a19c0:	2300      	movs	r3, #0
	rhs.capacity = 0;
 80a19c2:	e9c4 3300 	strd	r3, r3, [r4]
 80a19c6:	e7f1      	b.n	80a19ac <_ZN6String4moveERS_+0x1e>

080a19c8 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a19c8:	4288      	cmp	r0, r1
{
 80a19ca:	b510      	push	{r4, lr}
 80a19cc:	460b      	mov	r3, r1
 80a19ce:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a19d0:	d004      	beq.n	80a19dc <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a19d2:	6809      	ldr	r1, [r1, #0]
 80a19d4:	b121      	cbz	r1, 80a19e0 <_ZN6StringaSERKS_+0x18>
 80a19d6:	689a      	ldr	r2, [r3, #8]
 80a19d8:	f7ff ffae 	bl	80a1938 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a19dc:	4620      	mov	r0, r4
 80a19de:	bd10      	pop	{r4, pc}
	else invalidate();
 80a19e0:	f7ff ff7f 	bl	80a18e2 <_ZN6String10invalidateEv>
 80a19e4:	e7fa      	b.n	80a19dc <_ZN6StringaSERKS_+0x14>

080a19e6 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a19e6:	2300      	movs	r3, #0
String::String(const String &value)
 80a19e8:	b510      	push	{r4, lr}
 80a19ea:	4604      	mov	r4, r0
	capacity = 0;
 80a19ec:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a19f0:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a19f2:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a19f4:	f7ff ffe8 	bl	80a19c8 <_ZN6StringaSERKS_>
}
 80a19f8:	4620      	mov	r0, r4
 80a19fa:	bd10      	pop	{r4, pc}

080a19fc <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a19fc:	4288      	cmp	r0, r1
{
 80a19fe:	b510      	push	{r4, lr}
 80a1a00:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a1a02:	d001      	beq.n	80a1a08 <_ZN6StringaSEOS_+0xc>
 80a1a04:	f7ff ffc3 	bl	80a198e <_ZN6String4moveERS_>
	return *this;
}
 80a1a08:	4620      	mov	r0, r4
 80a1a0a:	bd10      	pop	{r4, pc}

080a1a0c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a1a0c:	b538      	push	{r3, r4, r5, lr}
 80a1a0e:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1a10:	460c      	mov	r4, r1
 80a1a12:	b149      	cbz	r1, 80a1a28 <_ZN6StringaSEPKc+0x1c>
 80a1a14:	4608      	mov	r0, r1
 80a1a16:	f003 f923 	bl	80a4c60 <strlen>
 80a1a1a:	4621      	mov	r1, r4
 80a1a1c:	4602      	mov	r2, r0
 80a1a1e:	4628      	mov	r0, r5
 80a1a20:	f7ff ff8a 	bl	80a1938 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a1a24:	4628      	mov	r0, r5
 80a1a26:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a1a28:	f7ff ff5b 	bl	80a18e2 <_ZN6String10invalidateEv>
 80a1a2c:	e7fa      	b.n	80a1a24 <_ZN6StringaSEPKc+0x18>

080a1a2e <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
 80a1a2e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a1a30:	4604      	mov	r4, r0
	buffer = NULL;
 80a1a32:	2300      	movs	r3, #0
String::String(unsigned char value, unsigned char base)
 80a1a34:	4608      	mov	r0, r1
	capacity = 0;
 80a1a36:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a1a3a:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a1a3c:	7323      	strb	r3, [r4, #12]
	utoa(value, buf, base);
 80a1a3e:	a901      	add	r1, sp, #4
 80a1a40:	f7ff fee7 	bl	80a1812 <utoa>
	*this = buf;
 80a1a44:	4620      	mov	r0, r4
 80a1a46:	a901      	add	r1, sp, #4
 80a1a48:	f7ff ffe0 	bl	80a1a0c <_ZN6StringaSEPKc>
}
 80a1a4c:	4620      	mov	r0, r4
 80a1a4e:	b004      	add	sp, #16
 80a1a50:	bd10      	pop	{r4, pc}

080a1a52 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 80a1a52:	b510      	push	{r4, lr}
	buffer = NULL;
 80a1a54:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
 80a1a56:	4604      	mov	r4, r0
 80a1a58:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 80a1a5a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a1a5e:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a1a60:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
 80a1a62:	4608      	mov	r0, r1
	itoa(value, buf, base);
 80a1a64:	a901      	add	r1, sp, #4
 80a1a66:	f7ff febf 	bl	80a17e8 <itoa>
	*this = buf;
 80a1a6a:	4620      	mov	r0, r4
 80a1a6c:	a901      	add	r1, sp, #4
 80a1a6e:	f7ff ffcd 	bl	80a1a0c <_ZN6StringaSEPKc>
}
 80a1a72:	4620      	mov	r0, r4
 80a1a74:	b00a      	add	sp, #40	; 0x28
 80a1a76:	bd10      	pop	{r4, pc}

080a1a78 <_ZN6StringC1Efi>:
	buffer = NULL;
 80a1a78:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
 80a1a7a:	b530      	push	{r4, r5, lr}
 80a1a7c:	4604      	mov	r4, r0
 80a1a7e:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
 80a1a80:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a1a84:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1a86:	7303      	strb	r3, [r0, #12]
	dtoa(value, decimalPlaces, buf);
 80a1a88:	b2d5      	uxtb	r5, r2
 80a1a8a:	4608      	mov	r0, r1
 80a1a8c:	f001 fb6a 	bl	80a3164 <__aeabi_f2d>
 80a1a90:	462a      	mov	r2, r5
 80a1a92:	ab01      	add	r3, sp, #4
 80a1a94:	f7ff fec2 	bl	80a181c <_Z4dtoadhPc>
        *this = buf;
 80a1a98:	4620      	mov	r0, r4
 80a1a9a:	a901      	add	r1, sp, #4
 80a1a9c:	f7ff ffb6 	bl	80a1a0c <_ZN6StringaSEPKc>
}
 80a1aa0:	4620      	mov	r0, r4
 80a1aa2:	b00b      	add	sp, #44	; 0x2c
 80a1aa4:	bd30      	pop	{r4, r5, pc}

080a1aa6 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a1aa6:	b570      	push	{r4, r5, r6, lr}
 80a1aa8:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a1aaa:	460e      	mov	r6, r1
 80a1aac:	b909      	cbnz	r1, 80a1ab2 <_ZN6String6concatEPKcj+0xc>
 80a1aae:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a1ab0:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a1ab2:	b16a      	cbz	r2, 80a1ad0 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a1ab4:	6884      	ldr	r4, [r0, #8]
 80a1ab6:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a1ab8:	4621      	mov	r1, r4
 80a1aba:	f7ff ff29 	bl	80a1910 <_ZN6String7reserveEj>
 80a1abe:	2800      	cmp	r0, #0
 80a1ac0:	d0f5      	beq.n	80a1aae <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a1ac2:	6828      	ldr	r0, [r5, #0]
 80a1ac4:	68ab      	ldr	r3, [r5, #8]
 80a1ac6:	4631      	mov	r1, r6
 80a1ac8:	4418      	add	r0, r3
 80a1aca:	f002 fb6f 	bl	80a41ac <strcpy>
	len = newlen;
 80a1ace:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a1ad0:	2001      	movs	r0, #1
 80a1ad2:	e7ed      	b.n	80a1ab0 <_ZN6String6concatEPKcj+0xa>

080a1ad4 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
 80a1ad4:	688a      	ldr	r2, [r1, #8]
 80a1ad6:	6809      	ldr	r1, [r1, #0]
 80a1ad8:	f7ff bfe5 	b.w	80a1aa6 <_ZN6String6concatEPKcj>

080a1adc <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
 80a1adc:	b538      	push	{r3, r4, r5, lr}
 80a1ade:	4605      	mov	r5, r0
	if (!cstr) return 0;
 80a1ae0:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 80a1ae2:	4608      	mov	r0, r1
	if (!cstr) return 0;
 80a1ae4:	b141      	cbz	r1, 80a1af8 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 80a1ae6:	f003 f8bb 	bl	80a4c60 <strlen>
 80a1aea:	4621      	mov	r1, r4
 80a1aec:	4602      	mov	r2, r0
 80a1aee:	4628      	mov	r0, r5
}
 80a1af0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return concat(cstr, strlen(cstr));
 80a1af4:	f7ff bfd7 	b.w	80a1aa6 <_ZN6String6concatEPKcj>
}
 80a1af8:	bd38      	pop	{r3, r4, r5, pc}

080a1afa <_ZN6String6concatEi>:
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
 80a1afa:	b513      	push	{r0, r1, r4, lr}
	char buf[7];
	itoa(num, buf, 10);
 80a1afc:	220a      	movs	r2, #10
{
 80a1afe:	4604      	mov	r4, r0
 80a1b00:	4608      	mov	r0, r1
	itoa(num, buf, 10);
 80a1b02:	4669      	mov	r1, sp
 80a1b04:	f7ff fe70 	bl	80a17e8 <itoa>
	return concat(buf, strlen(buf));
 80a1b08:	4668      	mov	r0, sp
 80a1b0a:	f003 f8a9 	bl	80a4c60 <strlen>
 80a1b0e:	4669      	mov	r1, sp
 80a1b10:	4602      	mov	r2, r0
 80a1b12:	4620      	mov	r0, r4
 80a1b14:	f7ff ffc7 	bl	80a1aa6 <_ZN6String6concatEPKcj>
}
 80a1b18:	b002      	add	sp, #8
 80a1b1a:	bd10      	pop	{r4, pc}

080a1b1c <_ZplRK15StringSumHelperPKc>:
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a1b1c:	b538      	push	{r3, r4, r5, lr}
 80a1b1e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a1b20:	460d      	mov	r5, r1
 80a1b22:	b921      	cbnz	r1, 80a1b2e <_ZplRK15StringSumHelperPKc+0x12>
 80a1b24:	4620      	mov	r0, r4
 80a1b26:	f7ff fedc 	bl	80a18e2 <_ZN6String10invalidateEv>
	return a;
}
 80a1b2a:	4620      	mov	r0, r4
 80a1b2c:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a1b2e:	4608      	mov	r0, r1
 80a1b30:	f003 f896 	bl	80a4c60 <strlen>
 80a1b34:	4629      	mov	r1, r5
 80a1b36:	4602      	mov	r2, r0
 80a1b38:	4620      	mov	r0, r4
 80a1b3a:	f7ff ffb4 	bl	80a1aa6 <_ZN6String6concatEPKcj>
 80a1b3e:	2800      	cmp	r0, #0
 80a1b40:	d0f0      	beq.n	80a1b24 <_ZplRK15StringSumHelperPKc+0x8>
 80a1b42:	e7f2      	b.n	80a1b2a <_ZplRK15StringSumHelperPKc+0xe>

080a1b44 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 80a1b44:	6883      	ldr	r3, [r0, #8]
 80a1b46:	428b      	cmp	r3, r1
 80a1b48:	d903      	bls.n	80a1b52 <_ZNK6StringixEj+0xe>
 80a1b4a:	6800      	ldr	r0, [r0, #0]
 80a1b4c:	b110      	cbz	r0, 80a1b54 <_ZNK6StringixEj+0x10>
	return buffer[index];
 80a1b4e:	5c40      	ldrb	r0, [r0, r1]
 80a1b50:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
 80a1b52:	2000      	movs	r0, #0
}
 80a1b54:	4770      	bx	lr

080a1b56 <_ZNK6String6charAtEj>:
	return operator[](loc);
 80a1b56:	f7ff bff5 	b.w	80a1b44 <_ZNK6StringixEj>
	...

080a1b5c <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a1b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1b5e:	461d      	mov	r5, r3
	if (left > right) {
 80a1b60:	429a      	cmp	r2, r3
 80a1b62:	bf88      	it	hi
 80a1b64:	4613      	movhi	r3, r2
{
 80a1b66:	460f      	mov	r7, r1
 80a1b68:	4614      	mov	r4, r2
	if (left > right) {
 80a1b6a:	bf88      	it	hi
 80a1b6c:	462c      	movhi	r4, r5
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a1b6e:	490b      	ldr	r1, [pc, #44]	; (80a1b9c <_ZNK6String9substringEjj+0x40>)
	if (left > right) {
 80a1b70:	bf88      	it	hi
 80a1b72:	461d      	movhi	r5, r3
{
 80a1b74:	4606      	mov	r6, r0
	String out;
 80a1b76:	f7ff fef7 	bl	80a1968 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
 80a1b7a:	68bb      	ldr	r3, [r7, #8]
 80a1b7c:	42a3      	cmp	r3, r4
 80a1b7e:	d30a      	bcc.n	80a1b96 <_ZNK6String9substringEjj+0x3a>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
 80a1b80:	6839      	ldr	r1, [r7, #0]
 80a1b82:	42ab      	cmp	r3, r5
 80a1b84:	bf94      	ite	ls
 80a1b86:	ebc4 0203 	rsbls	r2, r4, r3
 80a1b8a:	ebc4 0205 	rsbhi	r2, r4, r5
 80a1b8e:	4630      	mov	r0, r6
 80a1b90:	4421      	add	r1, r4
 80a1b92:	f7ff fed1 	bl	80a1938 <_ZN6String4copyEPKcj>
	return out;
}
 80a1b96:	4630      	mov	r0, r6
 80a1b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1b9a:	bf00      	nop
 80a1b9c:	080a76e0 	.word	0x080a76e0

080a1ba0 <_ZNK6String9substringEj>:
{
 80a1ba0:	b510      	push	{r4, lr}
 80a1ba2:	4604      	mov	r4, r0
	return substring(left, len);
 80a1ba4:	688b      	ldr	r3, [r1, #8]
 80a1ba6:	f7ff ffd9 	bl	80a1b5c <_ZNK6String9substringEjj>
}
 80a1baa:	4620      	mov	r0, r4
 80a1bac:	bd10      	pop	{r4, pc}

080a1bae <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a1bae:	6800      	ldr	r0, [r0, #0]
 80a1bb0:	b108      	cbz	r0, 80a1bb6 <_ZNK6String5toIntEv+0x8>
 80a1bb2:	f002 b9b6 	b.w	80a3f22 <atol>
	return 0;
}
 80a1bb6:	4770      	bx	lr

080a1bb8 <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
 80a1bb8:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
 80a1bba:	6800      	ldr	r0, [r0, #0]
 80a1bbc:	b120      	cbz	r0, 80a1bc8 <_ZNK6String7toFloatEv+0x10>
 80a1bbe:	f002 f9ad 	bl	80a3f1c <atof>
 80a1bc2:	f001 fe09 	bl	80a37d8 <__aeabi_d2f>
	return 0;
}
 80a1bc6:	bd08      	pop	{r3, pc}
	return 0;
 80a1bc8:	2000      	movs	r0, #0
 80a1bca:	e7fc      	b.n	80a1bc6 <_ZNK6String7toFloatEv+0xe>

080a1bcc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1bce:	4606      	mov	r6, r0
 80a1bd0:	460d      	mov	r5, r1
  size_t n = 0;
 80a1bd2:	2400      	movs	r4, #0
 80a1bd4:	188f      	adds	r7, r1, r2
  while (size--) {
 80a1bd6:	42bd      	cmp	r5, r7
 80a1bd8:	d00c      	beq.n	80a1bf4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1bda:	6833      	ldr	r3, [r6, #0]
 80a1bdc:	4630      	mov	r0, r6
 80a1bde:	689b      	ldr	r3, [r3, #8]
 80a1be0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1be4:	4798      	blx	r3
     if (chunk>=0)
 80a1be6:	1e03      	subs	r3, r0, #0
 80a1be8:	db01      	blt.n	80a1bee <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1bea:	441c      	add	r4, r3
  while (size--) {
 80a1bec:	e7f3      	b.n	80a1bd6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1bee:	2c00      	cmp	r4, #0
 80a1bf0:	bf08      	it	eq
 80a1bf2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1bf4:	4620      	mov	r0, r4
 80a1bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1bf8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1bf8:	b570      	push	{r4, r5, r6, lr}
 80a1bfa:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1bfc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1bfe:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a1c00:	b149      	cbz	r1, 80a1c16 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1c02:	f003 f82d 	bl	80a4c60 <strlen>
 80a1c06:	682b      	ldr	r3, [r5, #0]
 80a1c08:	4602      	mov	r2, r0
 80a1c0a:	4621      	mov	r1, r4
 80a1c0c:	4628      	mov	r0, r5
    }
 80a1c0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a1c12:	68db      	ldr	r3, [r3, #12]
 80a1c14:	4718      	bx	r3
    }
 80a1c16:	bd70      	pop	{r4, r5, r6, pc}

080a1c18 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1c18:	6803      	ldr	r3, [r0, #0]
 80a1c1a:	689b      	ldr	r3, [r3, #8]
 80a1c1c:	4718      	bx	r3

080a1c1e <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1c1e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1c20:	2a01      	cmp	r2, #1
 80a1c22:	bf98      	it	ls
 80a1c24:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1c26:	b530      	push	{r4, r5, lr}
 80a1c28:	b08b      	sub	sp, #44	; 0x2c
 80a1c2a:	460c      	mov	r4, r1
  *str = '\0';
 80a1c2c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a1c30:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a1c32:	4625      	mov	r5, r4
 80a1c34:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a1c38:	fb04 5312 	mls	r3, r4, r2, r5
 80a1c3c:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1c3e:	2b09      	cmp	r3, #9
 80a1c40:	bf94      	ite	ls
 80a1c42:	3330      	addls	r3, #48	; 0x30
 80a1c44:	3337      	addhi	r3, #55	; 0x37
 80a1c46:	b2db      	uxtb	r3, r3
  } while(n);
 80a1c48:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1c4a:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a1c4e:	d9f0      	bls.n	80a1c32 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a1c50:	f7ff ffd2 	bl	80a1bf8 <_ZN5Print5writeEPKc>
}
 80a1c54:	b00b      	add	sp, #44	; 0x2c
 80a1c56:	bd30      	pop	{r4, r5, pc}

080a1c58 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1c58:	4b01      	ldr	r3, [pc, #4]	; (80a1c60 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1c5a:	4a02      	ldr	r2, [pc, #8]	; (80a1c64 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1c5c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a1c5e:	4770      	bx	lr
 80a1c60:	20000390 	.word	0x20000390
 80a1c64:	080a7562 	.word	0x080a7562

080a1c68 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a1c68:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a1c6a:	2000      	movs	r0, #0
 80a1c6c:	f7ff fc7c 	bl	80a1568 <spark_sync_time_pending>
 80a1c70:	b128      	cbz	r0, 80a1c7e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1c72:	f7ff fc69 	bl	80a1548 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a1c76:	f080 0001 	eor.w	r0, r0, #1
 80a1c7a:	b2c0      	uxtb	r0, r0
    }
 80a1c7c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a1c7e:	2001      	movs	r0, #1
 80a1c80:	e7fc      	b.n	80a1c7c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

080a1c84 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a1c84:	b530      	push	{r4, r5, lr}
 80a1c86:	b093      	sub	sp, #76	; 0x4c
 80a1c88:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
 80a1c8c:	4b19      	ldr	r3, [pc, #100]	; (80a1cf4 <_ZN9TimeClass7timeStrEx+0x70>)
{
 80a1c8e:	4604      	mov	r4, r0
    t += time_zone_cache;
 80a1c90:	e9d3 1000 	ldrd	r1, r0, [r3]
 80a1c94:	9b01      	ldr	r3, [sp, #4]
 80a1c96:	1852      	adds	r2, r2, r1
 80a1c98:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
 80a1c9c:	4816      	ldr	r0, [pc, #88]	; (80a1cf8 <_ZN9TimeClass7timeStrEx+0x74>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 80a1c9e:	2500      	movs	r5, #0
    t += dst_current_cache;
 80a1ca0:	e9d0 1000 	ldrd	r1, r0, [r0]
 80a1ca4:	1852      	adds	r2, r2, r1
 80a1ca6:	eb43 0300 	adc.w	r3, r3, r0
 80a1caa:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 80a1cae:	2224      	movs	r2, #36	; 0x24
 80a1cb0:	2100      	movs	r1, #0
 80a1cb2:	eb0d 0002 	add.w	r0, sp, r2
 80a1cb6:	f002 fa39 	bl	80a412c <memset>
    localtime_r(&t, &calendar_time);
 80a1cba:	a909      	add	r1, sp, #36	; 0x24
 80a1cbc:	4668      	mov	r0, sp
 80a1cbe:	f002 f935 	bl	80a3f2c <localtime_r>
    char ascstr[26] = {};
 80a1cc2:	2216      	movs	r2, #22
 80a1cc4:	4629      	mov	r1, r5
 80a1cc6:	a803      	add	r0, sp, #12
 80a1cc8:	9502      	str	r5, [sp, #8]
 80a1cca:	f002 fa2f 	bl	80a412c <memset>
    asctime_r(&calendar_time, ascstr);
 80a1cce:	a902      	add	r1, sp, #8
 80a1cd0:	a809      	add	r0, sp, #36	; 0x24
 80a1cd2:	f002 f8f7 	bl	80a3ec4 <asctime_r>
    int len = strlen(ascstr);
 80a1cd6:	a802      	add	r0, sp, #8
 80a1cd8:	f002 ffc2 	bl	80a4c60 <strlen>
    ascstr[len-1] = 0; // remove final newline
 80a1cdc:	ab12      	add	r3, sp, #72	; 0x48
 80a1cde:	4418      	add	r0, r3
 80a1ce0:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 80a1ce4:	a902      	add	r1, sp, #8
 80a1ce6:	4620      	mov	r0, r4
 80a1ce8:	f7ff fe3e 	bl	80a1968 <_ZN6StringC1EPK19__FlashStringHelper>
}
 80a1cec:	4620      	mov	r0, r4
 80a1cee:	b013      	add	sp, #76	; 0x4c
 80a1cf0:	bd30      	pop	{r4, r5, pc}
 80a1cf2:	bf00      	nop
 80a1cf4:	200003a8 	.word	0x200003a8
 80a1cf8:	200003a0 	.word	0x200003a0

080a1cfc <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a1cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1d00:	b0a4      	sub	sp, #144	; 0x90
 80a1d02:	4607      	mov	r7, r0
 80a1d04:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a1d06:	a814      	add	r0, sp, #80	; 0x50
{
 80a1d08:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a1d0a:	223f      	movs	r2, #63	; 0x3f
{
 80a1d0c:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a1d0e:	f002 ffc3 	bl	80a4c98 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80a1d12:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80a1d14:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80a1d16:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80a1d1a:	f002 ffa1 	bl	80a4c60 <strlen>
 80a1d1e:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 80a1d20:	bb4c      	cbnz	r4, 80a1d76 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
 80a1d22:	4929      	ldr	r1, [pc, #164]	; (80a1dc8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
 80a1d24:	a803      	add	r0, sp, #12
 80a1d26:	f002 fa41 	bl	80a41ac <strcpy>
{
 80a1d2a:	2600      	movs	r6, #0
 80a1d2c:	ac14      	add	r4, sp, #80	; 0x50
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80a1d2e:	f105 39ff 	add.w	r9, r5, #4294967295
 80a1d32:	45b1      	cmp	r9, r6
 80a1d34:	d934      	bls.n	80a1da0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 80a1d36:	7823      	ldrb	r3, [r4, #0]
 80a1d38:	f106 0a01 	add.w	sl, r6, #1
 80a1d3c:	2b25      	cmp	r3, #37	; 0x25
 80a1d3e:	d117      	bne.n	80a1d70 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
 80a1d40:	7863      	ldrb	r3, [r4, #1]
 80a1d42:	2b7a      	cmp	r3, #122	; 0x7a
 80a1d44:	d114      	bne.n	80a1d70 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
 80a1d46:	a803      	add	r0, sp, #12
 80a1d48:	f002 ff8a 	bl	80a4c60 <strlen>
 80a1d4c:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 80a1d4e:	ab14      	add	r3, sp, #80	; 0x50
 80a1d50:	1830      	adds	r0, r6, r0
 80a1d52:	4418      	add	r0, r3
 80a1d54:	eba9 0206 	sub.w	r2, r9, r6
 80a1d58:	1ca1      	adds	r1, r4, #2
 80a1d5a:	f002 f9d9 	bl	80a4110 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 80a1d5e:	462a      	mov	r2, r5
 80a1d60:	a903      	add	r1, sp, #12
 80a1d62:	4620      	mov	r0, r4
 80a1d64:	f002 f9d4 	bl	80a4110 <memcpy>
            len = strlen(format_str);
 80a1d68:	a814      	add	r0, sp, #80	; 0x50
 80a1d6a:	f002 ff79 	bl	80a4c60 <strlen>
 80a1d6e:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
 80a1d70:	4656      	mov	r6, sl
 80a1d72:	3401      	adds	r4, #1
 80a1d74:	e7db      	b.n	80a1d2e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 80a1d76:	233c      	movs	r3, #60	; 0x3c
 80a1d78:	fb94 f2f3 	sdiv	r2, r4, r3
 80a1d7c:	2a00      	cmp	r2, #0
 80a1d7e:	bfb8      	it	lt
 80a1d80:	4252      	neglt	r2, r2
 80a1d82:	fbb2 f1f3 	udiv	r1, r2, r3
 80a1d86:	fb03 2211 	mls	r2, r3, r1, r2
 80a1d8a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a1d8e:	9200      	str	r2, [sp, #0]
 80a1d90:	fb94 f3f3 	sdiv	r3, r4, r3
 80a1d94:	2110      	movs	r1, #16
 80a1d96:	4a0d      	ldr	r2, [pc, #52]	; (80a1dcc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
 80a1d98:	a803      	add	r0, sp, #12
 80a1d9a:	f7ff fc1d 	bl	80a15d8 <snprintf>
 80a1d9e:	e7c4      	b.n	80a1d2a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
 80a1da0:	2100      	movs	r1, #0
 80a1da2:	222e      	movs	r2, #46	; 0x2e
 80a1da4:	a808      	add	r0, sp, #32
 80a1da6:	9107      	str	r1, [sp, #28]
 80a1da8:	f002 f9c0 	bl	80a412c <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
 80a1dac:	4643      	mov	r3, r8
 80a1dae:	aa14      	add	r2, sp, #80	; 0x50
 80a1db0:	2132      	movs	r1, #50	; 0x32
 80a1db2:	a807      	add	r0, sp, #28
 80a1db4:	f002 ff52 	bl	80a4c5c <strftime>
    return String(buf);
 80a1db8:	4638      	mov	r0, r7
 80a1dba:	a907      	add	r1, sp, #28
 80a1dbc:	f7ff fdd4 	bl	80a1968 <_ZN6StringC1EPK19__FlashStringHelper>
}
 80a1dc0:	4638      	mov	r0, r7
 80a1dc2:	b024      	add	sp, #144	; 0x90
 80a1dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1dc8:	080a7af1 	.word	0x080a7af1
 80a1dcc:	080a7566 	.word	0x080a7566

080a1dd0 <_ZN9TimeClass6formatExPKc>:
{
 80a1dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1dd2:	b08d      	sub	sp, #52	; 0x34
 80a1dd4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80a1dd6:	4604      	mov	r4, r0
 80a1dd8:	e9cd 2300 	strd	r2, r3, [sp]
    if (format_spec == nullptr)
 80a1ddc:	b915      	cbnz	r5, 80a1de4 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
 80a1dde:	4b19      	ldr	r3, [pc, #100]	; (80a1e44 <_ZN9TimeClass6formatExPKc+0x74>)
 80a1de0:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
 80a1de2:	b12d      	cbz	r5, 80a1df0 <_ZN9TimeClass6formatExPKc+0x20>
 80a1de4:	4b18      	ldr	r3, [pc, #96]	; (80a1e48 <_ZN9TimeClass6formatExPKc+0x78>)
 80a1de6:	4628      	mov	r0, r5
 80a1de8:	6819      	ldr	r1, [r3, #0]
 80a1dea:	f002 f9d5 	bl	80a4198 <strcmp>
 80a1dee:	b938      	cbnz	r0, 80a1e00 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
 80a1df0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a1df4:	4620      	mov	r0, r4
 80a1df6:	f7ff ff45 	bl	80a1c84 <_ZN9TimeClass7timeStrEx>
}
 80a1dfa:	4620      	mov	r0, r4
 80a1dfc:	b00d      	add	sp, #52	; 0x34
 80a1dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
 80a1e00:	9900      	ldr	r1, [sp, #0]
 80a1e02:	4e12      	ldr	r6, [pc, #72]	; (80a1e4c <_ZN9TimeClass6formatExPKc+0x7c>)
    t += dst_current_cache;
 80a1e04:	4f12      	ldr	r7, [pc, #72]	; (80a1e50 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
 80a1e06:	e9d6 3200 	ldrd	r3, r2, [r6]
 80a1e0a:	185b      	adds	r3, r3, r1
 80a1e0c:	9901      	ldr	r1, [sp, #4]
 80a1e0e:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
 80a1e12:	e9d7 0100 	ldrd	r0, r1, [r7]
 80a1e16:	181b      	adds	r3, r3, r0
 80a1e18:	eb42 0201 	adc.w	r2, r2, r1
 80a1e1c:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
 80a1e20:	2100      	movs	r1, #0
 80a1e22:	2224      	movs	r2, #36	; 0x24
 80a1e24:	a803      	add	r0, sp, #12
 80a1e26:	f002 f981 	bl	80a412c <memset>
    localtime_r(&t, &calendar_time);
 80a1e2a:	a903      	add	r1, sp, #12
 80a1e2c:	4668      	mov	r0, sp
 80a1e2e:	f002 f87d 	bl	80a3f2c <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
 80a1e32:	6832      	ldr	r2, [r6, #0]
 80a1e34:	683b      	ldr	r3, [r7, #0]
 80a1e36:	4620      	mov	r0, r4
 80a1e38:	4413      	add	r3, r2
 80a1e3a:	a903      	add	r1, sp, #12
 80a1e3c:	462a      	mov	r2, r5
 80a1e3e:	f7ff ff5d 	bl	80a1cfc <_ZN9TimeClass14timeFormatImplEP2tmPKci>
 80a1e42:	e7da      	b.n	80a1dfa <_ZN9TimeClass6formatExPKc+0x2a>
 80a1e44:	20000398 	.word	0x20000398
 80a1e48:	20000008 	.word	0x20000008
 80a1e4c:	200003a8 	.word	0x200003a8
 80a1e50:	200003a0 	.word	0x200003a0

080a1e54 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
 80a1e54:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80a1e56:	2000      	movs	r0, #0
 80a1e58:	f7ff f9c0 	bl	80a11dc <hal_rtc_time_is_valid>
    if (rtcstate)
 80a1e5c:	4604      	mov	r4, r0
 80a1e5e:	b9a0      	cbnz	r0, 80a1e8a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a1e60:	f7ff fab6 	bl	80a13d0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a1e64:	2801      	cmp	r0, #1
 80a1e66:	d110      	bne.n	80a1e8a <_ZN9TimeClass7isValidEv+0x36>
 80a1e68:	4620      	mov	r0, r4
 80a1e6a:	f7ff fad9 	bl	80a1420 <system_thread_get_state>
 80a1e6e:	b960      	cbnz	r0, 80a1e8a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80a1e70:	f7ff fefa 	bl	80a1c68 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a1e74:	b910      	cbnz	r0, 80a1e7c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80a1e76:	f7ff fb5f 	bl	80a1538 <spark_process>
        while (_while() && !_condition()) {
 80a1e7a:	e7f9      	b.n	80a1e70 <_ZN9TimeClass7isValidEv+0x1c>
 80a1e7c:	f7ff fef4 	bl	80a1c68 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80a1e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80a1e84:	2000      	movs	r0, #0
 80a1e86:	f7ff b9a9 	b.w	80a11dc <hal_rtc_time_is_valid>
}
 80a1e8a:	4620      	mov	r0, r4
 80a1e8c:	bd10      	pop	{r4, pc}

080a1e8e <_ZN9TimeClass3nowEv>:
{
 80a1e8e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80a1e90:	f7ff ffe0 	bl	80a1e54 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80a1e94:	2210      	movs	r2, #16
 80a1e96:	2100      	movs	r1, #0
 80a1e98:	4668      	mov	r0, sp
 80a1e9a:	f002 f947 	bl	80a412c <memset>
    hal_rtc_get_time(&tv, nullptr);
 80a1e9e:	2100      	movs	r1, #0
 80a1ea0:	4668      	mov	r0, sp
 80a1ea2:	f7ff f9a3 	bl	80a11ec <hal_rtc_get_time>
}
 80a1ea6:	9800      	ldr	r0, [sp, #0]
 80a1ea8:	b005      	add	sp, #20
 80a1eaa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1eb0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1eb0:	4b02      	ldr	r3, [pc, #8]	; (80a1ebc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1eb2:	681a      	ldr	r2, [r3, #0]
 80a1eb4:	4b02      	ldr	r3, [pc, #8]	; (80a1ec0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1eb6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a1eb8:	4770      	bx	lr
 80a1eba:	bf00      	nop
 80a1ebc:	20000008 	.word	0x20000008
 80a1ec0:	20000398 	.word	0x20000398

080a1ec4 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
 80a1ec4:	428a      	cmp	r2, r1
{
 80a1ec6:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
 80a1ec8:	d007      	beq.n	80a1eda <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
 80a1eca:	9c02      	ldr	r4, [sp, #8]
 80a1ecc:	1a40      	subs	r0, r0, r1
 80a1ece:	1ae4      	subs	r4, r4, r3
 80a1ed0:	4360      	muls	r0, r4
 80a1ed2:	1a52      	subs	r2, r2, r1
 80a1ed4:	fb90 f0f2 	sdiv	r0, r0, r2
 80a1ed8:	4418      	add	r0, r3
}
 80a1eda:	bd10      	pop	{r4, pc}

080a1edc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1edc:	2100      	movs	r1, #0
 80a1ede:	f7ff ba87 	b.w	80a13f0 <system_delay_ms>

080a1ee2 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 80a1ee2:	b510      	push	{r4, lr}
      if (_M_manager)
 80a1ee4:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a1ee6:	4604      	mov	r4, r0
      if (_M_manager)
 80a1ee8:	b113      	cbz	r3, 80a1ef0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1eea:	2203      	movs	r2, #3
 80a1eec:	4601      	mov	r1, r0
 80a1eee:	4798      	blx	r3
    }
 80a1ef0:	4620      	mov	r0, r4
 80a1ef2:	bd10      	pop	{r4, pc}

080a1ef4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80a1ef4:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1ef6:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a1ef8:	460b      	mov	r3, r1
 80a1efa:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1efc:	c803      	ldmia	r0, {r0, r1}
 80a1efe:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a1f02:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a1f06:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a1f0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a1f0e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a1f12:	b002      	add	sp, #8
 80a1f14:	bd10      	pop	{r4, pc}
	...

080a1f18 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a1f18:	2200      	movs	r2, #0
 80a1f1a:	4b01      	ldr	r3, [pc, #4]	; (80a1f20 <_GLOBAL__sub_I_RGB+0x8>)
 80a1f1c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a1f1e:	4770      	bx	lr
 80a1f20:	200003b0 	.word	0x200003b0

080a1f24 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a1f24:	4b01      	ldr	r3, [pc, #4]	; (80a1f2c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a1f26:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a1f28:	4770      	bx	lr
 80a1f2a:	bf00      	nop
 80a1f2c:	2000000c 	.word	0x2000000c

080a1f30 <serialEventRun>:
{
 80a1f30:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1f32:	4b13      	ldr	r3, [pc, #76]	; (80a1f80 <serialEventRun+0x50>)
 80a1f34:	b143      	cbz	r3, 80a1f48 <serialEventRun+0x18>
 80a1f36:	f000 fc25 	bl	80a2784 <_Z16_fetch_usbserialv>
 80a1f3a:	6803      	ldr	r3, [r0, #0]
 80a1f3c:	691b      	ldr	r3, [r3, #16]
 80a1f3e:	4798      	blx	r3
 80a1f40:	2800      	cmp	r0, #0
 80a1f42:	dd01      	ble.n	80a1f48 <serialEventRun+0x18>
        serialEvent();
 80a1f44:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a1f48:	4b0e      	ldr	r3, [pc, #56]	; (80a1f84 <serialEventRun+0x54>)
 80a1f4a:	b143      	cbz	r3, 80a1f5e <serialEventRun+0x2e>
 80a1f4c:	f000 ff16 	bl	80a2d7c <_Z22__fetch_global_Serial1v>
 80a1f50:	6803      	ldr	r3, [r0, #0]
 80a1f52:	691b      	ldr	r3, [r3, #16]
 80a1f54:	4798      	blx	r3
 80a1f56:	2800      	cmp	r0, #0
 80a1f58:	dd01      	ble.n	80a1f5e <serialEventRun+0x2e>
        serialEvent1();
 80a1f5a:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a1f5e:	4b0a      	ldr	r3, [pc, #40]	; (80a1f88 <serialEventRun+0x58>)
 80a1f60:	b10b      	cbz	r3, 80a1f66 <serialEventRun+0x36>
 80a1f62:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1f66:	4b09      	ldr	r3, [pc, #36]	; (80a1f8c <serialEventRun+0x5c>)
 80a1f68:	b143      	cbz	r3, 80a1f7c <serialEventRun+0x4c>
 80a1f6a:	f000 fc37 	bl	80a27dc <_Z17_fetch_usbserial1v>
 80a1f6e:	6803      	ldr	r3, [r0, #0]
 80a1f70:	691b      	ldr	r3, [r3, #16]
 80a1f72:	4798      	blx	r3
 80a1f74:	2800      	cmp	r0, #0
 80a1f76:	dd01      	ble.n	80a1f7c <serialEventRun+0x4c>
        usbSerialEvent1();
 80a1f78:	f3af 8000 	nop.w
}
 80a1f7c:	bd08      	pop	{r3, pc}
 80a1f7e:	bf00      	nop
	...

080a1f90 <_post_loop>:
{
 80a1f90:	b508      	push	{r3, lr}
	serialEventRun();
 80a1f92:	f7ff ffcd 	bl	80a1f30 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1f96:	f7ff f909 	bl	80a11ac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1f9a:	4b01      	ldr	r3, [pc, #4]	; (80a1fa0 <_post_loop+0x10>)
 80a1f9c:	6018      	str	r0, [r3, #0]
}
 80a1f9e:	bd08      	pop	{r3, pc}
 80a1fa0:	20000490 	.word	0x20000490

080a1fa4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1fa4:	4805      	ldr	r0, [pc, #20]	; (80a1fbc <_Z33system_initialize_user_backup_ramv+0x18>)
 80a1fa6:	4a06      	ldr	r2, [pc, #24]	; (80a1fc0 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a1fa8:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1faa:	1a12      	subs	r2, r2, r0
 80a1fac:	4905      	ldr	r1, [pc, #20]	; (80a1fc4 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a1fae:	f002 f8af 	bl	80a4110 <memcpy>
    __backup_sram_signature = signature;
 80a1fb2:	4b05      	ldr	r3, [pc, #20]	; (80a1fc8 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a1fb4:	4a05      	ldr	r2, [pc, #20]	; (80a1fcc <_Z33system_initialize_user_backup_ramv+0x28>)
 80a1fb6:	601a      	str	r2, [r3, #0]
}
 80a1fb8:	bd08      	pop	{r3, pc}
 80a1fba:	bf00      	nop
 80a1fbc:	40024000 	.word	0x40024000
 80a1fc0:	40024004 	.word	0x40024004
 80a1fc4:	080a7e88 	.word	0x080a7e88
 80a1fc8:	40024000 	.word	0x40024000
 80a1fcc:	9a271c1e 	.word	0x9a271c1e

080a1fd0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1fd0:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1fd2:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1fd4:	461a      	mov	r2, r3
 80a1fd6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1fda:	9300      	str	r3, [sp, #0]
 80a1fdc:	f7ff fa32 	bl	80a1444 <system_ctrl_set_result>
}
 80a1fe0:	b003      	add	sp, #12
 80a1fe2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1fe8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a1fe8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1fea:	8843      	ldrh	r3, [r0, #2]
 80a1fec:	2b0a      	cmp	r3, #10
 80a1fee:	d008      	beq.n	80a2002 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1ff0:	2b50      	cmp	r3, #80	; 0x50
 80a1ff2:	d10b      	bne.n	80a200c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a1ff4:	4b09      	ldr	r3, [pc, #36]	; (80a201c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1ff6:	681b      	ldr	r3, [r3, #0]
 80a1ff8:	b14b      	cbz	r3, 80a200e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a1ffa:	b003      	add	sp, #12
 80a1ffc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a2000:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a2002:	f7ff ffe5 	bl	80a1fd0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a2006:	b003      	add	sp, #12
 80a2008:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a200c:	2300      	movs	r3, #0
 80a200e:	461a      	mov	r2, r3
 80a2010:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2014:	9300      	str	r3, [sp, #0]
 80a2016:	f7ff fa15 	bl	80a1444 <system_ctrl_set_result>
}
 80a201a:	e7f4      	b.n	80a2006 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a201c:	200003c4 	.word	0x200003c4

080a2020 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a2020:	2100      	movs	r1, #0
{
 80a2022:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a2024:	4811      	ldr	r0, [pc, #68]	; (80a206c <module_user_init_hook+0x4c>)
 80a2026:	f7ff fb07 	bl	80a1638 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a202a:	4b11      	ldr	r3, [pc, #68]	; (80a2070 <module_user_init_hook+0x50>)
 80a202c:	681a      	ldr	r2, [r3, #0]
 80a202e:	4b11      	ldr	r3, [pc, #68]	; (80a2074 <module_user_init_hook+0x54>)
 80a2030:	429a      	cmp	r2, r3
 80a2032:	bf0c      	ite	eq
 80a2034:	2201      	moveq	r2, #1
 80a2036:	2200      	movne	r2, #0
 80a2038:	4b0f      	ldr	r3, [pc, #60]	; (80a2078 <module_user_init_hook+0x58>)
 80a203a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a203c:	d001      	beq.n	80a2042 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a203e:	f7ff ffb1 	bl	80a1fa4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2042:	f7ff f89b 	bl	80a117c <HAL_RNG_GetRandomNumber>
 80a2046:	4604      	mov	r4, r0
    srand(seed);
 80a2048:	f002 f878 	bl	80a413c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a204c:	4b0b      	ldr	r3, [pc, #44]	; (80a207c <module_user_init_hook+0x5c>)
 80a204e:	b113      	cbz	r3, 80a2056 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a2050:	4620      	mov	r0, r4
 80a2052:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2056:	2100      	movs	r1, #0
 80a2058:	4808      	ldr	r0, [pc, #32]	; (80a207c <module_user_init_hook+0x5c>)
 80a205a:	f7ff fa8d 	bl	80a1578 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a205e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2062:	2100      	movs	r1, #0
 80a2064:	4806      	ldr	r0, [pc, #24]	; (80a2080 <module_user_init_hook+0x60>)
 80a2066:	f7ff b9e3 	b.w	80a1430 <system_ctrl_set_app_request_handler>
 80a206a:	bf00      	nop
 80a206c:	080a1f25 	.word	0x080a1f25
 80a2070:	40024000 	.word	0x40024000
 80a2074:	9a271c1e 	.word	0x9a271c1e
 80a2078:	200003c0 	.word	0x200003c0
 80a207c:	00000000 	.word	0x00000000
 80a2080:	080a1fe9 	.word	0x080a1fe9

080a2084 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a2084:	4770      	bx	lr

080a2086 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a2086:	2000      	movs	r0, #0
 80a2088:	4770      	bx	lr

080a208a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a208a:	b510      	push	{r4, lr}
 80a208c:	4604      	mov	r4, r0
 80a208e:	2110      	movs	r1, #16
 80a2090:	f7fe f807 	bl	80a00a2 <_ZdlPvj>
 80a2094:	4620      	mov	r0, r4
 80a2096:	bd10      	pop	{r4, pc}

080a2098 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a2098:	b508      	push	{r3, lr}
      { delete this; }
 80a209a:	f7ff fff6 	bl	80a208a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a209e:	bd08      	pop	{r3, pc}

080a20a0 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a20a0:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a20a2:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a20a4:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a20a8:	6002      	str	r2, [r0, #0]
 80a20aa:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a20ac:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a20ae:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a20b0:	680c      	ldr	r4, [r1, #0]
 80a20b2:	8085      	strh	r5, [r0, #4]
 80a20b4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a20b6:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a20b8:	bd30      	pop	{r4, r5, pc}

080a20ba <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a20ba:	b510      	push	{r4, lr}
 80a20bc:	4604      	mov	r4, r0
    free((void*)msg_);
 80a20be:	6800      	ldr	r0, [r0, #0]
 80a20c0:	f7ff fa6a 	bl	80a1598 <free>
}
 80a20c4:	4620      	mov	r0, r4
 80a20c6:	bd10      	pop	{r4, pc}

080a20c8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a20c8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a20ca:	68c4      	ldr	r4, [r0, #12]
 80a20cc:	b1f4      	cbz	r4, 80a210c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a20ce:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a20d0:	2b02      	cmp	r3, #2
 80a20d2:	d103      	bne.n	80a20dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a20d4:	f104 000c 	add.w	r0, r4, #12
 80a20d8:	f7ff ffef 	bl	80a20ba <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a20dc:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a20de:	b135      	cbz	r5, 80a20ee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a20e0:	4628      	mov	r0, r5
 80a20e2:	f7ff fefe 	bl	80a1ee2 <_ZNSt14_Function_baseD1Ev>
 80a20e6:	2110      	movs	r1, #16
 80a20e8:	4628      	mov	r0, r5
 80a20ea:	f7fd ffda 	bl	80a00a2 <_ZdlPvj>
 80a20ee:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a20f0:	b135      	cbz	r5, 80a2100 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a20f2:	4628      	mov	r0, r5
 80a20f4:	f7ff fef5 	bl	80a1ee2 <_ZNSt14_Function_baseD1Ev>
 80a20f8:	2110      	movs	r1, #16
 80a20fa:	4628      	mov	r0, r5
 80a20fc:	f7fd ffd1 	bl	80a00a2 <_ZdlPvj>
 80a2100:	4620      	mov	r0, r4
 80a2102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a2106:	2114      	movs	r1, #20
 80a2108:	f7fd bfcb 	b.w	80a00a2 <_ZdlPvj>
 80a210c:	bd38      	pop	{r3, r4, r5, pc}

080a210e <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a210e:	b510      	push	{r4, lr}
 80a2110:	b088      	sub	sp, #32
 80a2112:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a2114:	4668      	mov	r0, sp
 80a2116:	f7ff fc27 	bl	80a1968 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a211a:	4669      	mov	r1, sp
 80a211c:	a804      	add	r0, sp, #16
 80a211e:	f7ff fc62 	bl	80a19e6 <_ZN6StringC1ERKS_>
 80a2122:	a804      	add	r0, sp, #16
 80a2124:	47a0      	blx	r4
 80a2126:	4604      	mov	r4, r0
 80a2128:	a804      	add	r0, sp, #16
 80a212a:	f7ff fbd3 	bl	80a18d4 <_ZN6StringD1Ev>
    String p(param);
 80a212e:	4668      	mov	r0, sp
 80a2130:	f7ff fbd0 	bl	80a18d4 <_ZN6StringD1Ev>
}
 80a2134:	4620      	mov	r0, r4
 80a2136:	b008      	add	sp, #32
 80a2138:	bd10      	pop	{r4, pc}

080a213a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a213a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a213c:	2300      	movs	r3, #0
         size = sizeof(*this);
 80a213e:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 80a2140:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 80a2144:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a2146:	4669      	mov	r1, sp
 80a2148:	461a      	mov	r2, r3
 80a214a:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 80a214c:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 80a2150:	f8ad 4000 	strh.w	r4, [sp]
 80a2154:	f7ff f9e8 	bl	80a1528 <spark_function>
}
 80a2158:	b004      	add	sp, #16
 80a215a:	bd10      	pop	{r4, pc}

080a215c <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a215c:	680b      	ldr	r3, [r1, #0]
 80a215e:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 80a2160:	684b      	ldr	r3, [r1, #4]
 80a2162:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 80a2164:	b113      	cbz	r3, 80a216c <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 80a2166:	685a      	ldr	r2, [r3, #4]
 80a2168:	3201      	adds	r2, #1
 80a216a:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a216c:	4770      	bx	lr

080a216e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a216e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2170:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 80a2172:	4668      	mov	r0, sp
 80a2174:	460d      	mov	r5, r1
 80a2176:	f7ff fff1 	bl	80a215c <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a217a:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a217c:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a217e:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a2180:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a2182:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a2184:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a2186:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a2188:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a218a:	f7fd ffbe 	bl	80a010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a218e:	b135      	cbz	r5, 80a219e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 80a2190:	1d28      	adds	r0, r5, #4
 80a2192:	f7fd ffba 	bl	80a010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2196:	2108      	movs	r1, #8
 80a2198:	4628      	mov	r0, r5
 80a219a:	f7fd ff82 	bl	80a00a2 <_ZdlPvj>
        return p;
    }
 80a219e:	4620      	mov	r0, r4
 80a21a0:	b003      	add	sp, #12
 80a21a2:	bd30      	pop	{r4, r5, pc}

080a21a4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a21a4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a21a6:	b510      	push	{r4, lr}
      if (_M_empty())
 80a21a8:	b90a      	cbnz	r2, 80a21ae <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a21aa:	f000 fe6d 	bl	80a2e88 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a21ae:	68c3      	ldr	r3, [r0, #12]
    }
 80a21b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a21b4:	4718      	bx	r3

080a21b6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a21b6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a21b8:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a21ba:	f100 0110 	add.w	r1, r0, #16
 80a21be:	f7ff fff1 	bl	80a21a4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a21c2:	bd08      	pop	{r3, pc}

080a21c4 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a21c4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a21c6:	b510      	push	{r4, lr}
      if (_M_empty())
 80a21c8:	b90a      	cbnz	r2, 80a21ce <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a21ca:	f000 fe5d 	bl	80a2e88 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a21ce:	68c3      	ldr	r3, [r0, #12]
    }
 80a21d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a21d4:	4718      	bx	r3

080a21d6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a21d6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a21d8:	6800      	ldr	r0, [r0, #0]
 80a21da:	f100 0110 	add.w	r1, r0, #16
 80a21de:	f7ff fff1 	bl	80a21c4 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a21e2:	bd08      	pop	{r3, pc}

080a21e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a21e4:	b538      	push	{r3, r4, r5, lr}
 80a21e6:	2300      	movs	r3, #0
 80a21e8:	4604      	mov	r4, r0
 80a21ea:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a21ec:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a21ee:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a21f0:	f7fd ff53 	bl	80a009a <_Znwj>
 80a21f4:	b128      	cbz	r0, 80a2202 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a21f6:	2301      	movs	r3, #1
 80a21f8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a21fc:	4b02      	ldr	r3, [pc, #8]	; (80a2208 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a21fe:	60c5      	str	r5, [r0, #12]
 80a2200:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a2202:	6020      	str	r0, [r4, #0]
	}
 80a2204:	4620      	mov	r0, r4
 80a2206:	bd38      	pop	{r3, r4, r5, pc}
 80a2208:	080a7598 	.word	0x080a7598

080a220c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a220c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a220e:	2300      	movs	r3, #0
 80a2210:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80a2212:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a2214:	4604      	mov	r4, r0
 80a2216:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a2218:	b12b      	cbz	r3, 80a2226 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a221a:	2202      	movs	r2, #2
 80a221c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a221e:	68eb      	ldr	r3, [r5, #12]
 80a2220:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a2222:	68ab      	ldr	r3, [r5, #8]
 80a2224:	60a3      	str	r3, [r4, #8]
    }
 80a2226:	4620      	mov	r0, r4
 80a2228:	bd38      	pop	{r3, r4, r5, pc}
	...

080a222c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a222c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a222e:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 80a2230:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a2232:	4668      	mov	r0, sp
 80a2234:	f7ff ff34 	bl	80a20a0 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a2238:	f04f 0302 	mov.w	r3, #2
 80a223c:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a2240:	2a00      	cmp	r2, #0
 80a2242:	d103      	bne.n	80a224c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a2244:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a2248:	2900      	cmp	r1, #0
 80a224a:	d1f7      	bne.n	80a223c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a224c:	d125      	bne.n	80a229a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a224e:	f104 050c 	add.w	r5, r4, #12
 80a2252:	4669      	mov	r1, sp
 80a2254:	4628      	mov	r0, r5
 80a2256:	f7ff ff23 	bl	80a20a0 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a225a:	2301      	movs	r3, #1
 80a225c:	f3bf 8f5b 	dmb	ish
 80a2260:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a2262:	2000      	movs	r0, #0
 80a2264:	f3bf 8f5b 	dmb	ish
 80a2268:	f104 0308 	add.w	r3, r4, #8
 80a226c:	e853 6f00 	ldrex	r6, [r3]
 80a2270:	e843 0200 	strex	r2, r0, [r3]
 80a2274:	2a00      	cmp	r2, #0
 80a2276:	d1f9      	bne.n	80a226c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a2278:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a227c:	b16e      	cbz	r6, 80a229a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a227e:	f7ff f8bf 	bl	80a1400 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a2282:	b178      	cbz	r0, 80a22a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a2284:	4629      	mov	r1, r5
 80a2286:	4630      	mov	r0, r6
 80a2288:	f7ff ff8c 	bl	80a21a4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a228c:	4630      	mov	r0, r6
 80a228e:	f7ff fe28 	bl	80a1ee2 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a2292:	2110      	movs	r1, #16
 80a2294:	4630      	mov	r0, r6
 80a2296:	f7fd ff04 	bl	80a00a2 <_ZdlPvj>
        p_->setError(std::move(error));
 80a229a:	4668      	mov	r0, sp
 80a229c:	f7ff ff0d 	bl	80a20ba <_ZN8particle5ErrorD1Ev>
    }
 80a22a0:	b009      	add	sp, #36	; 0x24
 80a22a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a22a4:	4631      	mov	r1, r6
 80a22a6:	a802      	add	r0, sp, #8
 80a22a8:	f7ff ffb0 	bl	80a220c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a22ac:	68e0      	ldr	r0, [r4, #12]
 80a22ae:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a22b2:	b108      	cbz	r0, 80a22b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a22b4:	f001 ff82 	bl	80a41bc <strdup>
        type_(type) {
 80a22b8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a22ba:	2010      	movs	r0, #16
 80a22bc:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a22c0:	f7fd feeb 	bl	80a009a <_Znwj>
 80a22c4:	4605      	mov	r5, r0
 80a22c6:	b1e8      	cbz	r0, 80a2304 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a22c8:	2700      	movs	r7, #0
 80a22ca:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a22cc:	2018      	movs	r0, #24
 80a22ce:	f7fd fee4 	bl	80a009a <_Znwj>
 80a22d2:	4604      	mov	r4, r0
 80a22d4:	b188      	cbz	r0, 80a22fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a22d6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a22d8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a22da:	a802      	add	r0, sp, #8
 80a22dc:	f7ff fe0a 	bl	80a1ef4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a22e0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a22e2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a22e4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a22e6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a22e8:	9204      	str	r2, [sp, #16]
 80a22ea:	68e2      	ldr	r2, [r4, #12]
 80a22ec:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a22ee:	60e3      	str	r3, [r4, #12]
 80a22f0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a22f4:	9205      	str	r2, [sp, #20]
 80a22f6:	f7ff fed3 	bl	80a20a0 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a22fa:	4b08      	ldr	r3, [pc, #32]	; (80a231c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a22fc:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a22fe:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a2300:	4b07      	ldr	r3, [pc, #28]	; (80a2320 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a2302:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a2304:	a806      	add	r0, sp, #24
 80a2306:	f7ff fed8 	bl	80a20ba <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a230a:	a802      	add	r0, sp, #8
 80a230c:	f7ff fde9 	bl	80a1ee2 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a2310:	2200      	movs	r2, #0
 80a2312:	4629      	mov	r1, r5
 80a2314:	4803      	ldr	r0, [pc, #12]	; (80a2324 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a2316:	f7ff f87b 	bl	80a1410 <application_thread_invoke>
 80a231a:	e7b7      	b.n	80a228c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a231c:	080a21b7 	.word	0x080a21b7
 80a2320:	080a2441 	.word	0x080a2441
 80a2324:	080a29c9 	.word	0x080a29c9

080a2328 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a2328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a232c:	b08a      	sub	sp, #40	; 0x28
 80a232e:	4605      	mov	r5, r0
 80a2330:	460c      	mov	r4, r1
 80a2332:	4617      	mov	r7, r2
 80a2334:	4698      	mov	r8, r3
 80a2336:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a233a:	f7ff f905 	bl	80a1548 <spark_cloud_flag_connected>
 80a233e:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a2340:	4682      	mov	sl, r0
 80a2342:	bb38      	cbnz	r0, 80a2394 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a2344:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a2348:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a234a:	a905      	add	r1, sp, #20
 80a234c:	4630      	mov	r0, r6
 80a234e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a2352:	f7ff fea5 	bl	80a20a0 <_ZN8particle5ErrorC1EOS0_>
 80a2356:	2014      	movs	r0, #20
 80a2358:	f7fd fe9f 	bl	80a009a <_Znwj>
 80a235c:	4604      	mov	r4, r0
 80a235e:	b148      	cbz	r0, 80a2374 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a2360:	2302      	movs	r3, #2
 80a2362:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a2364:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a2366:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a236a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a236c:	4631      	mov	r1, r6
 80a236e:	300c      	adds	r0, #12
 80a2370:	f7ff fe96 	bl	80a20a0 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a2374:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a2376:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a2378:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a237c:	f7ff ff32 	bl	80a21e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a2380:	4630      	mov	r0, r6
 80a2382:	f7ff fe9a 	bl	80a20ba <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a2386:	a805      	add	r0, sp, #20
 80a2388:	f7ff fe97 	bl	80a20ba <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a238c:	4628      	mov	r0, r5
 80a238e:	b00a      	add	sp, #40	; 0x28
 80a2390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d.size = sizeof(spark_send_event_data);
 80a2394:	230c      	movs	r3, #12
    spark_send_event_data d = {};
 80a2396:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a239a:	2014      	movs	r0, #20
 80a239c:	e9cd aa08 	strd	sl, sl, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 80a23a0:	9307      	str	r3, [sp, #28]
 80a23a2:	f7fd fe7a 	bl	80a009a <_Znwj>
 80a23a6:	4601      	mov	r1, r0
 80a23a8:	b128      	cbz	r0, 80a23b6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a23aa:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a23ae:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a23b2:	f880 a001 	strb.w	sl, [r0, #1]
 80a23b6:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a23b8:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a23ba:	f7ff ff13 	bl	80a21e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a23be:	4b1f      	ldr	r3, [pc, #124]	; (80a243c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x114>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a23c0:	2008      	movs	r0, #8
 80a23c2:	9308      	str	r3, [sp, #32]
 80a23c4:	f7fd fe69 	bl	80a009a <_Znwj>
 80a23c8:	4682      	mov	sl, r0
 80a23ca:	b110      	cbz	r0, 80a23d2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xaa>
 80a23cc:	a903      	add	r1, sp, #12
 80a23ce:	f7ff fec5 	bl	80a215c <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a23d2:	4642      	mov	r2, r8
 80a23d4:	4639      	mov	r1, r7
 80a23d6:	4620      	mov	r0, r4
 80a23d8:	9600      	str	r6, [sp, #0]
 80a23da:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a23de:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a23e2:	f7ff f8b9 	bl	80a1558 <spark_send_event>
 80a23e6:	b9b8      	cbnz	r0, 80a2418 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
	return __atomic_load_n(&_M_i, int(__m));
 80a23e8:	9b03      	ldr	r3, [sp, #12]
 80a23ea:	785b      	ldrb	r3, [r3, #1]
 80a23ec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a23f0:	b993      	cbnz	r3, 80a2418 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
 80a23f2:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a23f6:	a905      	add	r1, sp, #20
 80a23f8:	a803      	add	r0, sp, #12
 80a23fa:	9205      	str	r2, [sp, #20]
 80a23fc:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a2400:	f7ff ff14 	bl	80a222c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a2404:	a805      	add	r0, sp, #20
 80a2406:	f7ff fe58 	bl	80a20ba <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a240a:	a805      	add	r0, sp, #20
 80a240c:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a240e:	f7ff feae 	bl	80a216e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a2412:	a806      	add	r0, sp, #24
 80a2414:	f7fd fe79 	bl	80a010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2418:	a903      	add	r1, sp, #12
 80a241a:	a805      	add	r0, sp, #20
 80a241c:	f7ff fe9e 	bl	80a215c <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a2420:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a2422:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a2424:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a2426:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a2428:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a242a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a242c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a242e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a2430:	f7fd fe6b 	bl	80a010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2434:	a804      	add	r0, sp, #16
 80a2436:	f7fd fe68 	bl	80a010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a243a:	e7a7      	b.n	80a238c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a243c:	080a24bd 	.word	0x080a24bd

080a2440 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 80a2440:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80a2442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2444:	4605      	mov	r5, r0
	switch (__op)
 80a2446:	d103      	bne.n	80a2450 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 80a2448:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80a244a:	6003      	str	r3, [r0, #0]
      }
 80a244c:	2000      	movs	r0, #0
 80a244e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 80a2450:	2a02      	cmp	r2, #2
 80a2452:	d010      	beq.n	80a2476 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a2454:	2a03      	cmp	r2, #3
 80a2456:	d1f9      	bne.n	80a244c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 80a2458:	6804      	ldr	r4, [r0, #0]
 80a245a:	2c00      	cmp	r4, #0
 80a245c:	d0f6      	beq.n	80a244c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 80a245e:	f104 0010 	add.w	r0, r4, #16
 80a2462:	f7ff fe2a 	bl	80a20ba <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a2466:	4620      	mov	r0, r4
 80a2468:	f7ff fd3b 	bl	80a1ee2 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a246c:	2118      	movs	r1, #24
 80a246e:	4620      	mov	r0, r4
 80a2470:	f7fd fe17 	bl	80a00a2 <_ZdlPvj>
 80a2474:	e7ea      	b.n	80a244c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 80a2476:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a2478:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a247a:	f7fd fe0e 	bl	80a009a <_Znwj>
 80a247e:	4604      	mov	r4, r0
 80a2480:	b150      	cbz	r0, 80a2498 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
 80a2482:	4631      	mov	r1, r6
 80a2484:	f7ff fec2 	bl	80a220c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a2488:	6930      	ldr	r0, [r6, #16]
 80a248a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a248e:	b108      	cbz	r0, 80a2494 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 80a2490:	f001 fe94 	bl	80a41bc <strdup>
        type_(type) {
 80a2494:	6120      	str	r0, [r4, #16]
 80a2496:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a2498:	602c      	str	r4, [r5, #0]
	}
 80a249a:	e7d7      	b.n	80a244c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

080a249c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a249c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a249e:	2300      	movs	r3, #0
 80a24a0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80a24a2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a24a4:	4604      	mov	r4, r0
 80a24a6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a24a8:	b12b      	cbz	r3, 80a24b6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a24aa:	2202      	movs	r2, #2
 80a24ac:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a24ae:	68eb      	ldr	r3, [r5, #12]
 80a24b0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a24b2:	68ab      	ldr	r3, [r5, #8]
 80a24b4:	60a3      	str	r3, [r4, #8]
    }
 80a24b6:	4620      	mov	r0, r4
 80a24b8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a24bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a24bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a24be:	4604      	mov	r4, r0
 80a24c0:	b089      	sub	sp, #36	; 0x24
 80a24c2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a24c4:	a801      	add	r0, sp, #4
 80a24c6:	4611      	mov	r1, r2
 80a24c8:	f7ff fe51 	bl	80a216e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a24cc:	b1a4      	cbz	r4, 80a24f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a24ce:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a24d0:	b11d      	cbz	r5, 80a24da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a24d2:	4628      	mov	r0, r5
 80a24d4:	f001 fe72 	bl	80a41bc <strdup>
 80a24d8:	4605      	mov	r5, r0
 80a24da:	a801      	add	r0, sp, #4
 80a24dc:	a903      	add	r1, sp, #12
        type_(type) {
 80a24de:	9503      	str	r5, [sp, #12]
 80a24e0:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a24e4:	f7ff fea2 	bl	80a222c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a24e8:	a803      	add	r0, sp, #12
 80a24ea:	f7ff fde6 	bl	80a20ba <_ZN8particle5ErrorD1Ev>
 80a24ee:	a802      	add	r0, sp, #8
 80a24f0:	f7fd fe0b 	bl	80a010a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a24f4:	b009      	add	sp, #36	; 0x24
 80a24f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a24f8:	2301      	movs	r3, #1
      { return _M_ptr; }
 80a24fa:	9d01      	ldr	r5, [sp, #4]
 80a24fc:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a2500:	2a00      	cmp	r2, #0
 80a2502:	d103      	bne.n	80a250c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a2504:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a2508:	2900      	cmp	r1, #0
 80a250a:	d1f7      	bne.n	80a24fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a250c:	d1ef      	bne.n	80a24ee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a250e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a2510:	f3bf 8f5b 	dmb	ish
 80a2514:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a2516:	f3bf 8f5b 	dmb	ish
 80a251a:	1d2b      	adds	r3, r5, #4
 80a251c:	e853 6f00 	ldrex	r6, [r3]
 80a2520:	e843 4200 	strex	r2, r4, [r3]
 80a2524:	2a00      	cmp	r2, #0
 80a2526:	d1f9      	bne.n	80a251c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a2528:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a252c:	2e00      	cmp	r6, #0
 80a252e:	d0de      	beq.n	80a24ee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a2530:	4620      	mov	r0, r4
 80a2532:	f7fe ff65 	bl	80a1400 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a2536:	4607      	mov	r7, r0
 80a2538:	b160      	cbz	r0, 80a2554 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a253a:	4630      	mov	r0, r6
 80a253c:	f105 010c 	add.w	r1, r5, #12
 80a2540:	f7ff fe40 	bl	80a21c4 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a2544:	4630      	mov	r0, r6
 80a2546:	f7ff fccc 	bl	80a1ee2 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a254a:	2110      	movs	r1, #16
 80a254c:	4630      	mov	r0, r6
 80a254e:	f7fd fda8 	bl	80a00a2 <_ZdlPvj>
 80a2552:	e7cc      	b.n	80a24ee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a2554:	4631      	mov	r1, r6
 80a2556:	a803      	add	r0, sp, #12
 80a2558:	f7ff ffa0 	bl	80a249c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a255c:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a255e:	2010      	movs	r0, #16
 80a2560:	f88d 301c 	strb.w	r3, [sp, #28]
 80a2564:	f7fd fd99 	bl	80a009a <_Znwj>
 80a2568:	4605      	mov	r5, r0
 80a256a:	b1d0      	cbz	r0, 80a25a2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a256c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a256e:	2014      	movs	r0, #20
 80a2570:	f7fd fd93 	bl	80a009a <_Znwj>
 80a2574:	4604      	mov	r4, r0
 80a2576:	b178      	cbz	r0, 80a2598 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a2578:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a257a:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a257c:	a803      	add	r0, sp, #12
 80a257e:	f7ff fcb9 	bl	80a1ef4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2582:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a2584:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2586:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2588:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a258a:	9205      	str	r2, [sp, #20]
 80a258c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a258e:	60e3      	str	r3, [r4, #12]
 80a2590:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a2594:	9206      	str	r2, [sp, #24]
 80a2596:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a2598:	4b06      	ldr	r3, [pc, #24]	; (80a25b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a259a:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a259c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a259e:	4b06      	ldr	r3, [pc, #24]	; (80a25b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a25a0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a25a2:	a803      	add	r0, sp, #12
 80a25a4:	f7ff fc9d 	bl	80a1ee2 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a25a8:	2200      	movs	r2, #0
 80a25aa:	4629      	mov	r1, r5
 80a25ac:	4803      	ldr	r0, [pc, #12]	; (80a25bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a25ae:	f7fe ff2f 	bl	80a1410 <application_thread_invoke>
 80a25b2:	e7c7      	b.n	80a2544 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a25b4:	080a21d7 	.word	0x080a21d7
 80a25b8:	080a25c1 	.word	0x080a25c1
 80a25bc:	080a29c9 	.word	0x080a29c9

080a25c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 80a25c0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80a25c2:	b570      	push	{r4, r5, r6, lr}
 80a25c4:	4604      	mov	r4, r0
	switch (__op)
 80a25c6:	d103      	bne.n	80a25d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 80a25c8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80a25ca:	6003      	str	r3, [r0, #0]
      }
 80a25cc:	2000      	movs	r0, #0
 80a25ce:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 80a25d0:	2a02      	cmp	r2, #2
 80a25d2:	d00c      	beq.n	80a25ee <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a25d4:	2a03      	cmp	r2, #3
 80a25d6:	d1f9      	bne.n	80a25cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 80a25d8:	6804      	ldr	r4, [r0, #0]
 80a25da:	2c00      	cmp	r4, #0
 80a25dc:	d0f6      	beq.n	80a25cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 80a25de:	4620      	mov	r0, r4
 80a25e0:	f7ff fc7f 	bl	80a1ee2 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a25e4:	2114      	movs	r1, #20
 80a25e6:	4620      	mov	r0, r4
 80a25e8:	f7fd fd5b 	bl	80a00a2 <_ZdlPvj>
 80a25ec:	e7ee      	b.n	80a25cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 80a25ee:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a25f0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a25f2:	f7fd fd52 	bl	80a009a <_Znwj>
 80a25f6:	4605      	mov	r5, r0
 80a25f8:	b120      	cbz	r0, 80a2604 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
 80a25fa:	4631      	mov	r1, r6
 80a25fc:	f7ff ff4e 	bl	80a249c <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a2600:	7c33      	ldrb	r3, [r6, #16]
 80a2602:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a2604:	6025      	str	r5, [r4, #0]
	}
 80a2606:	e7e1      	b.n	80a25cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

080a2608 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a2608:	4770      	bx	lr

080a260a <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a260a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a260c:	460e      	mov	r6, r1
 80a260e:	2400      	movs	r4, #0
 80a2610:	f100 0708 	add.w	r7, r0, #8
 80a2614:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a2616:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a261a:	220a      	movs	r2, #10
 80a261c:	4630      	mov	r0, r6
 80a261e:	f7ff fafe 	bl	80a1c1e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2622:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2624:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a2626:	d101      	bne.n	80a262c <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a2628:	4620      	mov	r0, r4
 80a262a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a262c:	2c00      	cmp	r4, #0
 80a262e:	d0f2      	beq.n	80a2616 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2630:	212e      	movs	r1, #46	; 0x2e
 80a2632:	4630      	mov	r0, r6
 80a2634:	f7ff faf0 	bl	80a1c18 <_ZN5Print5printEc>
 80a2638:	4404      	add	r4, r0
 80a263a:	e7ec      	b.n	80a2616 <_ZNK9IPAddress7printToER5Print+0xc>

080a263c <_ZN9IPAddressD0Ev>:
 80a263c:	b510      	push	{r4, lr}
 80a263e:	4604      	mov	r4, r0
 80a2640:	2118      	movs	r1, #24
 80a2642:	f7fd fd2e 	bl	80a00a2 <_ZdlPvj>
 80a2646:	4620      	mov	r0, r4
 80a2648:	bd10      	pop	{r4, pc}
	...

080a264c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a264c:	b510      	push	{r4, lr}
 80a264e:	4604      	mov	r4, r0
 80a2650:	4b04      	ldr	r3, [pc, #16]	; (80a2664 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a2652:	2211      	movs	r2, #17
 80a2654:	2100      	movs	r1, #0
 80a2656:	f840 3b04 	str.w	r3, [r0], #4
 80a265a:	f001 fd67 	bl	80a412c <memset>
}
 80a265e:	4620      	mov	r0, r4
 80a2660:	bd10      	pop	{r4, pc}
 80a2662:	bf00      	nop
 80a2664:	080a75b4 	.word	0x080a75b4

080a2668 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2668:	4603      	mov	r3, r0
 80a266a:	4a07      	ldr	r2, [pc, #28]	; (80a2688 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a266c:	b510      	push	{r4, lr}
 80a266e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a2672:	f101 0210 	add.w	r2, r1, #16
 80a2676:	f851 4b04 	ldr.w	r4, [r1], #4
 80a267a:	4291      	cmp	r1, r2
 80a267c:	f843 4b04 	str.w	r4, [r3], #4
 80a2680:	d1f9      	bne.n	80a2676 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a2682:	780a      	ldrb	r2, [r1, #0]
 80a2684:	701a      	strb	r2, [r3, #0]
}
 80a2686:	bd10      	pop	{r4, pc}
 80a2688:	080a75b4 	.word	0x080a75b4

080a268c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a268c:	4a02      	ldr	r2, [pc, #8]	; (80a2698 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a268e:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a2692:	2204      	movs	r2, #4
 80a2694:	7502      	strb	r2, [r0, #20]
}
 80a2696:	4770      	bx	lr
 80a2698:	080a75b4 	.word	0x080a75b4

080a269c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a269c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a269e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a26a2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a26a6:	2304      	movs	r3, #4
 80a26a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a26ac:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a26b0:	6044      	str	r4, [r0, #4]
 80a26b2:	7503      	strb	r3, [r0, #20]
}
 80a26b4:	bd10      	pop	{r4, pc}
	...

080a26b8 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a26b8:	b513      	push	{r0, r1, r4, lr}
 80a26ba:	4c04      	ldr	r4, [pc, #16]	; (80a26cc <_ZN9IPAddressC1Ehhhh+0x14>)
 80a26bc:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a26be:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80a26c2:	9400      	str	r4, [sp, #0]
 80a26c4:	f7ff ffea 	bl	80a269c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a26c8:	b002      	add	sp, #8
 80a26ca:	bd10      	pop	{r4, pc}
 80a26cc:	080a75b4 	.word	0x080a75b4

080a26d0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a26d0:	7441      	strb	r1, [r0, #17]
}
 80a26d2:	4770      	bx	lr

080a26d4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a26d4:	4770      	bx	lr

080a26d6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a26d6:	4770      	bx	lr

080a26d8 <_ZN9USBSerial4readEv>:
{
 80a26d8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a26da:	2100      	movs	r1, #0
 80a26dc:	7c00      	ldrb	r0, [r0, #16]
 80a26de:	f7fe fe57 	bl	80a1390 <HAL_USB_USART_Receive_Data>
}
 80a26e2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a26e6:	bd08      	pop	{r3, pc}

080a26e8 <_ZN9USBSerial4peekEv>:
{
 80a26e8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a26ea:	2101      	movs	r1, #1
 80a26ec:	7c00      	ldrb	r0, [r0, #16]
 80a26ee:	f7fe fe4f 	bl	80a1390 <HAL_USB_USART_Receive_Data>
}
 80a26f2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a26f6:	bd08      	pop	{r3, pc}

080a26f8 <_ZN9USBSerial17availableForWriteEv>:
{
 80a26f8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a26fa:	7c00      	ldrb	r0, [r0, #16]
 80a26fc:	f7fe fe40 	bl	80a1380 <HAL_USB_USART_Available_Data_For_Write>
}
 80a2700:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2704:	bd08      	pop	{r3, pc}

080a2706 <_ZN9USBSerial9availableEv>:
{
 80a2706:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2708:	7c00      	ldrb	r0, [r0, #16]
 80a270a:	f7fe fe31 	bl	80a1370 <HAL_USB_USART_Available_Data>
}
 80a270e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2712:	bd08      	pop	{r3, pc}

080a2714 <_ZN9USBSerial5writeEh>:
{
 80a2714:	b538      	push	{r3, r4, r5, lr}
 80a2716:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2718:	7c00      	ldrb	r0, [r0, #16]
{
 80a271a:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a271c:	f7fe fe30 	bl	80a1380 <HAL_USB_USART_Available_Data_For_Write>
 80a2720:	2800      	cmp	r0, #0
 80a2722:	dc01      	bgt.n	80a2728 <_ZN9USBSerial5writeEh+0x14>
 80a2724:	7c60      	ldrb	r0, [r4, #17]
 80a2726:	b128      	cbz	r0, 80a2734 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2728:	4629      	mov	r1, r5
 80a272a:	7c20      	ldrb	r0, [r4, #16]
 80a272c:	f7fe fe38 	bl	80a13a0 <HAL_USB_USART_Send_Data>
 80a2730:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a2734:	bd38      	pop	{r3, r4, r5, pc}

080a2736 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a2736:	7c00      	ldrb	r0, [r0, #16]
 80a2738:	f7fe be3a 	b.w	80a13b0 <HAL_USB_USART_Flush_Data>

080a273c <_ZN9USBSerialD0Ev>:
 80a273c:	b510      	push	{r4, lr}
 80a273e:	4604      	mov	r4, r0
 80a2740:	2114      	movs	r1, #20
 80a2742:	f7fd fcae 	bl	80a00a2 <_ZdlPvj>
 80a2746:	4620      	mov	r0, r4
 80a2748:	bd10      	pop	{r4, pc}

080a274a <__tcf_1>:
 80a274a:	4770      	bx	lr

080a274c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a274c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a274e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2752:	4604      	mov	r4, r0
 80a2754:	4608      	mov	r0, r1
 80a2756:	2100      	movs	r1, #0
 80a2758:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a275c:	4b04      	ldr	r3, [pc, #16]	; (80a2770 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a275e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2760:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a2762:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a2764:	4611      	mov	r1, r2
  _blocking = true;
 80a2766:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a2768:	f7fe fdfa 	bl	80a1360 <HAL_USB_USART_Init>
}
 80a276c:	4620      	mov	r0, r4
 80a276e:	bd10      	pop	{r4, pc}
 80a2770:	080a75c8 	.word	0x080a75c8

080a2774 <_Z19acquireSerialBufferv>:
{
 80a2774:	b510      	push	{r4, lr}
 80a2776:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a2778:	2214      	movs	r2, #20
 80a277a:	2100      	movs	r1, #0
 80a277c:	f001 fcd6 	bl	80a412c <memset>
}
 80a2780:	4620      	mov	r0, r4
 80a2782:	bd10      	pop	{r4, pc}

080a2784 <_Z16_fetch_usbserialv>:
{
 80a2784:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2786:	4d0e      	ldr	r5, [pc, #56]	; (80a27c0 <_Z16_fetch_usbserialv+0x3c>)
{
 80a2788:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a278a:	a801      	add	r0, sp, #4
 80a278c:	f7ff fff2 	bl	80a2774 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2790:	7829      	ldrb	r1, [r5, #0]
 80a2792:	f3bf 8f5b 	dmb	ish
 80a2796:	f011 0401 	ands.w	r4, r1, #1
 80a279a:	d10e      	bne.n	80a27ba <_Z16_fetch_usbserialv+0x36>
 80a279c:	4628      	mov	r0, r5
 80a279e:	f7fd fc82 	bl	80a00a6 <__cxa_guard_acquire>
 80a27a2:	b150      	cbz	r0, 80a27ba <_Z16_fetch_usbserialv+0x36>
 80a27a4:	4621      	mov	r1, r4
 80a27a6:	aa01      	add	r2, sp, #4
 80a27a8:	4806      	ldr	r0, [pc, #24]	; (80a27c4 <_Z16_fetch_usbserialv+0x40>)
 80a27aa:	f7ff ffcf 	bl	80a274c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a27ae:	4628      	mov	r0, r5
 80a27b0:	f7fd fc7e 	bl	80a00b0 <__cxa_guard_release>
 80a27b4:	4804      	ldr	r0, [pc, #16]	; (80a27c8 <_Z16_fetch_usbserialv+0x44>)
 80a27b6:	f001 fbab 	bl	80a3f10 <atexit>
	return _usbserial;
}
 80a27ba:	4802      	ldr	r0, [pc, #8]	; (80a27c4 <_Z16_fetch_usbserialv+0x40>)
 80a27bc:	b007      	add	sp, #28
 80a27be:	bd30      	pop	{r4, r5, pc}
 80a27c0:	200003c8 	.word	0x200003c8
 80a27c4:	200003d0 	.word	0x200003d0
 80a27c8:	080a26d5 	.word	0x080a26d5

080a27cc <_Z23acquireUSBSerial1Bufferv>:
 80a27cc:	b510      	push	{r4, lr}
 80a27ce:	4604      	mov	r4, r0
 80a27d0:	2214      	movs	r2, #20
 80a27d2:	2100      	movs	r1, #0
 80a27d4:	f001 fcaa 	bl	80a412c <memset>
 80a27d8:	4620      	mov	r0, r4
 80a27da:	bd10      	pop	{r4, pc}

080a27dc <_Z17_fetch_usbserial1v>:

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a27dc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a27de:	4c0e      	ldr	r4, [pc, #56]	; (80a2818 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a27e0:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a27e2:	a801      	add	r0, sp, #4
 80a27e4:	f7ff fff2 	bl	80a27cc <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a27e8:	7823      	ldrb	r3, [r4, #0]
 80a27ea:	f3bf 8f5b 	dmb	ish
 80a27ee:	07db      	lsls	r3, r3, #31
 80a27f0:	d40e      	bmi.n	80a2810 <_Z17_fetch_usbserial1v+0x34>
 80a27f2:	4620      	mov	r0, r4
 80a27f4:	f7fd fc57 	bl	80a00a6 <__cxa_guard_acquire>
 80a27f8:	b150      	cbz	r0, 80a2810 <_Z17_fetch_usbserial1v+0x34>
 80a27fa:	2101      	movs	r1, #1
 80a27fc:	aa01      	add	r2, sp, #4
 80a27fe:	4807      	ldr	r0, [pc, #28]	; (80a281c <_Z17_fetch_usbserial1v+0x40>)
 80a2800:	f7ff ffa4 	bl	80a274c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2804:	4620      	mov	r0, r4
 80a2806:	f7fd fc53 	bl	80a00b0 <__cxa_guard_release>
 80a280a:	4805      	ldr	r0, [pc, #20]	; (80a2820 <_Z17_fetch_usbserial1v+0x44>)
 80a280c:	f001 fb80 	bl	80a3f10 <atexit>
  return _usbserial1;
}
 80a2810:	4802      	ldr	r0, [pc, #8]	; (80a281c <_Z17_fetch_usbserial1v+0x40>)
 80a2812:	b006      	add	sp, #24
 80a2814:	bd10      	pop	{r4, pc}
 80a2816:	bf00      	nop
 80a2818:	200003cc 	.word	0x200003cc
 80a281c:	200003e4 	.word	0x200003e4
 80a2820:	080a274b 	.word	0x080a274b

080a2824 <_Z29call_wiring_interrupt_handlerPv>:
      if (_M_empty())
 80a2824:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
 80a2826:	b510      	push	{r4, lr}
 80a2828:	b90a      	cbnz	r2, 80a282e <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
 80a282a:	f000 fb2d 	bl	80a2e88 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a282e:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
 80a2830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2834:	4718      	bx	r3
	...

080a2838 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
 80a2838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a283a:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
 80a283c:	f7fe fc8e 	bl	80a115c <HAL_Interrupts_Detach>
 80a2840:	4605      	mov	r5, r0
 80a2842:	b970      	cbnz	r0, 80a2862 <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
 80a2844:	4f08      	ldr	r7, [pc, #32]	; (80a2868 <_Z15detachInterruptt+0x30>)
 80a2846:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
 80a284a:	b146      	cbz	r6, 80a285e <_Z15detachInterruptt+0x26>
    class function<_Res(_ArgTypes...)>
 80a284c:	4630      	mov	r0, r6
 80a284e:	f7ff fb48 	bl	80a1ee2 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
 80a2852:	2110      	movs	r1, #16
 80a2854:	4630      	mov	r0, r6
 80a2856:	f7fd fc24 	bl	80a00a2 <_ZdlPvj>
        handlers[pin] = nullptr;
 80a285a:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
 80a285e:	2001      	movs	r0, #1
 80a2860:	e000      	b.n	80a2864 <_Z15detachInterruptt+0x2c>
        return false;
 80a2862:	2000      	movs	r0, #0
    }
    return true;
}
 80a2864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a2866:	bf00      	nop
 80a2868:	200003f8 	.word	0x200003f8

080a286c <_ZNSt8functionIFvvEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 80a286c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a286e:	2300      	movs	r3, #0
 80a2870:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80a2872:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a2874:	4604      	mov	r4, r0
 80a2876:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a2878:	b12b      	cbz	r3, 80a2886 <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a287a:	2202      	movs	r2, #2
 80a287c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a287e:	68eb      	ldr	r3, [r5, #12]
 80a2880:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a2882:	68ab      	ldr	r3, [r5, #8]
 80a2884:	60a3      	str	r3, [r4, #8]
    }
 80a2886:	4620      	mov	r0, r4
 80a2888:	bd38      	pop	{r3, r4, r5, pc}
	...

080a288c <_Z16allocate_handlertRSt8functionIFvvEE>:
{
 80a288c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
 80a288e:	4f0c      	ldr	r7, [pc, #48]	; (80a28c0 <_Z16allocate_handlertRSt8functionIFvvEE+0x34>)
{
 80a2890:	4605      	mov	r5, r0
    delete handlers[pin];
 80a2892:	f857 4020 	ldr.w	r4, [r7, r0, lsl #2]
{
 80a2896:	460e      	mov	r6, r1
    delete handlers[pin];
 80a2898:	b134      	cbz	r4, 80a28a8 <_Z16allocate_handlertRSt8functionIFvvEE+0x1c>
    class function<_Res(_ArgTypes...)>
 80a289a:	4620      	mov	r0, r4
 80a289c:	f7ff fb21 	bl	80a1ee2 <_ZNSt14_Function_baseD1Ev>
 80a28a0:	2110      	movs	r1, #16
 80a28a2:	4620      	mov	r0, r4
 80a28a4:	f7fd fbfd 	bl	80a00a2 <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
 80a28a8:	2010      	movs	r0, #16
 80a28aa:	f7fd fbf6 	bl	80a009a <_Znwj>
 80a28ae:	4604      	mov	r4, r0
 80a28b0:	b110      	cbz	r0, 80a28b8 <_Z16allocate_handlertRSt8functionIFvvEE+0x2c>
 80a28b2:	4631      	mov	r1, r6
 80a28b4:	f7ff ffda 	bl	80a286c <_ZNSt8functionIFvvEEC1ERKS1_>
}
 80a28b8:	4620      	mov	r0, r4
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
 80a28ba:	f847 4025 	str.w	r4, [r7, r5, lsl #2]
}
 80a28be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a28c0:	200003f8 	.word	0x200003f8

080a28c4 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
{
 80a28c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a28c6:	460c      	mov	r4, r1
 80a28c8:	4605      	mov	r5, r0
 80a28ca:	b085      	sub	sp, #20
 80a28cc:	4617      	mov	r7, r2
 80a28ce:	461e      	mov	r6, r3
    HAL_Interrupts_Detach(pin);
 80a28d0:	f7fe fc44 	bl	80a115c <HAL_Interrupts_Detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
 80a28d4:	4621      	mov	r1, r4
 80a28d6:	4628      	mov	r0, r5
 80a28d8:	f7ff ffd8 	bl	80a288c <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
 80a28dc:	4604      	mov	r4, r0
 80a28de:	b1e8      	cbz	r0, 80a291c <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
        HAL_InterruptExtraConfiguration extra = {};
 80a28e0:	2100      	movs	r1, #0
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a28e2:	2304      	movs	r3, #4
  if (priority >= 0) {
 80a28e4:	428e      	cmp	r6, r1
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a28e6:	f88d 300c 	strb.w	r3, [sp, #12]
    extra.IRQChannelSubPriority = subpriority;
 80a28ea:	bfa8      	it	ge
 80a28ec:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
        HAL_InterruptExtraConfiguration extra = {};
 80a28f0:	f8ad 100d 	strh.w	r1, [sp, #13]
 80a28f4:	f88d 100f 	strb.w	r1, [sp, #15]
    return &extra;
 80a28f8:	bfa4      	itt	ge
 80a28fa:	a903      	addge	r1, sp, #12
    extra.IRQChannelSubPriority = subpriority;
 80a28fc:	f88d 300e 	strbge.w	r3, [sp, #14]
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80a2900:	4602      	mov	r2, r0
 80a2902:	9100      	str	r1, [sp, #0]
 80a2904:	463b      	mov	r3, r7
 80a2906:	4628      	mov	r0, r5
 80a2908:	4906      	ldr	r1, [pc, #24]	; (80a2924 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x60>)
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a290a:	bfa8      	it	ge
 80a290c:	f88d 600d 	strbge.w	r6, [sp, #13]
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80a2910:	f7fe fc1c 	bl	80a114c <HAL_Interrupts_Attach>
 80a2914:	b110      	cbz	r0, 80a291c <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
            return false;
 80a2916:	2000      	movs	r0, #0
}
 80a2918:	b005      	add	sp, #20
 80a291a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return handler!=NULL;
 80a291c:	1e20      	subs	r0, r4, #0
 80a291e:	bf18      	it	ne
 80a2920:	2001      	movne	r0, #1
 80a2922:	e7f9      	b.n	80a2918 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x54>
 80a2924:	080a2825 	.word	0x080a2825

080a2928 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 80a2928:	4770      	bx	lr

080a292a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a292a:	7441      	strb	r1, [r0, #17]
}
 80a292c:	4770      	bx	lr

080a292e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a292e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a2930:	7c00      	ldrb	r0, [r0, #16]
 80a2932:	f7fe fca3 	bl	80a127c <hal_usart_available_data_for_write>
}
 80a2936:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a293a:	bd08      	pop	{r3, pc}

080a293c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a293c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a293e:	7c00      	ldrb	r0, [r0, #16]
 80a2940:	f7fe fc74 	bl	80a122c <hal_usart_available>
}
 80a2944:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2948:	bd08      	pop	{r3, pc}

080a294a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a294a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a294c:	7c00      	ldrb	r0, [r0, #16]
 80a294e:	f7fe fc7d 	bl	80a124c <hal_usart_peek>
}
 80a2952:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2956:	bd08      	pop	{r3, pc}

080a2958 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a2958:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a295a:	7c00      	ldrb	r0, [r0, #16]
 80a295c:	f7fe fc6e 	bl	80a123c <hal_usart_read>
}
 80a2960:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2964:	bd08      	pop	{r3, pc}

080a2966 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a2966:	7c00      	ldrb	r0, [r0, #16]
 80a2968:	f7fe bc78 	b.w	80a125c <hal_usart_flush>

080a296c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a296c:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a296e:	7c46      	ldrb	r6, [r0, #17]
{
 80a2970:	4604      	mov	r4, r0
 80a2972:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a2974:	b12e      	cbz	r6, 80a2982 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a2976:	4629      	mov	r1, r5
 80a2978:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a297a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a297e:	f7fe bc4d 	b.w	80a121c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a2982:	7c00      	ldrb	r0, [r0, #16]
 80a2984:	f7fe fc7a 	bl	80a127c <hal_usart_available_data_for_write>
 80a2988:	2800      	cmp	r0, #0
 80a298a:	dcf4      	bgt.n	80a2976 <_ZN11USARTSerial5writeEh+0xa>
}
 80a298c:	4630      	mov	r0, r6
 80a298e:	bd70      	pop	{r4, r5, r6, pc}

080a2990 <_ZN11USARTSerialD0Ev>:
 80a2990:	b510      	push	{r4, lr}
 80a2992:	4604      	mov	r4, r0
 80a2994:	2114      	movs	r1, #20
 80a2996:	f7fd fb84 	bl	80a00a2 <_ZdlPvj>
 80a299a:	4620      	mov	r0, r4
 80a299c:	bd10      	pop	{r4, pc}
	...

080a29a0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a29a0:	b510      	push	{r4, lr}
 80a29a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a29a6:	4604      	mov	r4, r0
 80a29a8:	4608      	mov	r0, r1
 80a29aa:	4611      	mov	r1, r2
 80a29ac:	2200      	movs	r2, #0
 80a29ae:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80a29b2:	4b04      	ldr	r3, [pc, #16]	; (80a29c4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 80a29b4:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a29b6:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a29b8:	2301      	movs	r3, #1
 80a29ba:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 80a29bc:	f7fe fc66 	bl	80a128c <hal_usart_init_ex>
}
 80a29c0:	4620      	mov	r0, r4
 80a29c2:	bd10      	pop	{r4, pc}
 80a29c4:	080a75f8 	.word	0x080a75f8

080a29c8 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a29c8:	b510      	push	{r4, lr}
      if (_M_empty())
 80a29ca:	6883      	ldr	r3, [r0, #8]
 80a29cc:	4604      	mov	r4, r0
 80a29ce:	b90b      	cbnz	r3, 80a29d4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a29d0:	f000 fa5a 	bl	80a2e88 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a29d4:	68c3      	ldr	r3, [r0, #12]
 80a29d6:	4798      	blx	r3
      if (_M_manager)
 80a29d8:	68a3      	ldr	r3, [r4, #8]
 80a29da:	b11b      	cbz	r3, 80a29e4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a29dc:	2203      	movs	r2, #3
 80a29de:	4621      	mov	r1, r4
 80a29e0:	4620      	mov	r0, r4
 80a29e2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a29e4:	4620      	mov	r0, r4
}
 80a29e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a29ea:	2110      	movs	r1, #16
 80a29ec:	f7fd bb59 	b.w	80a00a2 <_ZdlPvj>

080a29f0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a29f0:	4770      	bx	lr

080a29f2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a29f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a29f4:	4606      	mov	r6, r0
 80a29f6:	4615      	mov	r5, r2
 80a29f8:	460c      	mov	r4, r1
 80a29fa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a29fc:	42bc      	cmp	r4, r7
 80a29fe:	d006      	beq.n	80a2a0e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a2a00:	6833      	ldr	r3, [r6, #0]
 80a2a02:	4630      	mov	r0, r6
 80a2a04:	689b      	ldr	r3, [r3, #8]
 80a2a06:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a2a0a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a2a0c:	e7f6      	b.n	80a29fc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a2a0e:	4628      	mov	r0, r5
 80a2a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2a12 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a2a12:	2200      	movs	r2, #0
 80a2a14:	7c00      	ldrb	r0, [r0, #16]
 80a2a16:	f7fe bc41 	b.w	80a129c <hal_i2c_write>

080a2a1a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a2a1a:	2100      	movs	r1, #0
 80a2a1c:	7c00      	ldrb	r0, [r0, #16]
 80a2a1e:	f7fe bc45 	b.w	80a12ac <hal_i2c_available>

080a2a22 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a2a22:	2100      	movs	r1, #0
 80a2a24:	7c00      	ldrb	r0, [r0, #16]
 80a2a26:	f7fe bc49 	b.w	80a12bc <hal_i2c_read>

080a2a2a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a2a2a:	2100      	movs	r1, #0
 80a2a2c:	7c00      	ldrb	r0, [r0, #16]
 80a2a2e:	f7fe bc4d 	b.w	80a12cc <hal_i2c_peek>

080a2a32 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a2a32:	2100      	movs	r1, #0
 80a2a34:	7c00      	ldrb	r0, [r0, #16]
 80a2a36:	f7fe bc51 	b.w	80a12dc <hal_i2c_flush>

080a2a3a <_ZN7TwoWireD0Ev>:
 80a2a3a:	b510      	push	{r4, lr}
 80a2a3c:	4604      	mov	r4, r0
 80a2a3e:	2114      	movs	r1, #20
 80a2a40:	f7fd fb2f 	bl	80a00a2 <_ZdlPvj>
 80a2a44:	4620      	mov	r0, r4
 80a2a46:	bd10      	pop	{r4, pc}

080a2a48 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a2a48:	b510      	push	{r4, lr}
 80a2a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2a4e:	4604      	mov	r4, r0
 80a2a50:	4608      	mov	r0, r1
 80a2a52:	2100      	movs	r1, #0
 80a2a54:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a2a58:	4b03      	ldr	r3, [pc, #12]	; (80a2a68 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a2a5a:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a2a5c:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a2a5e:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a2a60:	f7fe fc4c 	bl	80a12fc <hal_i2c_init>
}
 80a2a64:	4620      	mov	r0, r4
 80a2a66:	bd10      	pop	{r4, pc}
 80a2a68:	080a7628 	.word	0x080a7628

080a2a6c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2a6c:	2200      	movs	r2, #0
 80a2a6e:	6840      	ldr	r0, [r0, #4]
 80a2a70:	4611      	mov	r1, r2
 80a2a72:	f7fe bd09 	b.w	80a1488 <network_ready>

080a2a76 <_ZN5spark9WiFiClass7resolveEPKc>:
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2a76:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2a78:	4615      	mov	r5, r2
 80a2a7a:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2a7c:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a2a7e:	460e      	mov	r6, r1
 80a2a80:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a2a82:	2100      	movs	r1, #0
 80a2a84:	a803      	add	r0, sp, #12
 80a2a86:	f001 fb51 	bl	80a412c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2a8a:	4628      	mov	r0, r5
 80a2a8c:	f002 f8e8 	bl	80a4c60 <strlen>
 80a2a90:	2700      	movs	r7, #0
 80a2a92:	b281      	uxth	r1, r0
 80a2a94:	6873      	ldr	r3, [r6, #4]
 80a2a96:	4628      	mov	r0, r5
 80a2a98:	9700      	str	r7, [sp, #0]
 80a2a9a:	aa03      	add	r2, sp, #12
 80a2a9c:	f7fe fc90 	bl	80a13c0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2aa0:	b130      	cbz	r0, 80a2ab0 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a2aa2:	4639      	mov	r1, r7
 80a2aa4:	4620      	mov	r0, r4
 80a2aa6:	f7ff fdf1 	bl	80a268c <_ZN9IPAddressC1Em>
    }
 80a2aaa:	4620      	mov	r0, r4
 80a2aac:	b009      	add	sp, #36	; 0x24
 80a2aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2ab0:	4620      	mov	r0, r4
 80a2ab2:	a903      	add	r1, sp, #12
 80a2ab4:	f7ff fdd8 	bl	80a2668 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a2ab8:	e7f7      	b.n	80a2aaa <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a2aba <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a2aba:	2200      	movs	r2, #0
 80a2abc:	6840      	ldr	r0, [r0, #4]
 80a2abe:	4611      	mov	r1, r2
 80a2ac0:	f7fe bd02 	b.w	80a14c8 <network_listening>

080a2ac4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a2ac4:	2200      	movs	r2, #0
 80a2ac6:	6840      	ldr	r0, [r0, #4]
 80a2ac8:	4611      	mov	r1, r2
 80a2aca:	f7fe bd0d 	b.w	80a14e8 <network_get_listen_timeout>

080a2ace <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a2ace:	2200      	movs	r2, #0
 80a2ad0:	6840      	ldr	r0, [r0, #4]
 80a2ad2:	f7fe bd01 	b.w	80a14d8 <network_set_listen_timeout>

080a2ad6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2ad6:	2200      	movs	r2, #0
 80a2ad8:	6840      	ldr	r0, [r0, #4]
 80a2ada:	f081 0101 	eor.w	r1, r1, #1
 80a2ade:	f7fe bceb 	b.w	80a14b8 <network_listen>

080a2ae2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a2ae2:	2300      	movs	r3, #0
 80a2ae4:	6840      	ldr	r0, [r0, #4]
 80a2ae6:	461a      	mov	r2, r3
 80a2ae8:	4619      	mov	r1, r3
 80a2aea:	f7fe bcdd 	b.w	80a14a8 <network_off>

080a2aee <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a2aee:	2300      	movs	r3, #0
 80a2af0:	6840      	ldr	r0, [r0, #4]
 80a2af2:	461a      	mov	r2, r3
 80a2af4:	4619      	mov	r1, r3
 80a2af6:	f7fe bccf 	b.w	80a1498 <network_on>

080a2afa <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a2afa:	2200      	movs	r2, #0
 80a2afc:	6840      	ldr	r0, [r0, #4]
 80a2afe:	4611      	mov	r1, r2
 80a2b00:	f7fe bcb2 	b.w	80a1468 <network_connecting>

080a2b04 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2b04:	2200      	movs	r2, #0
 80a2b06:	2102      	movs	r1, #2
 80a2b08:	6840      	ldr	r0, [r0, #4]
 80a2b0a:	f7fe bcb5 	b.w	80a1478 <network_disconnect>

080a2b0e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a2b0e:	2300      	movs	r3, #0
 80a2b10:	6840      	ldr	r0, [r0, #4]
 80a2b12:	461a      	mov	r2, r3
 80a2b14:	f7fe bca0 	b.w	80a1458 <network_connect>

080a2b18 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2b18:	2204      	movs	r2, #4
 80a2b1a:	4b02      	ldr	r3, [pc, #8]	; (80a2b24 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2b1c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2b1e:	4a02      	ldr	r2, [pc, #8]	; (80a2b28 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2b20:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a2b22:	4770      	bx	lr
 80a2b24:	20000458 	.word	0x20000458
 80a2b28:	080a7650 	.word	0x080a7650

080a2b2c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a2b2c:	2300      	movs	r3, #0
 80a2b2e:	6840      	ldr	r0, [r0, #4]
 80a2b30:	461a      	mov	r2, r3
 80a2b32:	f7fe bc91 	b.w	80a1458 <network_connect>

080a2b36 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a2b36:	2200      	movs	r2, #0
 80a2b38:	2102      	movs	r1, #2
 80a2b3a:	6840      	ldr	r0, [r0, #4]
 80a2b3c:	f7fe bc9c 	b.w	80a1478 <network_disconnect>

080a2b40 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2b40:	2200      	movs	r2, #0
 80a2b42:	6840      	ldr	r0, [r0, #4]
 80a2b44:	4611      	mov	r1, r2
 80a2b46:	f7fe bc8f 	b.w	80a1468 <network_connecting>

080a2b4a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a2b4a:	2200      	movs	r2, #0
 80a2b4c:	6840      	ldr	r0, [r0, #4]
 80a2b4e:	4611      	mov	r1, r2
 80a2b50:	f7fe bc9a 	b.w	80a1488 <network_ready>

080a2b54 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2b54:	2300      	movs	r3, #0
 80a2b56:	6840      	ldr	r0, [r0, #4]
 80a2b58:	461a      	mov	r2, r3
 80a2b5a:	4619      	mov	r1, r3
 80a2b5c:	f7fe bc9c 	b.w	80a1498 <network_on>

080a2b60 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2b60:	2300      	movs	r3, #0
 80a2b62:	6840      	ldr	r0, [r0, #4]
 80a2b64:	461a      	mov	r2, r3
 80a2b66:	4619      	mov	r1, r3
 80a2b68:	f7fe bc9e 	b.w	80a14a8 <network_off>

080a2b6c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a2b6c:	2100      	movs	r1, #0
 80a2b6e:	6840      	ldr	r0, [r0, #4]
 80a2b70:	f7fe bcc2 	b.w	80a14f8 <network_is_on>

080a2b74 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a2b74:	2100      	movs	r1, #0
 80a2b76:	6840      	ldr	r0, [r0, #4]
 80a2b78:	f7fe bcc6 	b.w	80a1508 <network_is_off>

080a2b7c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a2b7c:	2200      	movs	r2, #0
 80a2b7e:	6840      	ldr	r0, [r0, #4]
 80a2b80:	f081 0101 	eor.w	r1, r1, #1
 80a2b84:	f7fe bc98 	b.w	80a14b8 <network_listen>

080a2b88 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2b88:	2200      	movs	r2, #0
 80a2b8a:	6840      	ldr	r0, [r0, #4]
 80a2b8c:	f7fe bca4 	b.w	80a14d8 <network_set_listen_timeout>

080a2b90 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2b90:	2200      	movs	r2, #0
 80a2b92:	6840      	ldr	r0, [r0, #4]
 80a2b94:	4611      	mov	r1, r2
 80a2b96:	f7fe bca7 	b.w	80a14e8 <network_get_listen_timeout>

080a2b9a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a2b9a:	2200      	movs	r2, #0
 80a2b9c:	6840      	ldr	r0, [r0, #4]
 80a2b9e:	4611      	mov	r1, r2
 80a2ba0:	f7fe bc92 	b.w	80a14c8 <network_listening>

080a2ba4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2ba4:	b570      	push	{r4, r5, r6, lr}
 80a2ba6:	4615      	mov	r5, r2
 80a2ba8:	b08e      	sub	sp, #56	; 0x38
 80a2baa:	4604      	mov	r4, r0
    IPAddress addr;
 80a2bac:	a808      	add	r0, sp, #32
 80a2bae:	f7ff fd4d 	bl	80a264c <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a2bb2:	2211      	movs	r2, #17
 80a2bb4:	2100      	movs	r1, #0
 80a2bb6:	a803      	add	r0, sp, #12
 80a2bb8:	f001 fab8 	bl	80a412c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2bbc:	2600      	movs	r6, #0
 80a2bbe:	4628      	mov	r0, r5
 80a2bc0:	f002 f84e 	bl	80a4c60 <strlen>
 80a2bc4:	4b0a      	ldr	r3, [pc, #40]	; (80a2bf0 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2bc6:	9600      	str	r6, [sp, #0]
 80a2bc8:	b281      	uxth	r1, r0
 80a2bca:	685b      	ldr	r3, [r3, #4]
 80a2bcc:	4628      	mov	r0, r5
 80a2bce:	aa03      	add	r2, sp, #12
 80a2bd0:	f7fe fbf6 	bl	80a13c0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2bd4:	b130      	cbz	r0, 80a2be4 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a2bd6:	4631      	mov	r1, r6
 80a2bd8:	4620      	mov	r0, r4
 80a2bda:	f7ff fd57 	bl	80a268c <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2bde:	4620      	mov	r0, r4
 80a2be0:	b00e      	add	sp, #56	; 0x38
 80a2be2:	bd70      	pop	{r4, r5, r6, pc}
 80a2be4:	4620      	mov	r0, r4
 80a2be6:	a903      	add	r1, sp, #12
 80a2be8:	f7ff fd3e 	bl	80a2668 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a2bec:	e7f7      	b.n	80a2bde <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a2bee:	bf00      	nop
 80a2bf0:	20000458 	.word	0x20000458

080a2bf4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a2bf4:	4b02      	ldr	r3, [pc, #8]	; (80a2c00 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2bf6:	4a03      	ldr	r2, [pc, #12]	; (80a2c04 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2bf8:	601a      	str	r2, [r3, #0]
 80a2bfa:	2200      	movs	r2, #0
 80a2bfc:	605a      	str	r2, [r3, #4]

} // spark
 80a2bfe:	4770      	bx	lr
 80a2c00:	20000460 	.word	0x20000460
 80a2c04:	080a768c 	.word	0x080a768c

080a2c08 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a2c08:	4b02      	ldr	r3, [pc, #8]	; (80a2c14 <__tcf_0+0xc>)
 80a2c0a:	6898      	ldr	r0, [r3, #8]
 80a2c0c:	b108      	cbz	r0, 80a2c12 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a2c0e:	f7fe bafd 	b.w	80a120c <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a2c12:	4770      	bx	lr
 80a2c14:	2000046c 	.word	0x2000046c

080a2c18 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a2c18:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a2c1a:	b570      	push	{r4, r5, r6, lr}
 80a2c1c:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a2c1e:	d901      	bls.n	80a2c24 <pinAvailable+0xc>
    return false;
 80a2c20:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a2c22:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2c24:	f1a0 030d 	sub.w	r3, r0, #13
 80a2c28:	2b02      	cmp	r3, #2
 80a2c2a:	d90b      	bls.n	80a2c44 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a2c2c:	2801      	cmp	r0, #1
 80a2c2e:	d824      	bhi.n	80a2c7a <pinAvailable+0x62>
 80a2c30:	f000 f904 	bl	80a2e3c <_Z19__fetch_global_Wirev>
 80a2c34:	2100      	movs	r1, #0
 80a2c36:	7c00      	ldrb	r0, [r0, #16]
 80a2c38:	f7fe fb58 	bl	80a12ec <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2c3c:	f080 0001 	eor.w	r0, r0, #1
 80a2c40:	b2c0      	uxtb	r0, r0
 80a2c42:	e7ee      	b.n	80a2c22 <pinAvailable+0xa>
 80a2c44:	4e12      	ldr	r6, [pc, #72]	; (80a2c90 <pinAvailable+0x78>)
 80a2c46:	7831      	ldrb	r1, [r6, #0]
 80a2c48:	f3bf 8f5b 	dmb	ish
 80a2c4c:	f011 0501 	ands.w	r5, r1, #1
 80a2c50:	d10d      	bne.n	80a2c6e <pinAvailable+0x56>
 80a2c52:	4630      	mov	r0, r6
 80a2c54:	f7fd fa27 	bl	80a00a6 <__cxa_guard_acquire>
 80a2c58:	b148      	cbz	r0, 80a2c6e <pinAvailable+0x56>
 80a2c5a:	4629      	mov	r1, r5
 80a2c5c:	480d      	ldr	r0, [pc, #52]	; (80a2c94 <pinAvailable+0x7c>)
 80a2c5e:	f7fe fcf3 	bl	80a1648 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a2c62:	4630      	mov	r0, r6
 80a2c64:	f7fd fa24 	bl	80a00b0 <__cxa_guard_release>
 80a2c68:	480b      	ldr	r0, [pc, #44]	; (80a2c98 <pinAvailable+0x80>)
 80a2c6a:	f001 f951 	bl	80a3f10 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2c6e:	4b09      	ldr	r3, [pc, #36]	; (80a2c94 <pinAvailable+0x7c>)
 80a2c70:	7818      	ldrb	r0, [r3, #0]
 80a2c72:	f7fe fb55 	bl	80a1320 <hal_spi_is_enabled>
 80a2c76:	2800      	cmp	r0, #0
 80a2c78:	d1d2      	bne.n	80a2c20 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2c7a:	3c12      	subs	r4, #18
 80a2c7c:	2c01      	cmp	r4, #1
 80a2c7e:	d805      	bhi.n	80a2c8c <pinAvailable+0x74>
 80a2c80:	f000 f87c 	bl	80a2d7c <_Z22__fetch_global_Serial1v>
 80a2c84:	7c00      	ldrb	r0, [r0, #16]
 80a2c86:	f7fe faf1 	bl	80a126c <hal_usart_is_enabled>
 80a2c8a:	e7d7      	b.n	80a2c3c <pinAvailable+0x24>
  return true; // 'pin' is available
 80a2c8c:	2001      	movs	r0, #1
 80a2c8e:	e7c8      	b.n	80a2c22 <pinAvailable+0xa>
 80a2c90:	20000468 	.word	0x20000468
 80a2c94:	2000046c 	.word	0x2000046c
 80a2c98:	080a2c09 	.word	0x080a2c09

080a2c9c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2c9c:	2817      	cmp	r0, #23
{
 80a2c9e:	b538      	push	{r3, r4, r5, lr}
 80a2ca0:	4604      	mov	r4, r0
 80a2ca2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2ca4:	d80a      	bhi.n	80a2cbc <pinMode+0x20>
 80a2ca6:	29ff      	cmp	r1, #255	; 0xff
 80a2ca8:	d008      	beq.n	80a2cbc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a2caa:	f7ff ffb5 	bl	80a2c18 <pinAvailable>
 80a2cae:	b128      	cbz	r0, 80a2cbc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a2cb0:	4629      	mov	r1, r5
 80a2cb2:	4620      	mov	r0, r4
}
 80a2cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a2cb8:	f7fe ba28 	b.w	80a110c <HAL_Pin_Mode>
}
 80a2cbc:	bd38      	pop	{r3, r4, r5, pc}

080a2cbe <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2cbe:	b538      	push	{r3, r4, r5, lr}
 80a2cc0:	4604      	mov	r4, r0
 80a2cc2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2cc4:	f7fe fa2a 	bl	80a111c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2cc8:	28ff      	cmp	r0, #255	; 0xff
 80a2cca:	d010      	beq.n	80a2cee <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a2ccc:	2806      	cmp	r0, #6
 80a2cce:	d804      	bhi.n	80a2cda <digitalWrite+0x1c>
 80a2cd0:	234d      	movs	r3, #77	; 0x4d
 80a2cd2:	fa23 f000 	lsr.w	r0, r3, r0
 80a2cd6:	07c3      	lsls	r3, r0, #31
 80a2cd8:	d409      	bmi.n	80a2cee <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2cda:	4620      	mov	r0, r4
 80a2cdc:	f7ff ff9c 	bl	80a2c18 <pinAvailable>
 80a2ce0:	b128      	cbz	r0, 80a2cee <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2ce2:	4629      	mov	r1, r5
 80a2ce4:	4620      	mov	r0, r4
}
 80a2ce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a2cea:	f7fe ba1f 	b.w	80a112c <HAL_GPIO_Write>
}
 80a2cee:	bd38      	pop	{r3, r4, r5, pc}

080a2cf0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a2cf0:	b510      	push	{r4, lr}
 80a2cf2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2cf4:	f7fe fa12 	bl	80a111c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a2cf8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a2cfa:	b2db      	uxtb	r3, r3
 80a2cfc:	2b01      	cmp	r3, #1
 80a2cfe:	d908      	bls.n	80a2d12 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a2d00:	4620      	mov	r0, r4
 80a2d02:	f7ff ff89 	bl	80a2c18 <pinAvailable>
 80a2d06:	b120      	cbz	r0, 80a2d12 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2d08:	4620      	mov	r0, r4
}
 80a2d0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a2d0e:	f7fe ba15 	b.w	80a113c <HAL_GPIO_Read>
}
 80a2d12:	2000      	movs	r0, #0
 80a2d14:	bd10      	pop	{r4, pc}

080a2d16 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a2d16:	b510      	push	{r4, lr}
 80a2d18:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
 80a2d1a:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a2d1c:	bf9c      	itt	ls
 80a2d1e:	340a      	addls	r4, #10
 80a2d20:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2d22:	4620      	mov	r0, r4
 80a2d24:	f7ff ff78 	bl	80a2c18 <pinAvailable>
 80a2d28:	b150      	cbz	r0, 80a2d40 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a2d2a:	2103      	movs	r1, #3
 80a2d2c:	4620      	mov	r0, r4
 80a2d2e:	f7fe f9e5 	bl	80a10fc <HAL_Validate_Pin_Function>
 80a2d32:	2803      	cmp	r0, #3
 80a2d34:	d104      	bne.n	80a2d40 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80a2d36:	4620      	mov	r0, r4
}
 80a2d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80a2d3c:	f7fe ba16 	b.w	80a116c <hal_adc_read>
}
 80a2d40:	2000      	movs	r0, #0
 80a2d42:	bd10      	pop	{r4, pc}

080a2d44 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a2d44:	4770      	bx	lr
	...

080a2d48 <_Z20acquireSerial1Bufferv>:
{
 80a2d48:	b570      	push	{r4, r5, r6, lr}
    hal_usart_buffer_config_t config = {
 80a2d4a:	2514      	movs	r5, #20
{
 80a2d4c:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 80a2d4e:	462a      	mov	r2, r5
 80a2d50:	2100      	movs	r1, #0
 80a2d52:	f001 f9eb 	bl	80a412c <memset>
 80a2d56:	8025      	strh	r5, [r4, #0]
 80a2d58:	2580      	movs	r5, #128	; 0x80
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a2d5a:	4e07      	ldr	r6, [pc, #28]	; (80a2d78 <_Z20acquireSerial1Bufferv+0x30>)
 80a2d5c:	4628      	mov	r0, r5
 80a2d5e:	4631      	mov	r1, r6
    hal_usart_buffer_config_t config = {
 80a2d60:	8125      	strh	r5, [r4, #8]
 80a2d62:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a2d64:	f000 f88e 	bl	80a2e84 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a2d68:	4631      	mov	r1, r6
    };
 80a2d6a:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a2d6c:	4628      	mov	r0, r5
 80a2d6e:	f000 f889 	bl	80a2e84 <_ZnajRKSt9nothrow_t>
    };
 80a2d72:	60e0      	str	r0, [r4, #12]
}
 80a2d74:	4620      	mov	r0, r4
 80a2d76:	bd70      	pop	{r4, r5, r6, pc}
 80a2d78:	080a76c0 	.word	0x080a76c0

080a2d7c <_Z22__fetch_global_Serial1v>:
{
 80a2d7c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a2d7e:	4d0e      	ldr	r5, [pc, #56]	; (80a2db8 <_Z22__fetch_global_Serial1v+0x3c>)
{
 80a2d80:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a2d82:	7829      	ldrb	r1, [r5, #0]
 80a2d84:	f3bf 8f5b 	dmb	ish
 80a2d88:	f011 0401 	ands.w	r4, r1, #1
 80a2d8c:	d111      	bne.n	80a2db2 <_Z22__fetch_global_Serial1v+0x36>
 80a2d8e:	4628      	mov	r0, r5
 80a2d90:	f7fd f989 	bl	80a00a6 <__cxa_guard_acquire>
 80a2d94:	b168      	cbz	r0, 80a2db2 <_Z22__fetch_global_Serial1v+0x36>
 80a2d96:	a801      	add	r0, sp, #4
 80a2d98:	f7ff ffd6 	bl	80a2d48 <_Z20acquireSerial1Bufferv>
 80a2d9c:	4621      	mov	r1, r4
 80a2d9e:	aa01      	add	r2, sp, #4
 80a2da0:	4806      	ldr	r0, [pc, #24]	; (80a2dbc <_Z22__fetch_global_Serial1v+0x40>)
 80a2da2:	f7ff fdfd 	bl	80a29a0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 80a2da6:	4628      	mov	r0, r5
 80a2da8:	f7fd f982 	bl	80a00b0 <__cxa_guard_release>
 80a2dac:	4804      	ldr	r0, [pc, #16]	; (80a2dc0 <_Z22__fetch_global_Serial1v+0x44>)
 80a2dae:	f001 f8af 	bl	80a3f10 <atexit>
    return serial1;
}
 80a2db2:	4802      	ldr	r0, [pc, #8]	; (80a2dbc <_Z22__fetch_global_Serial1v+0x40>)
 80a2db4:	b007      	add	sp, #28
 80a2db6:	bd30      	pop	{r4, r5, pc}
 80a2db8:	20000478 	.word	0x20000478
 80a2dbc:	2000047c 	.word	0x2000047c
 80a2dc0:	080a2d45 	.word	0x080a2d45

080a2dc4 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 80a2dc4:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 80a2dc6:	4c08      	ldr	r4, [pc, #32]	; (80a2de8 <_Z21__fetch_global_EEPROMv+0x24>)
 80a2dc8:	7823      	ldrb	r3, [r4, #0]
 80a2dca:	f3bf 8f5b 	dmb	ish
 80a2dce:	07db      	lsls	r3, r3, #31
 80a2dd0:	d408      	bmi.n	80a2de4 <_Z21__fetch_global_EEPROMv+0x20>
 80a2dd2:	4620      	mov	r0, r4
 80a2dd4:	f7fd f967 	bl	80a00a6 <__cxa_guard_acquire>
 80a2dd8:	b120      	cbz	r0, 80a2de4 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 80a2dda:	f7fe f9ef 	bl	80a11bc <HAL_EEPROM_Init>
 80a2dde:	4620      	mov	r0, r4
 80a2de0:	f7fd f966 	bl	80a00b0 <__cxa_guard_release>
	return eeprom;
}
 80a2de4:	4801      	ldr	r0, [pc, #4]	; (80a2dec <_Z21__fetch_global_EEPROMv+0x28>)
 80a2de6:	bd10      	pop	{r4, pc}
 80a2de8:	20000494 	.word	0x20000494
 80a2dec:	20000498 	.word	0x20000498

080a2df0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2df0:	2300      	movs	r3, #0
 80a2df2:	b507      	push	{r0, r1, r2, lr}
 80a2df4:	461a      	mov	r2, r3
 80a2df6:	4619      	mov	r1, r3
 80a2df8:	9300      	str	r3, [sp, #0]
 80a2dfa:	4803      	ldr	r0, [pc, #12]	; (80a2e08 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a2dfc:	f7ff fc5c 	bl	80a26b8 <_ZN9IPAddressC1Ehhhh>
 80a2e00:	b003      	add	sp, #12
 80a2e02:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2e06:	bf00      	nop
 80a2e08:	2000049c 	.word	0x2000049c

080a2e0c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2e0c:	4770      	bx	lr
	...

080a2e10 <_Z17acquireWireBufferv>:
{
 80a2e10:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a2e12:	2314      	movs	r3, #20
 80a2e14:	2520      	movs	r5, #32
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2e16:	4e08      	ldr	r6, [pc, #32]	; (80a2e38 <_Z17acquireWireBufferv+0x28>)
{
 80a2e18:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a2e1a:	6003      	str	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2e1c:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a2e1e:	6085      	str	r5, [r0, #8]
 80a2e20:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2e22:	4628      	mov	r0, r5
 80a2e24:	f000 f82e 	bl	80a2e84 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2e28:	4631      	mov	r1, r6
	};
 80a2e2a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2e2c:	4628      	mov	r0, r5
 80a2e2e:	f000 f829 	bl	80a2e84 <_ZnajRKSt9nothrow_t>
	};
 80a2e32:	60e0      	str	r0, [r4, #12]
}
 80a2e34:	4620      	mov	r0, r4
 80a2e36:	bd70      	pop	{r4, r5, r6, pc}
 80a2e38:	080a76c0 	.word	0x080a76c0

080a2e3c <_Z19__fetch_global_Wirev>:
{
 80a2e3c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2e3e:	4d0e      	ldr	r5, [pc, #56]	; (80a2e78 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a2e40:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2e42:	7829      	ldrb	r1, [r5, #0]
 80a2e44:	f3bf 8f5b 	dmb	ish
 80a2e48:	f011 0401 	ands.w	r4, r1, #1
 80a2e4c:	d111      	bne.n	80a2e72 <_Z19__fetch_global_Wirev+0x36>
 80a2e4e:	4628      	mov	r0, r5
 80a2e50:	f7fd f929 	bl	80a00a6 <__cxa_guard_acquire>
 80a2e54:	b168      	cbz	r0, 80a2e72 <_Z19__fetch_global_Wirev+0x36>
 80a2e56:	a801      	add	r0, sp, #4
 80a2e58:	f7ff ffda 	bl	80a2e10 <_Z17acquireWireBufferv>
 80a2e5c:	4621      	mov	r1, r4
 80a2e5e:	aa01      	add	r2, sp, #4
 80a2e60:	4806      	ldr	r0, [pc, #24]	; (80a2e7c <_Z19__fetch_global_Wirev+0x40>)
 80a2e62:	f7ff fdf1 	bl	80a2a48 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a2e66:	4628      	mov	r0, r5
 80a2e68:	f7fd f922 	bl	80a00b0 <__cxa_guard_release>
 80a2e6c:	4804      	ldr	r0, [pc, #16]	; (80a2e80 <_Z19__fetch_global_Wirev+0x44>)
 80a2e6e:	f001 f84f 	bl	80a3f10 <atexit>
	return wire;
}
 80a2e72:	4802      	ldr	r0, [pc, #8]	; (80a2e7c <_Z19__fetch_global_Wirev+0x40>)
 80a2e74:	b007      	add	sp, #28
 80a2e76:	bd30      	pop	{r4, r5, pc}
 80a2e78:	200004b4 	.word	0x200004b4
 80a2e7c:	200004b8 	.word	0x200004b8
 80a2e80:	080a2e0d 	.word	0x080a2e0d

080a2e84 <_ZnajRKSt9nothrow_t>:
 80a2e84:	f7fd b90b 	b.w	80a009e <_Znaj>

080a2e88 <_ZSt25__throw_bad_function_callv>:
 80a2e88:	b508      	push	{r3, lr}
 80a2e8a:	f7fe fbb5 	bl	80a15f8 <abort>
	...

080a2e90 <nan>:
 80a2e90:	2000      	movs	r0, #0
 80a2e92:	4901      	ldr	r1, [pc, #4]	; (80a2e98 <nan+0x8>)
 80a2e94:	4770      	bx	lr
 80a2e96:	bf00      	nop
 80a2e98:	7ff80000 	.word	0x7ff80000

080a2e9c <__aeabi_drsub>:
 80a2e9c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a2ea0:	e002      	b.n	80a2ea8 <__adddf3>
 80a2ea2:	bf00      	nop

080a2ea4 <__aeabi_dsub>:
 80a2ea4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a2ea8 <__adddf3>:
 80a2ea8:	b530      	push	{r4, r5, lr}
 80a2eaa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a2eae:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a2eb2:	ea94 0f05 	teq	r4, r5
 80a2eb6:	bf08      	it	eq
 80a2eb8:	ea90 0f02 	teqeq	r0, r2
 80a2ebc:	bf1f      	itttt	ne
 80a2ebe:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a2ec2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a2ec6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a2eca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2ece:	f000 80e2 	beq.w	80a3096 <__adddf3+0x1ee>
 80a2ed2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a2ed6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a2eda:	bfb8      	it	lt
 80a2edc:	426d      	neglt	r5, r5
 80a2ede:	dd0c      	ble.n	80a2efa <__adddf3+0x52>
 80a2ee0:	442c      	add	r4, r5
 80a2ee2:	ea80 0202 	eor.w	r2, r0, r2
 80a2ee6:	ea81 0303 	eor.w	r3, r1, r3
 80a2eea:	ea82 0000 	eor.w	r0, r2, r0
 80a2eee:	ea83 0101 	eor.w	r1, r3, r1
 80a2ef2:	ea80 0202 	eor.w	r2, r0, r2
 80a2ef6:	ea81 0303 	eor.w	r3, r1, r3
 80a2efa:	2d36      	cmp	r5, #54	; 0x36
 80a2efc:	bf88      	it	hi
 80a2efe:	bd30      	pophi	{r4, r5, pc}
 80a2f00:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2f04:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2f08:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2f0c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2f10:	d002      	beq.n	80a2f18 <__adddf3+0x70>
 80a2f12:	4240      	negs	r0, r0
 80a2f14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2f18:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2f1c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2f20:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2f24:	d002      	beq.n	80a2f2c <__adddf3+0x84>
 80a2f26:	4252      	negs	r2, r2
 80a2f28:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2f2c:	ea94 0f05 	teq	r4, r5
 80a2f30:	f000 80a7 	beq.w	80a3082 <__adddf3+0x1da>
 80a2f34:	f1a4 0401 	sub.w	r4, r4, #1
 80a2f38:	f1d5 0e20 	rsbs	lr, r5, #32
 80a2f3c:	db0d      	blt.n	80a2f5a <__adddf3+0xb2>
 80a2f3e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a2f42:	fa22 f205 	lsr.w	r2, r2, r5
 80a2f46:	1880      	adds	r0, r0, r2
 80a2f48:	f141 0100 	adc.w	r1, r1, #0
 80a2f4c:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2f50:	1880      	adds	r0, r0, r2
 80a2f52:	fa43 f305 	asr.w	r3, r3, r5
 80a2f56:	4159      	adcs	r1, r3
 80a2f58:	e00e      	b.n	80a2f78 <__adddf3+0xd0>
 80a2f5a:	f1a5 0520 	sub.w	r5, r5, #32
 80a2f5e:	f10e 0e20 	add.w	lr, lr, #32
 80a2f62:	2a01      	cmp	r2, #1
 80a2f64:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a2f68:	bf28      	it	cs
 80a2f6a:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a2f6e:	fa43 f305 	asr.w	r3, r3, r5
 80a2f72:	18c0      	adds	r0, r0, r3
 80a2f74:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a2f78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2f7c:	d507      	bpl.n	80a2f8e <__adddf3+0xe6>
 80a2f7e:	f04f 0e00 	mov.w	lr, #0
 80a2f82:	f1dc 0c00 	rsbs	ip, ip, #0
 80a2f86:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a2f8a:	eb6e 0101 	sbc.w	r1, lr, r1
 80a2f8e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a2f92:	d31b      	bcc.n	80a2fcc <__adddf3+0x124>
 80a2f94:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a2f98:	d30c      	bcc.n	80a2fb4 <__adddf3+0x10c>
 80a2f9a:	0849      	lsrs	r1, r1, #1
 80a2f9c:	ea5f 0030 	movs.w	r0, r0, rrx
 80a2fa0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2fa4:	f104 0401 	add.w	r4, r4, #1
 80a2fa8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a2fac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a2fb0:	f080 809a 	bcs.w	80a30e8 <__adddf3+0x240>
 80a2fb4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2fb8:	bf08      	it	eq
 80a2fba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2fbe:	f150 0000 	adcs.w	r0, r0, #0
 80a2fc2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2fc6:	ea41 0105 	orr.w	r1, r1, r5
 80a2fca:	bd30      	pop	{r4, r5, pc}
 80a2fcc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2fd0:	4140      	adcs	r0, r0
 80a2fd2:	eb41 0101 	adc.w	r1, r1, r1
 80a2fd6:	3c01      	subs	r4, #1
 80a2fd8:	bf28      	it	cs
 80a2fda:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a2fde:	d2e9      	bcs.n	80a2fb4 <__adddf3+0x10c>
 80a2fe0:	f091 0f00 	teq	r1, #0
 80a2fe4:	bf04      	itt	eq
 80a2fe6:	4601      	moveq	r1, r0
 80a2fe8:	2000      	moveq	r0, #0
 80a2fea:	fab1 f381 	clz	r3, r1
 80a2fee:	bf08      	it	eq
 80a2ff0:	3320      	addeq	r3, #32
 80a2ff2:	f1a3 030b 	sub.w	r3, r3, #11
 80a2ff6:	f1b3 0220 	subs.w	r2, r3, #32
 80a2ffa:	da0c      	bge.n	80a3016 <__adddf3+0x16e>
 80a2ffc:	320c      	adds	r2, #12
 80a2ffe:	dd08      	ble.n	80a3012 <__adddf3+0x16a>
 80a3000:	f102 0c14 	add.w	ip, r2, #20
 80a3004:	f1c2 020c 	rsb	r2, r2, #12
 80a3008:	fa01 f00c 	lsl.w	r0, r1, ip
 80a300c:	fa21 f102 	lsr.w	r1, r1, r2
 80a3010:	e00c      	b.n	80a302c <__adddf3+0x184>
 80a3012:	f102 0214 	add.w	r2, r2, #20
 80a3016:	bfd8      	it	le
 80a3018:	f1c2 0c20 	rsble	ip, r2, #32
 80a301c:	fa01 f102 	lsl.w	r1, r1, r2
 80a3020:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a3024:	bfdc      	itt	le
 80a3026:	ea41 010c 	orrle.w	r1, r1, ip
 80a302a:	4090      	lslle	r0, r2
 80a302c:	1ae4      	subs	r4, r4, r3
 80a302e:	bfa2      	ittt	ge
 80a3030:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a3034:	4329      	orrge	r1, r5
 80a3036:	bd30      	popge	{r4, r5, pc}
 80a3038:	ea6f 0404 	mvn.w	r4, r4
 80a303c:	3c1f      	subs	r4, #31
 80a303e:	da1c      	bge.n	80a307a <__adddf3+0x1d2>
 80a3040:	340c      	adds	r4, #12
 80a3042:	dc0e      	bgt.n	80a3062 <__adddf3+0x1ba>
 80a3044:	f104 0414 	add.w	r4, r4, #20
 80a3048:	f1c4 0220 	rsb	r2, r4, #32
 80a304c:	fa20 f004 	lsr.w	r0, r0, r4
 80a3050:	fa01 f302 	lsl.w	r3, r1, r2
 80a3054:	ea40 0003 	orr.w	r0, r0, r3
 80a3058:	fa21 f304 	lsr.w	r3, r1, r4
 80a305c:	ea45 0103 	orr.w	r1, r5, r3
 80a3060:	bd30      	pop	{r4, r5, pc}
 80a3062:	f1c4 040c 	rsb	r4, r4, #12
 80a3066:	f1c4 0220 	rsb	r2, r4, #32
 80a306a:	fa20 f002 	lsr.w	r0, r0, r2
 80a306e:	fa01 f304 	lsl.w	r3, r1, r4
 80a3072:	ea40 0003 	orr.w	r0, r0, r3
 80a3076:	4629      	mov	r1, r5
 80a3078:	bd30      	pop	{r4, r5, pc}
 80a307a:	fa21 f004 	lsr.w	r0, r1, r4
 80a307e:	4629      	mov	r1, r5
 80a3080:	bd30      	pop	{r4, r5, pc}
 80a3082:	f094 0f00 	teq	r4, #0
 80a3086:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a308a:	bf06      	itte	eq
 80a308c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a3090:	3401      	addeq	r4, #1
 80a3092:	3d01      	subne	r5, #1
 80a3094:	e74e      	b.n	80a2f34 <__adddf3+0x8c>
 80a3096:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a309a:	bf18      	it	ne
 80a309c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a30a0:	d029      	beq.n	80a30f6 <__adddf3+0x24e>
 80a30a2:	ea94 0f05 	teq	r4, r5
 80a30a6:	bf08      	it	eq
 80a30a8:	ea90 0f02 	teqeq	r0, r2
 80a30ac:	d005      	beq.n	80a30ba <__adddf3+0x212>
 80a30ae:	ea54 0c00 	orrs.w	ip, r4, r0
 80a30b2:	bf04      	itt	eq
 80a30b4:	4619      	moveq	r1, r3
 80a30b6:	4610      	moveq	r0, r2
 80a30b8:	bd30      	pop	{r4, r5, pc}
 80a30ba:	ea91 0f03 	teq	r1, r3
 80a30be:	bf1e      	ittt	ne
 80a30c0:	2100      	movne	r1, #0
 80a30c2:	2000      	movne	r0, #0
 80a30c4:	bd30      	popne	{r4, r5, pc}
 80a30c6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a30ca:	d105      	bne.n	80a30d8 <__adddf3+0x230>
 80a30cc:	0040      	lsls	r0, r0, #1
 80a30ce:	4149      	adcs	r1, r1
 80a30d0:	bf28      	it	cs
 80a30d2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a30d6:	bd30      	pop	{r4, r5, pc}
 80a30d8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a30dc:	bf3c      	itt	cc
 80a30de:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a30e2:	bd30      	popcc	{r4, r5, pc}
 80a30e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a30e8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a30ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a30f0:	f04f 0000 	mov.w	r0, #0
 80a30f4:	bd30      	pop	{r4, r5, pc}
 80a30f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a30fa:	bf1a      	itte	ne
 80a30fc:	4619      	movne	r1, r3
 80a30fe:	4610      	movne	r0, r2
 80a3100:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a3104:	bf1c      	itt	ne
 80a3106:	460b      	movne	r3, r1
 80a3108:	4602      	movne	r2, r0
 80a310a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a310e:	bf06      	itte	eq
 80a3110:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a3114:	ea91 0f03 	teqeq	r1, r3
 80a3118:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a311c:	bd30      	pop	{r4, r5, pc}
 80a311e:	bf00      	nop

080a3120 <__aeabi_ui2d>:
 80a3120:	f090 0f00 	teq	r0, #0
 80a3124:	bf04      	itt	eq
 80a3126:	2100      	moveq	r1, #0
 80a3128:	4770      	bxeq	lr
 80a312a:	b530      	push	{r4, r5, lr}
 80a312c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3130:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3134:	f04f 0500 	mov.w	r5, #0
 80a3138:	f04f 0100 	mov.w	r1, #0
 80a313c:	e750      	b.n	80a2fe0 <__adddf3+0x138>
 80a313e:	bf00      	nop

080a3140 <__aeabi_i2d>:
 80a3140:	f090 0f00 	teq	r0, #0
 80a3144:	bf04      	itt	eq
 80a3146:	2100      	moveq	r1, #0
 80a3148:	4770      	bxeq	lr
 80a314a:	b530      	push	{r4, r5, lr}
 80a314c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3150:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3154:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a3158:	bf48      	it	mi
 80a315a:	4240      	negmi	r0, r0
 80a315c:	f04f 0100 	mov.w	r1, #0
 80a3160:	e73e      	b.n	80a2fe0 <__adddf3+0x138>
 80a3162:	bf00      	nop

080a3164 <__aeabi_f2d>:
 80a3164:	0042      	lsls	r2, r0, #1
 80a3166:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a316a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a316e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a3172:	bf1f      	itttt	ne
 80a3174:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a3178:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a317c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a3180:	4770      	bxne	lr
 80a3182:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a3186:	bf08      	it	eq
 80a3188:	4770      	bxeq	lr
 80a318a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a318e:	bf04      	itt	eq
 80a3190:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a3194:	4770      	bxeq	lr
 80a3196:	b530      	push	{r4, r5, lr}
 80a3198:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a319c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a31a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a31a4:	e71c      	b.n	80a2fe0 <__adddf3+0x138>
 80a31a6:	bf00      	nop

080a31a8 <__aeabi_ul2d>:
 80a31a8:	ea50 0201 	orrs.w	r2, r0, r1
 80a31ac:	bf08      	it	eq
 80a31ae:	4770      	bxeq	lr
 80a31b0:	b530      	push	{r4, r5, lr}
 80a31b2:	f04f 0500 	mov.w	r5, #0
 80a31b6:	e00a      	b.n	80a31ce <__aeabi_l2d+0x16>

080a31b8 <__aeabi_l2d>:
 80a31b8:	ea50 0201 	orrs.w	r2, r0, r1
 80a31bc:	bf08      	it	eq
 80a31be:	4770      	bxeq	lr
 80a31c0:	b530      	push	{r4, r5, lr}
 80a31c2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a31c6:	d502      	bpl.n	80a31ce <__aeabi_l2d+0x16>
 80a31c8:	4240      	negs	r0, r0
 80a31ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a31ce:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a31d2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a31d6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a31da:	f43f aed8 	beq.w	80a2f8e <__adddf3+0xe6>
 80a31de:	f04f 0203 	mov.w	r2, #3
 80a31e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a31e6:	bf18      	it	ne
 80a31e8:	3203      	addne	r2, #3
 80a31ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a31ee:	bf18      	it	ne
 80a31f0:	3203      	addne	r2, #3
 80a31f2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a31f6:	f1c2 0320 	rsb	r3, r2, #32
 80a31fa:	fa00 fc03 	lsl.w	ip, r0, r3
 80a31fe:	fa20 f002 	lsr.w	r0, r0, r2
 80a3202:	fa01 fe03 	lsl.w	lr, r1, r3
 80a3206:	ea40 000e 	orr.w	r0, r0, lr
 80a320a:	fa21 f102 	lsr.w	r1, r1, r2
 80a320e:	4414      	add	r4, r2
 80a3210:	e6bd      	b.n	80a2f8e <__adddf3+0xe6>
 80a3212:	bf00      	nop

080a3214 <__aeabi_dmul>:
 80a3214:	b570      	push	{r4, r5, r6, lr}
 80a3216:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a321a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a321e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a3222:	bf1d      	ittte	ne
 80a3224:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3228:	ea94 0f0c 	teqne	r4, ip
 80a322c:	ea95 0f0c 	teqne	r5, ip
 80a3230:	f000 f8de 	bleq	80a33f0 <__aeabi_dmul+0x1dc>
 80a3234:	442c      	add	r4, r5
 80a3236:	ea81 0603 	eor.w	r6, r1, r3
 80a323a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a323e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a3242:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a3246:	bf18      	it	ne
 80a3248:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a324c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3250:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a3254:	d038      	beq.n	80a32c8 <__aeabi_dmul+0xb4>
 80a3256:	fba0 ce02 	umull	ip, lr, r0, r2
 80a325a:	f04f 0500 	mov.w	r5, #0
 80a325e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a3262:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a3266:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a326a:	f04f 0600 	mov.w	r6, #0
 80a326e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a3272:	f09c 0f00 	teq	ip, #0
 80a3276:	bf18      	it	ne
 80a3278:	f04e 0e01 	orrne.w	lr, lr, #1
 80a327c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a3280:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a3284:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a3288:	d204      	bcs.n	80a3294 <__aeabi_dmul+0x80>
 80a328a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a328e:	416d      	adcs	r5, r5
 80a3290:	eb46 0606 	adc.w	r6, r6, r6
 80a3294:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a3298:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a329c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a32a0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a32a4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a32a8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a32ac:	bf88      	it	hi
 80a32ae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a32b2:	d81e      	bhi.n	80a32f2 <__aeabi_dmul+0xde>
 80a32b4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a32b8:	bf08      	it	eq
 80a32ba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a32be:	f150 0000 	adcs.w	r0, r0, #0
 80a32c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a32c6:	bd70      	pop	{r4, r5, r6, pc}
 80a32c8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a32cc:	ea46 0101 	orr.w	r1, r6, r1
 80a32d0:	ea40 0002 	orr.w	r0, r0, r2
 80a32d4:	ea81 0103 	eor.w	r1, r1, r3
 80a32d8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a32dc:	bfc2      	ittt	gt
 80a32de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a32e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a32e6:	bd70      	popgt	{r4, r5, r6, pc}
 80a32e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a32ec:	f04f 0e00 	mov.w	lr, #0
 80a32f0:	3c01      	subs	r4, #1
 80a32f2:	f300 80ab 	bgt.w	80a344c <__aeabi_dmul+0x238>
 80a32f6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a32fa:	bfde      	ittt	le
 80a32fc:	2000      	movle	r0, #0
 80a32fe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a3302:	bd70      	pople	{r4, r5, r6, pc}
 80a3304:	f1c4 0400 	rsb	r4, r4, #0
 80a3308:	3c20      	subs	r4, #32
 80a330a:	da35      	bge.n	80a3378 <__aeabi_dmul+0x164>
 80a330c:	340c      	adds	r4, #12
 80a330e:	dc1b      	bgt.n	80a3348 <__aeabi_dmul+0x134>
 80a3310:	f104 0414 	add.w	r4, r4, #20
 80a3314:	f1c4 0520 	rsb	r5, r4, #32
 80a3318:	fa00 f305 	lsl.w	r3, r0, r5
 80a331c:	fa20 f004 	lsr.w	r0, r0, r4
 80a3320:	fa01 f205 	lsl.w	r2, r1, r5
 80a3324:	ea40 0002 	orr.w	r0, r0, r2
 80a3328:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a332c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3330:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3334:	fa21 f604 	lsr.w	r6, r1, r4
 80a3338:	eb42 0106 	adc.w	r1, r2, r6
 80a333c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3340:	bf08      	it	eq
 80a3342:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3346:	bd70      	pop	{r4, r5, r6, pc}
 80a3348:	f1c4 040c 	rsb	r4, r4, #12
 80a334c:	f1c4 0520 	rsb	r5, r4, #32
 80a3350:	fa00 f304 	lsl.w	r3, r0, r4
 80a3354:	fa20 f005 	lsr.w	r0, r0, r5
 80a3358:	fa01 f204 	lsl.w	r2, r1, r4
 80a335c:	ea40 0002 	orr.w	r0, r0, r2
 80a3360:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3364:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3368:	f141 0100 	adc.w	r1, r1, #0
 80a336c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3370:	bf08      	it	eq
 80a3372:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3376:	bd70      	pop	{r4, r5, r6, pc}
 80a3378:	f1c4 0520 	rsb	r5, r4, #32
 80a337c:	fa00 f205 	lsl.w	r2, r0, r5
 80a3380:	ea4e 0e02 	orr.w	lr, lr, r2
 80a3384:	fa20 f304 	lsr.w	r3, r0, r4
 80a3388:	fa01 f205 	lsl.w	r2, r1, r5
 80a338c:	ea43 0302 	orr.w	r3, r3, r2
 80a3390:	fa21 f004 	lsr.w	r0, r1, r4
 80a3394:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3398:	fa21 f204 	lsr.w	r2, r1, r4
 80a339c:	ea20 0002 	bic.w	r0, r0, r2
 80a33a0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a33a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a33a8:	bf08      	it	eq
 80a33aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a33ae:	bd70      	pop	{r4, r5, r6, pc}
 80a33b0:	f094 0f00 	teq	r4, #0
 80a33b4:	d10f      	bne.n	80a33d6 <__aeabi_dmul+0x1c2>
 80a33b6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a33ba:	0040      	lsls	r0, r0, #1
 80a33bc:	eb41 0101 	adc.w	r1, r1, r1
 80a33c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a33c4:	bf08      	it	eq
 80a33c6:	3c01      	subeq	r4, #1
 80a33c8:	d0f7      	beq.n	80a33ba <__aeabi_dmul+0x1a6>
 80a33ca:	ea41 0106 	orr.w	r1, r1, r6
 80a33ce:	f095 0f00 	teq	r5, #0
 80a33d2:	bf18      	it	ne
 80a33d4:	4770      	bxne	lr
 80a33d6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a33da:	0052      	lsls	r2, r2, #1
 80a33dc:	eb43 0303 	adc.w	r3, r3, r3
 80a33e0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a33e4:	bf08      	it	eq
 80a33e6:	3d01      	subeq	r5, #1
 80a33e8:	d0f7      	beq.n	80a33da <__aeabi_dmul+0x1c6>
 80a33ea:	ea43 0306 	orr.w	r3, r3, r6
 80a33ee:	4770      	bx	lr
 80a33f0:	ea94 0f0c 	teq	r4, ip
 80a33f4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a33f8:	bf18      	it	ne
 80a33fa:	ea95 0f0c 	teqne	r5, ip
 80a33fe:	d00c      	beq.n	80a341a <__aeabi_dmul+0x206>
 80a3400:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3404:	bf18      	it	ne
 80a3406:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a340a:	d1d1      	bne.n	80a33b0 <__aeabi_dmul+0x19c>
 80a340c:	ea81 0103 	eor.w	r1, r1, r3
 80a3410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3414:	f04f 0000 	mov.w	r0, #0
 80a3418:	bd70      	pop	{r4, r5, r6, pc}
 80a341a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a341e:	bf06      	itte	eq
 80a3420:	4610      	moveq	r0, r2
 80a3422:	4619      	moveq	r1, r3
 80a3424:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3428:	d019      	beq.n	80a345e <__aeabi_dmul+0x24a>
 80a342a:	ea94 0f0c 	teq	r4, ip
 80a342e:	d102      	bne.n	80a3436 <__aeabi_dmul+0x222>
 80a3430:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a3434:	d113      	bne.n	80a345e <__aeabi_dmul+0x24a>
 80a3436:	ea95 0f0c 	teq	r5, ip
 80a343a:	d105      	bne.n	80a3448 <__aeabi_dmul+0x234>
 80a343c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a3440:	bf1c      	itt	ne
 80a3442:	4610      	movne	r0, r2
 80a3444:	4619      	movne	r1, r3
 80a3446:	d10a      	bne.n	80a345e <__aeabi_dmul+0x24a>
 80a3448:	ea81 0103 	eor.w	r1, r1, r3
 80a344c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3450:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a3454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3458:	f04f 0000 	mov.w	r0, #0
 80a345c:	bd70      	pop	{r4, r5, r6, pc}
 80a345e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a3462:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a3466:	bd70      	pop	{r4, r5, r6, pc}

080a3468 <__aeabi_ddiv>:
 80a3468:	b570      	push	{r4, r5, r6, lr}
 80a346a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a346e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a3472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a3476:	bf1d      	ittte	ne
 80a3478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a347c:	ea94 0f0c 	teqne	r4, ip
 80a3480:	ea95 0f0c 	teqne	r5, ip
 80a3484:	f000 f8a7 	bleq	80a35d6 <__aeabi_ddiv+0x16e>
 80a3488:	eba4 0405 	sub.w	r4, r4, r5
 80a348c:	ea81 0e03 	eor.w	lr, r1, r3
 80a3490:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3498:	f000 8088 	beq.w	80a35ac <__aeabi_ddiv+0x144>
 80a349c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a34a0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a34a4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a34a8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a34ac:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a34b0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a34b4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a34b8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a34bc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a34c0:	429d      	cmp	r5, r3
 80a34c2:	bf08      	it	eq
 80a34c4:	4296      	cmpeq	r6, r2
 80a34c6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a34ca:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a34ce:	d202      	bcs.n	80a34d6 <__aeabi_ddiv+0x6e>
 80a34d0:	085b      	lsrs	r3, r3, #1
 80a34d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a34d6:	1ab6      	subs	r6, r6, r2
 80a34d8:	eb65 0503 	sbc.w	r5, r5, r3
 80a34dc:	085b      	lsrs	r3, r3, #1
 80a34de:	ea4f 0232 	mov.w	r2, r2, rrx
 80a34e2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a34e6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a34ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80a34ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a34f2:	bf22      	ittt	cs
 80a34f4:	1ab6      	subcs	r6, r6, r2
 80a34f6:	4675      	movcs	r5, lr
 80a34f8:	ea40 000c 	orrcs.w	r0, r0, ip
 80a34fc:	085b      	lsrs	r3, r3, #1
 80a34fe:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3502:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3506:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a350a:	bf22      	ittt	cs
 80a350c:	1ab6      	subcs	r6, r6, r2
 80a350e:	4675      	movcs	r5, lr
 80a3510:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a3514:	085b      	lsrs	r3, r3, #1
 80a3516:	ea4f 0232 	mov.w	r2, r2, rrx
 80a351a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a351e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3522:	bf22      	ittt	cs
 80a3524:	1ab6      	subcs	r6, r6, r2
 80a3526:	4675      	movcs	r5, lr
 80a3528:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a352c:	085b      	lsrs	r3, r3, #1
 80a352e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3532:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3536:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a353a:	bf22      	ittt	cs
 80a353c:	1ab6      	subcs	r6, r6, r2
 80a353e:	4675      	movcs	r5, lr
 80a3540:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a3544:	ea55 0e06 	orrs.w	lr, r5, r6
 80a3548:	d018      	beq.n	80a357c <__aeabi_ddiv+0x114>
 80a354a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a354e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a3552:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a3556:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a355a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a355e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a3562:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a3566:	d1c0      	bne.n	80a34ea <__aeabi_ddiv+0x82>
 80a3568:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a356c:	d10b      	bne.n	80a3586 <__aeabi_ddiv+0x11e>
 80a356e:	ea41 0100 	orr.w	r1, r1, r0
 80a3572:	f04f 0000 	mov.w	r0, #0
 80a3576:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a357a:	e7b6      	b.n	80a34ea <__aeabi_ddiv+0x82>
 80a357c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3580:	bf04      	itt	eq
 80a3582:	4301      	orreq	r1, r0
 80a3584:	2000      	moveq	r0, #0
 80a3586:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a358a:	bf88      	it	hi
 80a358c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3590:	f63f aeaf 	bhi.w	80a32f2 <__aeabi_dmul+0xde>
 80a3594:	ebb5 0c03 	subs.w	ip, r5, r3
 80a3598:	bf04      	itt	eq
 80a359a:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a359e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a35a2:	f150 0000 	adcs.w	r0, r0, #0
 80a35a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a35aa:	bd70      	pop	{r4, r5, r6, pc}
 80a35ac:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a35b0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a35b4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a35b8:	bfc2      	ittt	gt
 80a35ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a35be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a35c2:	bd70      	popgt	{r4, r5, r6, pc}
 80a35c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a35c8:	f04f 0e00 	mov.w	lr, #0
 80a35cc:	3c01      	subs	r4, #1
 80a35ce:	e690      	b.n	80a32f2 <__aeabi_dmul+0xde>
 80a35d0:	ea45 0e06 	orr.w	lr, r5, r6
 80a35d4:	e68d      	b.n	80a32f2 <__aeabi_dmul+0xde>
 80a35d6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a35da:	ea94 0f0c 	teq	r4, ip
 80a35de:	bf08      	it	eq
 80a35e0:	ea95 0f0c 	teqeq	r5, ip
 80a35e4:	f43f af3b 	beq.w	80a345e <__aeabi_dmul+0x24a>
 80a35e8:	ea94 0f0c 	teq	r4, ip
 80a35ec:	d10a      	bne.n	80a3604 <__aeabi_ddiv+0x19c>
 80a35ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a35f2:	f47f af34 	bne.w	80a345e <__aeabi_dmul+0x24a>
 80a35f6:	ea95 0f0c 	teq	r5, ip
 80a35fa:	f47f af25 	bne.w	80a3448 <__aeabi_dmul+0x234>
 80a35fe:	4610      	mov	r0, r2
 80a3600:	4619      	mov	r1, r3
 80a3602:	e72c      	b.n	80a345e <__aeabi_dmul+0x24a>
 80a3604:	ea95 0f0c 	teq	r5, ip
 80a3608:	d106      	bne.n	80a3618 <__aeabi_ddiv+0x1b0>
 80a360a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a360e:	f43f aefd 	beq.w	80a340c <__aeabi_dmul+0x1f8>
 80a3612:	4610      	mov	r0, r2
 80a3614:	4619      	mov	r1, r3
 80a3616:	e722      	b.n	80a345e <__aeabi_dmul+0x24a>
 80a3618:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a361c:	bf18      	it	ne
 80a361e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3622:	f47f aec5 	bne.w	80a33b0 <__aeabi_dmul+0x19c>
 80a3626:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a362a:	f47f af0d 	bne.w	80a3448 <__aeabi_dmul+0x234>
 80a362e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a3632:	f47f aeeb 	bne.w	80a340c <__aeabi_dmul+0x1f8>
 80a3636:	e712      	b.n	80a345e <__aeabi_dmul+0x24a>

080a3638 <__gedf2>:
 80a3638:	f04f 3cff 	mov.w	ip, #4294967295
 80a363c:	e006      	b.n	80a364c <__cmpdf2+0x4>
 80a363e:	bf00      	nop

080a3640 <__ledf2>:
 80a3640:	f04f 0c01 	mov.w	ip, #1
 80a3644:	e002      	b.n	80a364c <__cmpdf2+0x4>
 80a3646:	bf00      	nop

080a3648 <__cmpdf2>:
 80a3648:	f04f 0c01 	mov.w	ip, #1
 80a364c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a3650:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3654:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3658:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a365c:	bf18      	it	ne
 80a365e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a3662:	d01b      	beq.n	80a369c <__cmpdf2+0x54>
 80a3664:	b001      	add	sp, #4
 80a3666:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a366a:	bf0c      	ite	eq
 80a366c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a3670:	ea91 0f03 	teqne	r1, r3
 80a3674:	bf02      	ittt	eq
 80a3676:	ea90 0f02 	teqeq	r0, r2
 80a367a:	2000      	moveq	r0, #0
 80a367c:	4770      	bxeq	lr
 80a367e:	f110 0f00 	cmn.w	r0, #0
 80a3682:	ea91 0f03 	teq	r1, r3
 80a3686:	bf58      	it	pl
 80a3688:	4299      	cmppl	r1, r3
 80a368a:	bf08      	it	eq
 80a368c:	4290      	cmpeq	r0, r2
 80a368e:	bf2c      	ite	cs
 80a3690:	17d8      	asrcs	r0, r3, #31
 80a3692:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a3696:	f040 0001 	orr.w	r0, r0, #1
 80a369a:	4770      	bx	lr
 80a369c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a36a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a36a4:	d102      	bne.n	80a36ac <__cmpdf2+0x64>
 80a36a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a36aa:	d107      	bne.n	80a36bc <__cmpdf2+0x74>
 80a36ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a36b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a36b4:	d1d6      	bne.n	80a3664 <__cmpdf2+0x1c>
 80a36b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a36ba:	d0d3      	beq.n	80a3664 <__cmpdf2+0x1c>
 80a36bc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a36c0:	4770      	bx	lr
 80a36c2:	bf00      	nop

080a36c4 <__aeabi_cdrcmple>:
 80a36c4:	4684      	mov	ip, r0
 80a36c6:	4610      	mov	r0, r2
 80a36c8:	4662      	mov	r2, ip
 80a36ca:	468c      	mov	ip, r1
 80a36cc:	4619      	mov	r1, r3
 80a36ce:	4663      	mov	r3, ip
 80a36d0:	e000      	b.n	80a36d4 <__aeabi_cdcmpeq>
 80a36d2:	bf00      	nop

080a36d4 <__aeabi_cdcmpeq>:
 80a36d4:	b501      	push	{r0, lr}
 80a36d6:	f7ff ffb7 	bl	80a3648 <__cmpdf2>
 80a36da:	2800      	cmp	r0, #0
 80a36dc:	bf48      	it	mi
 80a36de:	f110 0f00 	cmnmi.w	r0, #0
 80a36e2:	bd01      	pop	{r0, pc}

080a36e4 <__aeabi_dcmpeq>:
 80a36e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a36e8:	f7ff fff4 	bl	80a36d4 <__aeabi_cdcmpeq>
 80a36ec:	bf0c      	ite	eq
 80a36ee:	2001      	moveq	r0, #1
 80a36f0:	2000      	movne	r0, #0
 80a36f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a36f6:	bf00      	nop

080a36f8 <__aeabi_dcmplt>:
 80a36f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a36fc:	f7ff ffea 	bl	80a36d4 <__aeabi_cdcmpeq>
 80a3700:	bf34      	ite	cc
 80a3702:	2001      	movcc	r0, #1
 80a3704:	2000      	movcs	r0, #0
 80a3706:	f85d fb08 	ldr.w	pc, [sp], #8
 80a370a:	bf00      	nop

080a370c <__aeabi_dcmple>:
 80a370c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3710:	f7ff ffe0 	bl	80a36d4 <__aeabi_cdcmpeq>
 80a3714:	bf94      	ite	ls
 80a3716:	2001      	movls	r0, #1
 80a3718:	2000      	movhi	r0, #0
 80a371a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a371e:	bf00      	nop

080a3720 <__aeabi_dcmpge>:
 80a3720:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3724:	f7ff ffce 	bl	80a36c4 <__aeabi_cdrcmple>
 80a3728:	bf94      	ite	ls
 80a372a:	2001      	movls	r0, #1
 80a372c:	2000      	movhi	r0, #0
 80a372e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3732:	bf00      	nop

080a3734 <__aeabi_dcmpgt>:
 80a3734:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3738:	f7ff ffc4 	bl	80a36c4 <__aeabi_cdrcmple>
 80a373c:	bf34      	ite	cc
 80a373e:	2001      	movcc	r0, #1
 80a3740:	2000      	movcs	r0, #0
 80a3742:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3746:	bf00      	nop

080a3748 <__aeabi_d2iz>:
 80a3748:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a374c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3750:	d215      	bcs.n	80a377e <__aeabi_d2iz+0x36>
 80a3752:	d511      	bpl.n	80a3778 <__aeabi_d2iz+0x30>
 80a3754:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3758:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a375c:	d912      	bls.n	80a3784 <__aeabi_d2iz+0x3c>
 80a375e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3762:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3766:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a376a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a376e:	fa23 f002 	lsr.w	r0, r3, r2
 80a3772:	bf18      	it	ne
 80a3774:	4240      	negne	r0, r0
 80a3776:	4770      	bx	lr
 80a3778:	f04f 0000 	mov.w	r0, #0
 80a377c:	4770      	bx	lr
 80a377e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3782:	d105      	bne.n	80a3790 <__aeabi_d2iz+0x48>
 80a3784:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a3788:	bf08      	it	eq
 80a378a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a378e:	4770      	bx	lr
 80a3790:	f04f 0000 	mov.w	r0, #0
 80a3794:	4770      	bx	lr
 80a3796:	bf00      	nop

080a3798 <__aeabi_d2uiz>:
 80a3798:	004a      	lsls	r2, r1, #1
 80a379a:	d211      	bcs.n	80a37c0 <__aeabi_d2uiz+0x28>
 80a379c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a37a0:	d211      	bcs.n	80a37c6 <__aeabi_d2uiz+0x2e>
 80a37a2:	d50d      	bpl.n	80a37c0 <__aeabi_d2uiz+0x28>
 80a37a4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a37a8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a37ac:	d40e      	bmi.n	80a37cc <__aeabi_d2uiz+0x34>
 80a37ae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a37b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a37b6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a37ba:	fa23 f002 	lsr.w	r0, r3, r2
 80a37be:	4770      	bx	lr
 80a37c0:	f04f 0000 	mov.w	r0, #0
 80a37c4:	4770      	bx	lr
 80a37c6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a37ca:	d102      	bne.n	80a37d2 <__aeabi_d2uiz+0x3a>
 80a37cc:	f04f 30ff 	mov.w	r0, #4294967295
 80a37d0:	4770      	bx	lr
 80a37d2:	f04f 0000 	mov.w	r0, #0
 80a37d6:	4770      	bx	lr

080a37d8 <__aeabi_d2f>:
 80a37d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a37dc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a37e0:	bf24      	itt	cs
 80a37e2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a37e6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a37ea:	d90d      	bls.n	80a3808 <__aeabi_d2f+0x30>
 80a37ec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a37f0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a37f4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a37f8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a37fc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a3800:	bf08      	it	eq
 80a3802:	f020 0001 	biceq.w	r0, r0, #1
 80a3806:	4770      	bx	lr
 80a3808:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a380c:	d121      	bne.n	80a3852 <__aeabi_d2f+0x7a>
 80a380e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a3812:	bfbc      	itt	lt
 80a3814:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a3818:	4770      	bxlt	lr
 80a381a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a381e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a3822:	f1c2 0218 	rsb	r2, r2, #24
 80a3826:	f1c2 0c20 	rsb	ip, r2, #32
 80a382a:	fa10 f30c 	lsls.w	r3, r0, ip
 80a382e:	fa20 f002 	lsr.w	r0, r0, r2
 80a3832:	bf18      	it	ne
 80a3834:	f040 0001 	orrne.w	r0, r0, #1
 80a3838:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a383c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a3840:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a3844:	ea40 000c 	orr.w	r0, r0, ip
 80a3848:	fa23 f302 	lsr.w	r3, r3, r2
 80a384c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a3850:	e7cc      	b.n	80a37ec <__aeabi_d2f+0x14>
 80a3852:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a3856:	d107      	bne.n	80a3868 <__aeabi_d2f+0x90>
 80a3858:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a385c:	bf1e      	ittt	ne
 80a385e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a3862:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a3866:	4770      	bxne	lr
 80a3868:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a386c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3870:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3874:	4770      	bx	lr
 80a3876:	bf00      	nop

080a3878 <__aeabi_frsub>:
 80a3878:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a387c:	e002      	b.n	80a3884 <__addsf3>
 80a387e:	bf00      	nop

080a3880 <__aeabi_fsub>:
 80a3880:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a3884 <__addsf3>:
 80a3884:	0042      	lsls	r2, r0, #1
 80a3886:	bf1f      	itttt	ne
 80a3888:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a388c:	ea92 0f03 	teqne	r2, r3
 80a3890:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a3894:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3898:	d06a      	beq.n	80a3970 <__addsf3+0xec>
 80a389a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a389e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a38a2:	bfc1      	itttt	gt
 80a38a4:	18d2      	addgt	r2, r2, r3
 80a38a6:	4041      	eorgt	r1, r0
 80a38a8:	4048      	eorgt	r0, r1
 80a38aa:	4041      	eorgt	r1, r0
 80a38ac:	bfb8      	it	lt
 80a38ae:	425b      	neglt	r3, r3
 80a38b0:	2b19      	cmp	r3, #25
 80a38b2:	bf88      	it	hi
 80a38b4:	4770      	bxhi	lr
 80a38b6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a38ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a38be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a38c2:	bf18      	it	ne
 80a38c4:	4240      	negne	r0, r0
 80a38c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a38ca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a38ce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a38d2:	bf18      	it	ne
 80a38d4:	4249      	negne	r1, r1
 80a38d6:	ea92 0f03 	teq	r2, r3
 80a38da:	d03f      	beq.n	80a395c <__addsf3+0xd8>
 80a38dc:	f1a2 0201 	sub.w	r2, r2, #1
 80a38e0:	fa41 fc03 	asr.w	ip, r1, r3
 80a38e4:	eb10 000c 	adds.w	r0, r0, ip
 80a38e8:	f1c3 0320 	rsb	r3, r3, #32
 80a38ec:	fa01 f103 	lsl.w	r1, r1, r3
 80a38f0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a38f4:	d502      	bpl.n	80a38fc <__addsf3+0x78>
 80a38f6:	4249      	negs	r1, r1
 80a38f8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a38fc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a3900:	d313      	bcc.n	80a392a <__addsf3+0xa6>
 80a3902:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a3906:	d306      	bcc.n	80a3916 <__addsf3+0x92>
 80a3908:	0840      	lsrs	r0, r0, #1
 80a390a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a390e:	f102 0201 	add.w	r2, r2, #1
 80a3912:	2afe      	cmp	r2, #254	; 0xfe
 80a3914:	d251      	bcs.n	80a39ba <__addsf3+0x136>
 80a3916:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a391a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a391e:	bf08      	it	eq
 80a3920:	f020 0001 	biceq.w	r0, r0, #1
 80a3924:	ea40 0003 	orr.w	r0, r0, r3
 80a3928:	4770      	bx	lr
 80a392a:	0049      	lsls	r1, r1, #1
 80a392c:	eb40 0000 	adc.w	r0, r0, r0
 80a3930:	3a01      	subs	r2, #1
 80a3932:	bf28      	it	cs
 80a3934:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a3938:	d2ed      	bcs.n	80a3916 <__addsf3+0x92>
 80a393a:	fab0 fc80 	clz	ip, r0
 80a393e:	f1ac 0c08 	sub.w	ip, ip, #8
 80a3942:	ebb2 020c 	subs.w	r2, r2, ip
 80a3946:	fa00 f00c 	lsl.w	r0, r0, ip
 80a394a:	bfaa      	itet	ge
 80a394c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a3950:	4252      	neglt	r2, r2
 80a3952:	4318      	orrge	r0, r3
 80a3954:	bfbc      	itt	lt
 80a3956:	40d0      	lsrlt	r0, r2
 80a3958:	4318      	orrlt	r0, r3
 80a395a:	4770      	bx	lr
 80a395c:	f092 0f00 	teq	r2, #0
 80a3960:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a3964:	bf06      	itte	eq
 80a3966:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a396a:	3201      	addeq	r2, #1
 80a396c:	3b01      	subne	r3, #1
 80a396e:	e7b5      	b.n	80a38dc <__addsf3+0x58>
 80a3970:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a3974:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3978:	bf18      	it	ne
 80a397a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a397e:	d021      	beq.n	80a39c4 <__addsf3+0x140>
 80a3980:	ea92 0f03 	teq	r2, r3
 80a3984:	d004      	beq.n	80a3990 <__addsf3+0x10c>
 80a3986:	f092 0f00 	teq	r2, #0
 80a398a:	bf08      	it	eq
 80a398c:	4608      	moveq	r0, r1
 80a398e:	4770      	bx	lr
 80a3990:	ea90 0f01 	teq	r0, r1
 80a3994:	bf1c      	itt	ne
 80a3996:	2000      	movne	r0, #0
 80a3998:	4770      	bxne	lr
 80a399a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a399e:	d104      	bne.n	80a39aa <__addsf3+0x126>
 80a39a0:	0040      	lsls	r0, r0, #1
 80a39a2:	bf28      	it	cs
 80a39a4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a39a8:	4770      	bx	lr
 80a39aa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a39ae:	bf3c      	itt	cc
 80a39b0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a39b4:	4770      	bxcc	lr
 80a39b6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a39ba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a39be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a39c2:	4770      	bx	lr
 80a39c4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a39c8:	bf16      	itet	ne
 80a39ca:	4608      	movne	r0, r1
 80a39cc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a39d0:	4601      	movne	r1, r0
 80a39d2:	0242      	lsls	r2, r0, #9
 80a39d4:	bf06      	itte	eq
 80a39d6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a39da:	ea90 0f01 	teqeq	r0, r1
 80a39de:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a39e2:	4770      	bx	lr

080a39e4 <__aeabi_ui2f>:
 80a39e4:	f04f 0300 	mov.w	r3, #0
 80a39e8:	e004      	b.n	80a39f4 <__aeabi_i2f+0x8>
 80a39ea:	bf00      	nop

080a39ec <__aeabi_i2f>:
 80a39ec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a39f0:	bf48      	it	mi
 80a39f2:	4240      	negmi	r0, r0
 80a39f4:	ea5f 0c00 	movs.w	ip, r0
 80a39f8:	bf08      	it	eq
 80a39fa:	4770      	bxeq	lr
 80a39fc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a3a00:	4601      	mov	r1, r0
 80a3a02:	f04f 0000 	mov.w	r0, #0
 80a3a06:	e01c      	b.n	80a3a42 <__aeabi_l2f+0x2a>

080a3a08 <__aeabi_ul2f>:
 80a3a08:	ea50 0201 	orrs.w	r2, r0, r1
 80a3a0c:	bf08      	it	eq
 80a3a0e:	4770      	bxeq	lr
 80a3a10:	f04f 0300 	mov.w	r3, #0
 80a3a14:	e00a      	b.n	80a3a2c <__aeabi_l2f+0x14>
 80a3a16:	bf00      	nop

080a3a18 <__aeabi_l2f>:
 80a3a18:	ea50 0201 	orrs.w	r2, r0, r1
 80a3a1c:	bf08      	it	eq
 80a3a1e:	4770      	bxeq	lr
 80a3a20:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a3a24:	d502      	bpl.n	80a3a2c <__aeabi_l2f+0x14>
 80a3a26:	4240      	negs	r0, r0
 80a3a28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3a2c:	ea5f 0c01 	movs.w	ip, r1
 80a3a30:	bf02      	ittt	eq
 80a3a32:	4684      	moveq	ip, r0
 80a3a34:	4601      	moveq	r1, r0
 80a3a36:	2000      	moveq	r0, #0
 80a3a38:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a3a3c:	bf08      	it	eq
 80a3a3e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a3a42:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a3a46:	fabc f28c 	clz	r2, ip
 80a3a4a:	3a08      	subs	r2, #8
 80a3a4c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a3a50:	db10      	blt.n	80a3a74 <__aeabi_l2f+0x5c>
 80a3a52:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3a56:	4463      	add	r3, ip
 80a3a58:	fa00 fc02 	lsl.w	ip, r0, r2
 80a3a5c:	f1c2 0220 	rsb	r2, r2, #32
 80a3a60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3a64:	fa20 f202 	lsr.w	r2, r0, r2
 80a3a68:	eb43 0002 	adc.w	r0, r3, r2
 80a3a6c:	bf08      	it	eq
 80a3a6e:	f020 0001 	biceq.w	r0, r0, #1
 80a3a72:	4770      	bx	lr
 80a3a74:	f102 0220 	add.w	r2, r2, #32
 80a3a78:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3a7c:	f1c2 0220 	rsb	r2, r2, #32
 80a3a80:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a3a84:	fa21 f202 	lsr.w	r2, r1, r2
 80a3a88:	eb43 0002 	adc.w	r0, r3, r2
 80a3a8c:	bf08      	it	eq
 80a3a8e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a3a92:	4770      	bx	lr

080a3a94 <__gesf2>:
 80a3a94:	f04f 3cff 	mov.w	ip, #4294967295
 80a3a98:	e006      	b.n	80a3aa8 <__cmpsf2+0x4>
 80a3a9a:	bf00      	nop

080a3a9c <__lesf2>:
 80a3a9c:	f04f 0c01 	mov.w	ip, #1
 80a3aa0:	e002      	b.n	80a3aa8 <__cmpsf2+0x4>
 80a3aa2:	bf00      	nop

080a3aa4 <__cmpsf2>:
 80a3aa4:	f04f 0c01 	mov.w	ip, #1
 80a3aa8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a3aac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a3ab0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a3ab4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3ab8:	bf18      	it	ne
 80a3aba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3abe:	d011      	beq.n	80a3ae4 <__cmpsf2+0x40>
 80a3ac0:	b001      	add	sp, #4
 80a3ac2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a3ac6:	bf18      	it	ne
 80a3ac8:	ea90 0f01 	teqne	r0, r1
 80a3acc:	bf58      	it	pl
 80a3ace:	ebb2 0003 	subspl.w	r0, r2, r3
 80a3ad2:	bf88      	it	hi
 80a3ad4:	17c8      	asrhi	r0, r1, #31
 80a3ad6:	bf38      	it	cc
 80a3ad8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a3adc:	bf18      	it	ne
 80a3ade:	f040 0001 	orrne.w	r0, r0, #1
 80a3ae2:	4770      	bx	lr
 80a3ae4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3ae8:	d102      	bne.n	80a3af0 <__cmpsf2+0x4c>
 80a3aea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a3aee:	d105      	bne.n	80a3afc <__cmpsf2+0x58>
 80a3af0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a3af4:	d1e4      	bne.n	80a3ac0 <__cmpsf2+0x1c>
 80a3af6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a3afa:	d0e1      	beq.n	80a3ac0 <__cmpsf2+0x1c>
 80a3afc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3b00:	4770      	bx	lr
 80a3b02:	bf00      	nop

080a3b04 <__aeabi_cfrcmple>:
 80a3b04:	4684      	mov	ip, r0
 80a3b06:	4608      	mov	r0, r1
 80a3b08:	4661      	mov	r1, ip
 80a3b0a:	e7ff      	b.n	80a3b0c <__aeabi_cfcmpeq>

080a3b0c <__aeabi_cfcmpeq>:
 80a3b0c:	b50f      	push	{r0, r1, r2, r3, lr}
 80a3b0e:	f7ff ffc9 	bl	80a3aa4 <__cmpsf2>
 80a3b12:	2800      	cmp	r0, #0
 80a3b14:	bf48      	it	mi
 80a3b16:	f110 0f00 	cmnmi.w	r0, #0
 80a3b1a:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a3b1c <__aeabi_fcmpeq>:
 80a3b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3b20:	f7ff fff4 	bl	80a3b0c <__aeabi_cfcmpeq>
 80a3b24:	bf0c      	ite	eq
 80a3b26:	2001      	moveq	r0, #1
 80a3b28:	2000      	movne	r0, #0
 80a3b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3b2e:	bf00      	nop

080a3b30 <__aeabi_fcmplt>:
 80a3b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3b34:	f7ff ffea 	bl	80a3b0c <__aeabi_cfcmpeq>
 80a3b38:	bf34      	ite	cc
 80a3b3a:	2001      	movcc	r0, #1
 80a3b3c:	2000      	movcs	r0, #0
 80a3b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3b42:	bf00      	nop

080a3b44 <__aeabi_fcmple>:
 80a3b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3b48:	f7ff ffe0 	bl	80a3b0c <__aeabi_cfcmpeq>
 80a3b4c:	bf94      	ite	ls
 80a3b4e:	2001      	movls	r0, #1
 80a3b50:	2000      	movhi	r0, #0
 80a3b52:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3b56:	bf00      	nop

080a3b58 <__aeabi_fcmpge>:
 80a3b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3b5c:	f7ff ffd2 	bl	80a3b04 <__aeabi_cfrcmple>
 80a3b60:	bf94      	ite	ls
 80a3b62:	2001      	movls	r0, #1
 80a3b64:	2000      	movhi	r0, #0
 80a3b66:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3b6a:	bf00      	nop

080a3b6c <__aeabi_fcmpgt>:
 80a3b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3b70:	f7ff ffc8 	bl	80a3b04 <__aeabi_cfrcmple>
 80a3b74:	bf34      	ite	cc
 80a3b76:	2001      	movcc	r0, #1
 80a3b78:	2000      	movcs	r0, #0
 80a3b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3b7e:	bf00      	nop

080a3b80 <__aeabi_uldivmod>:
 80a3b80:	b953      	cbnz	r3, 80a3b98 <__aeabi_uldivmod+0x18>
 80a3b82:	b94a      	cbnz	r2, 80a3b98 <__aeabi_uldivmod+0x18>
 80a3b84:	2900      	cmp	r1, #0
 80a3b86:	bf08      	it	eq
 80a3b88:	2800      	cmpeq	r0, #0
 80a3b8a:	bf1c      	itt	ne
 80a3b8c:	f04f 31ff 	movne.w	r1, #4294967295
 80a3b90:	f04f 30ff 	movne.w	r0, #4294967295
 80a3b94:	f000 b994 	b.w	80a3ec0 <__aeabi_idiv0>
 80a3b98:	f1ad 0c08 	sub.w	ip, sp, #8
 80a3b9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a3ba0:	f000 f824 	bl	80a3bec <__udivmoddi4>
 80a3ba4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a3ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3bac:	b004      	add	sp, #16
 80a3bae:	4770      	bx	lr

080a3bb0 <__aeabi_d2ulz>:
 80a3bb0:	b5d0      	push	{r4, r6, r7, lr}
 80a3bb2:	2200      	movs	r2, #0
 80a3bb4:	4b0b      	ldr	r3, [pc, #44]	; (80a3be4 <__aeabi_d2ulz+0x34>)
 80a3bb6:	4606      	mov	r6, r0
 80a3bb8:	460f      	mov	r7, r1
 80a3bba:	f7ff fb2b 	bl	80a3214 <__aeabi_dmul>
 80a3bbe:	f7ff fdeb 	bl	80a3798 <__aeabi_d2uiz>
 80a3bc2:	4604      	mov	r4, r0
 80a3bc4:	f7ff faac 	bl	80a3120 <__aeabi_ui2d>
 80a3bc8:	2200      	movs	r2, #0
 80a3bca:	4b07      	ldr	r3, [pc, #28]	; (80a3be8 <__aeabi_d2ulz+0x38>)
 80a3bcc:	f7ff fb22 	bl	80a3214 <__aeabi_dmul>
 80a3bd0:	4602      	mov	r2, r0
 80a3bd2:	460b      	mov	r3, r1
 80a3bd4:	4630      	mov	r0, r6
 80a3bd6:	4639      	mov	r1, r7
 80a3bd8:	f7ff f964 	bl	80a2ea4 <__aeabi_dsub>
 80a3bdc:	f7ff fddc 	bl	80a3798 <__aeabi_d2uiz>
 80a3be0:	4621      	mov	r1, r4
 80a3be2:	bdd0      	pop	{r4, r6, r7, pc}
 80a3be4:	3df00000 	.word	0x3df00000
 80a3be8:	41f00000 	.word	0x41f00000

080a3bec <__udivmoddi4>:
 80a3bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a3bf0:	9e08      	ldr	r6, [sp, #32]
 80a3bf2:	460d      	mov	r5, r1
 80a3bf4:	4604      	mov	r4, r0
 80a3bf6:	4688      	mov	r8, r1
 80a3bf8:	2b00      	cmp	r3, #0
 80a3bfa:	d14d      	bne.n	80a3c98 <__udivmoddi4+0xac>
 80a3bfc:	428a      	cmp	r2, r1
 80a3bfe:	4694      	mov	ip, r2
 80a3c00:	d968      	bls.n	80a3cd4 <__udivmoddi4+0xe8>
 80a3c02:	fab2 f282 	clz	r2, r2
 80a3c06:	b152      	cbz	r2, 80a3c1e <__udivmoddi4+0x32>
 80a3c08:	fa01 f302 	lsl.w	r3, r1, r2
 80a3c0c:	f1c2 0120 	rsb	r1, r2, #32
 80a3c10:	fa20 f101 	lsr.w	r1, r0, r1
 80a3c14:	fa0c fc02 	lsl.w	ip, ip, r2
 80a3c18:	ea41 0803 	orr.w	r8, r1, r3
 80a3c1c:	4094      	lsls	r4, r2
 80a3c1e:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80a3c22:	fbb8 f7f1 	udiv	r7, r8, r1
 80a3c26:	fa1f fe8c 	uxth.w	lr, ip
 80a3c2a:	fb01 8817 	mls	r8, r1, r7, r8
 80a3c2e:	fb07 f00e 	mul.w	r0, r7, lr
 80a3c32:	0c23      	lsrs	r3, r4, #16
 80a3c34:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80a3c38:	4298      	cmp	r0, r3
 80a3c3a:	d90a      	bls.n	80a3c52 <__udivmoddi4+0x66>
 80a3c3c:	eb1c 0303 	adds.w	r3, ip, r3
 80a3c40:	f107 35ff 	add.w	r5, r7, #4294967295
 80a3c44:	f080 811e 	bcs.w	80a3e84 <__udivmoddi4+0x298>
 80a3c48:	4298      	cmp	r0, r3
 80a3c4a:	f240 811b 	bls.w	80a3e84 <__udivmoddi4+0x298>
 80a3c4e:	3f02      	subs	r7, #2
 80a3c50:	4463      	add	r3, ip
 80a3c52:	1a1b      	subs	r3, r3, r0
 80a3c54:	fbb3 f0f1 	udiv	r0, r3, r1
 80a3c58:	fb01 3310 	mls	r3, r1, r0, r3
 80a3c5c:	fb00 fe0e 	mul.w	lr, r0, lr
 80a3c60:	b2a4      	uxth	r4, r4
 80a3c62:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80a3c66:	45a6      	cmp	lr, r4
 80a3c68:	d90a      	bls.n	80a3c80 <__udivmoddi4+0x94>
 80a3c6a:	eb1c 0404 	adds.w	r4, ip, r4
 80a3c6e:	f100 33ff 	add.w	r3, r0, #4294967295
 80a3c72:	f080 8109 	bcs.w	80a3e88 <__udivmoddi4+0x29c>
 80a3c76:	45a6      	cmp	lr, r4
 80a3c78:	f240 8106 	bls.w	80a3e88 <__udivmoddi4+0x29c>
 80a3c7c:	4464      	add	r4, ip
 80a3c7e:	3802      	subs	r0, #2
 80a3c80:	2100      	movs	r1, #0
 80a3c82:	eba4 040e 	sub.w	r4, r4, lr
 80a3c86:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80a3c8a:	b11e      	cbz	r6, 80a3c94 <__udivmoddi4+0xa8>
 80a3c8c:	2300      	movs	r3, #0
 80a3c8e:	40d4      	lsrs	r4, r2
 80a3c90:	e9c6 4300 	strd	r4, r3, [r6]
 80a3c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3c98:	428b      	cmp	r3, r1
 80a3c9a:	d908      	bls.n	80a3cae <__udivmoddi4+0xc2>
 80a3c9c:	2e00      	cmp	r6, #0
 80a3c9e:	f000 80ee 	beq.w	80a3e7e <__udivmoddi4+0x292>
 80a3ca2:	2100      	movs	r1, #0
 80a3ca4:	e9c6 0500 	strd	r0, r5, [r6]
 80a3ca8:	4608      	mov	r0, r1
 80a3caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3cae:	fab3 f183 	clz	r1, r3
 80a3cb2:	2900      	cmp	r1, #0
 80a3cb4:	d14a      	bne.n	80a3d4c <__udivmoddi4+0x160>
 80a3cb6:	42ab      	cmp	r3, r5
 80a3cb8:	d302      	bcc.n	80a3cc0 <__udivmoddi4+0xd4>
 80a3cba:	4282      	cmp	r2, r0
 80a3cbc:	f200 80fc 	bhi.w	80a3eb8 <__udivmoddi4+0x2cc>
 80a3cc0:	1a84      	subs	r4, r0, r2
 80a3cc2:	eb65 0303 	sbc.w	r3, r5, r3
 80a3cc6:	2001      	movs	r0, #1
 80a3cc8:	4698      	mov	r8, r3
 80a3cca:	2e00      	cmp	r6, #0
 80a3ccc:	d0e2      	beq.n	80a3c94 <__udivmoddi4+0xa8>
 80a3cce:	e9c6 4800 	strd	r4, r8, [r6]
 80a3cd2:	e7df      	b.n	80a3c94 <__udivmoddi4+0xa8>
 80a3cd4:	b902      	cbnz	r2, 80a3cd8 <__udivmoddi4+0xec>
 80a3cd6:	deff      	udf	#255	; 0xff
 80a3cd8:	fab2 f282 	clz	r2, r2
 80a3cdc:	2a00      	cmp	r2, #0
 80a3cde:	f040 8091 	bne.w	80a3e04 <__udivmoddi4+0x218>
 80a3ce2:	eba1 000c 	sub.w	r0, r1, ip
 80a3ce6:	2101      	movs	r1, #1
 80a3ce8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80a3cec:	fa1f fe8c 	uxth.w	lr, ip
 80a3cf0:	fbb0 f3f7 	udiv	r3, r0, r7
 80a3cf4:	fb07 0013 	mls	r0, r7, r3, r0
 80a3cf8:	0c25      	lsrs	r5, r4, #16
 80a3cfa:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80a3cfe:	fb0e f003 	mul.w	r0, lr, r3
 80a3d02:	42a8      	cmp	r0, r5
 80a3d04:	d908      	bls.n	80a3d18 <__udivmoddi4+0x12c>
 80a3d06:	eb1c 0505 	adds.w	r5, ip, r5
 80a3d0a:	f103 38ff 	add.w	r8, r3, #4294967295
 80a3d0e:	d202      	bcs.n	80a3d16 <__udivmoddi4+0x12a>
 80a3d10:	42a8      	cmp	r0, r5
 80a3d12:	f200 80ce 	bhi.w	80a3eb2 <__udivmoddi4+0x2c6>
 80a3d16:	4643      	mov	r3, r8
 80a3d18:	1a2d      	subs	r5, r5, r0
 80a3d1a:	fbb5 f0f7 	udiv	r0, r5, r7
 80a3d1e:	fb07 5510 	mls	r5, r7, r0, r5
 80a3d22:	fb0e fe00 	mul.w	lr, lr, r0
 80a3d26:	b2a4      	uxth	r4, r4
 80a3d28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80a3d2c:	45a6      	cmp	lr, r4
 80a3d2e:	d908      	bls.n	80a3d42 <__udivmoddi4+0x156>
 80a3d30:	eb1c 0404 	adds.w	r4, ip, r4
 80a3d34:	f100 35ff 	add.w	r5, r0, #4294967295
 80a3d38:	d202      	bcs.n	80a3d40 <__udivmoddi4+0x154>
 80a3d3a:	45a6      	cmp	lr, r4
 80a3d3c:	f200 80b6 	bhi.w	80a3eac <__udivmoddi4+0x2c0>
 80a3d40:	4628      	mov	r0, r5
 80a3d42:	eba4 040e 	sub.w	r4, r4, lr
 80a3d46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a3d4a:	e79e      	b.n	80a3c8a <__udivmoddi4+0x9e>
 80a3d4c:	f1c1 0720 	rsb	r7, r1, #32
 80a3d50:	408b      	lsls	r3, r1
 80a3d52:	fa22 fc07 	lsr.w	ip, r2, r7
 80a3d56:	ea4c 0c03 	orr.w	ip, ip, r3
 80a3d5a:	fa25 fa07 	lsr.w	sl, r5, r7
 80a3d5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a3d62:	fbba f8f9 	udiv	r8, sl, r9
 80a3d66:	fa20 f307 	lsr.w	r3, r0, r7
 80a3d6a:	fb09 aa18 	mls	sl, r9, r8, sl
 80a3d6e:	408d      	lsls	r5, r1
 80a3d70:	fa1f fe8c 	uxth.w	lr, ip
 80a3d74:	431d      	orrs	r5, r3
 80a3d76:	fa00 f301 	lsl.w	r3, r0, r1
 80a3d7a:	fb08 f00e 	mul.w	r0, r8, lr
 80a3d7e:	0c2c      	lsrs	r4, r5, #16
 80a3d80:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80a3d84:	42a0      	cmp	r0, r4
 80a3d86:	fa02 f201 	lsl.w	r2, r2, r1
 80a3d8a:	d90b      	bls.n	80a3da4 <__udivmoddi4+0x1b8>
 80a3d8c:	eb1c 0404 	adds.w	r4, ip, r4
 80a3d90:	f108 3aff 	add.w	sl, r8, #4294967295
 80a3d94:	f080 8088 	bcs.w	80a3ea8 <__udivmoddi4+0x2bc>
 80a3d98:	42a0      	cmp	r0, r4
 80a3d9a:	f240 8085 	bls.w	80a3ea8 <__udivmoddi4+0x2bc>
 80a3d9e:	f1a8 0802 	sub.w	r8, r8, #2
 80a3da2:	4464      	add	r4, ip
 80a3da4:	1a24      	subs	r4, r4, r0
 80a3da6:	fbb4 f0f9 	udiv	r0, r4, r9
 80a3daa:	fb09 4410 	mls	r4, r9, r0, r4
 80a3dae:	fb00 fe0e 	mul.w	lr, r0, lr
 80a3db2:	b2ad      	uxth	r5, r5
 80a3db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80a3db8:	45a6      	cmp	lr, r4
 80a3dba:	d908      	bls.n	80a3dce <__udivmoddi4+0x1e2>
 80a3dbc:	eb1c 0404 	adds.w	r4, ip, r4
 80a3dc0:	f100 35ff 	add.w	r5, r0, #4294967295
 80a3dc4:	d26c      	bcs.n	80a3ea0 <__udivmoddi4+0x2b4>
 80a3dc6:	45a6      	cmp	lr, r4
 80a3dc8:	d96a      	bls.n	80a3ea0 <__udivmoddi4+0x2b4>
 80a3dca:	3802      	subs	r0, #2
 80a3dcc:	4464      	add	r4, ip
 80a3dce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80a3dd2:	fba0 9502 	umull	r9, r5, r0, r2
 80a3dd6:	eba4 040e 	sub.w	r4, r4, lr
 80a3dda:	42ac      	cmp	r4, r5
 80a3ddc:	46c8      	mov	r8, r9
 80a3dde:	46ae      	mov	lr, r5
 80a3de0:	d356      	bcc.n	80a3e90 <__udivmoddi4+0x2a4>
 80a3de2:	d053      	beq.n	80a3e8c <__udivmoddi4+0x2a0>
 80a3de4:	2e00      	cmp	r6, #0
 80a3de6:	d069      	beq.n	80a3ebc <__udivmoddi4+0x2d0>
 80a3de8:	ebb3 0208 	subs.w	r2, r3, r8
 80a3dec:	eb64 040e 	sbc.w	r4, r4, lr
 80a3df0:	fa22 f301 	lsr.w	r3, r2, r1
 80a3df4:	fa04 f707 	lsl.w	r7, r4, r7
 80a3df8:	431f      	orrs	r7, r3
 80a3dfa:	40cc      	lsrs	r4, r1
 80a3dfc:	e9c6 7400 	strd	r7, r4, [r6]
 80a3e00:	2100      	movs	r1, #0
 80a3e02:	e747      	b.n	80a3c94 <__udivmoddi4+0xa8>
 80a3e04:	fa0c fc02 	lsl.w	ip, ip, r2
 80a3e08:	f1c2 0120 	rsb	r1, r2, #32
 80a3e0c:	fa25 f301 	lsr.w	r3, r5, r1
 80a3e10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80a3e14:	fa20 f101 	lsr.w	r1, r0, r1
 80a3e18:	4095      	lsls	r5, r2
 80a3e1a:	430d      	orrs	r5, r1
 80a3e1c:	fbb3 f1f7 	udiv	r1, r3, r7
 80a3e20:	fb07 3311 	mls	r3, r7, r1, r3
 80a3e24:	fa1f fe8c 	uxth.w	lr, ip
 80a3e28:	0c28      	lsrs	r0, r5, #16
 80a3e2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a3e2e:	fb01 f30e 	mul.w	r3, r1, lr
 80a3e32:	4283      	cmp	r3, r0
 80a3e34:	fa04 f402 	lsl.w	r4, r4, r2
 80a3e38:	d908      	bls.n	80a3e4c <__udivmoddi4+0x260>
 80a3e3a:	eb1c 0000 	adds.w	r0, ip, r0
 80a3e3e:	f101 38ff 	add.w	r8, r1, #4294967295
 80a3e42:	d22f      	bcs.n	80a3ea4 <__udivmoddi4+0x2b8>
 80a3e44:	4283      	cmp	r3, r0
 80a3e46:	d92d      	bls.n	80a3ea4 <__udivmoddi4+0x2b8>
 80a3e48:	3902      	subs	r1, #2
 80a3e4a:	4460      	add	r0, ip
 80a3e4c:	1ac0      	subs	r0, r0, r3
 80a3e4e:	fbb0 f3f7 	udiv	r3, r0, r7
 80a3e52:	fb07 0013 	mls	r0, r7, r3, r0
 80a3e56:	b2ad      	uxth	r5, r5
 80a3e58:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80a3e5c:	fb03 f00e 	mul.w	r0, r3, lr
 80a3e60:	42a8      	cmp	r0, r5
 80a3e62:	d908      	bls.n	80a3e76 <__udivmoddi4+0x28a>
 80a3e64:	eb1c 0505 	adds.w	r5, ip, r5
 80a3e68:	f103 38ff 	add.w	r8, r3, #4294967295
 80a3e6c:	d216      	bcs.n	80a3e9c <__udivmoddi4+0x2b0>
 80a3e6e:	42a8      	cmp	r0, r5
 80a3e70:	d914      	bls.n	80a3e9c <__udivmoddi4+0x2b0>
 80a3e72:	3b02      	subs	r3, #2
 80a3e74:	4465      	add	r5, ip
 80a3e76:	1a28      	subs	r0, r5, r0
 80a3e78:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80a3e7c:	e738      	b.n	80a3cf0 <__udivmoddi4+0x104>
 80a3e7e:	4631      	mov	r1, r6
 80a3e80:	4630      	mov	r0, r6
 80a3e82:	e707      	b.n	80a3c94 <__udivmoddi4+0xa8>
 80a3e84:	462f      	mov	r7, r5
 80a3e86:	e6e4      	b.n	80a3c52 <__udivmoddi4+0x66>
 80a3e88:	4618      	mov	r0, r3
 80a3e8a:	e6f9      	b.n	80a3c80 <__udivmoddi4+0x94>
 80a3e8c:	454b      	cmp	r3, r9
 80a3e8e:	d2a9      	bcs.n	80a3de4 <__udivmoddi4+0x1f8>
 80a3e90:	ebb9 0802 	subs.w	r8, r9, r2
 80a3e94:	eb65 0e0c 	sbc.w	lr, r5, ip
 80a3e98:	3801      	subs	r0, #1
 80a3e9a:	e7a3      	b.n	80a3de4 <__udivmoddi4+0x1f8>
 80a3e9c:	4643      	mov	r3, r8
 80a3e9e:	e7ea      	b.n	80a3e76 <__udivmoddi4+0x28a>
 80a3ea0:	4628      	mov	r0, r5
 80a3ea2:	e794      	b.n	80a3dce <__udivmoddi4+0x1e2>
 80a3ea4:	4641      	mov	r1, r8
 80a3ea6:	e7d1      	b.n	80a3e4c <__udivmoddi4+0x260>
 80a3ea8:	46d0      	mov	r8, sl
 80a3eaa:	e77b      	b.n	80a3da4 <__udivmoddi4+0x1b8>
 80a3eac:	4464      	add	r4, ip
 80a3eae:	3802      	subs	r0, #2
 80a3eb0:	e747      	b.n	80a3d42 <__udivmoddi4+0x156>
 80a3eb2:	3b02      	subs	r3, #2
 80a3eb4:	4465      	add	r5, ip
 80a3eb6:	e72f      	b.n	80a3d18 <__udivmoddi4+0x12c>
 80a3eb8:	4608      	mov	r0, r1
 80a3eba:	e706      	b.n	80a3cca <__udivmoddi4+0xde>
 80a3ebc:	4631      	mov	r1, r6
 80a3ebe:	e6e9      	b.n	80a3c94 <__udivmoddi4+0xa8>

080a3ec0 <__aeabi_idiv0>:
 80a3ec0:	4770      	bx	lr
 80a3ec2:	bf00      	nop

080a3ec4 <asctime_r>:
 80a3ec4:	b510      	push	{r4, lr}
 80a3ec6:	460c      	mov	r4, r1
 80a3ec8:	6941      	ldr	r1, [r0, #20]
 80a3eca:	b086      	sub	sp, #24
 80a3ecc:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80a3ed0:	6903      	ldr	r3, [r0, #16]
 80a3ed2:	6982      	ldr	r2, [r0, #24]
 80a3ed4:	9104      	str	r1, [sp, #16]
 80a3ed6:	6801      	ldr	r1, [r0, #0]
 80a3ed8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a3edc:	9103      	str	r1, [sp, #12]
 80a3ede:	6841      	ldr	r1, [r0, #4]
 80a3ee0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80a3ee4:	9102      	str	r1, [sp, #8]
 80a3ee6:	6881      	ldr	r1, [r0, #8]
 80a3ee8:	9101      	str	r1, [sp, #4]
 80a3eea:	68c1      	ldr	r1, [r0, #12]
 80a3eec:	4620      	mov	r0, r4
 80a3eee:	9100      	str	r1, [sp, #0]
 80a3ef0:	4904      	ldr	r1, [pc, #16]	; (80a3f04 <asctime_r+0x40>)
 80a3ef2:	440b      	add	r3, r1
 80a3ef4:	4904      	ldr	r1, [pc, #16]	; (80a3f08 <asctime_r+0x44>)
 80a3ef6:	440a      	add	r2, r1
 80a3ef8:	4904      	ldr	r1, [pc, #16]	; (80a3f0c <asctime_r+0x48>)
 80a3efa:	f7fd fb5d 	bl	80a15b8 <siprintf>
 80a3efe:	4620      	mov	r0, r4
 80a3f00:	b006      	add	sp, #24
 80a3f02:	bd10      	pop	{r4, pc}
 80a3f04:	080a76f6 	.word	0x080a76f6
 80a3f08:	080a76e1 	.word	0x080a76e1
 80a3f0c:	080a76c1 	.word	0x080a76c1

080a3f10 <atexit>:
 80a3f10:	2300      	movs	r3, #0
 80a3f12:	4601      	mov	r1, r0
 80a3f14:	461a      	mov	r2, r3
 80a3f16:	4618      	mov	r0, r3
 80a3f18:	f002 b820 	b.w	80a5f5c <__register_exitproc>

080a3f1c <atof>:
 80a3f1c:	2100      	movs	r1, #0
 80a3f1e:	f001 bcd7 	b.w	80a58d0 <strtod>

080a3f22 <atol>:
 80a3f22:	220a      	movs	r2, #10
 80a3f24:	2100      	movs	r1, #0
 80a3f26:	f001 bd5b 	b.w	80a59e0 <strtol>
	...

080a3f2c <localtime_r>:
 80a3f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3f30:	460c      	mov	r4, r1
 80a3f32:	4680      	mov	r8, r0
 80a3f34:	f002 fc24 	bl	80a6780 <__gettzinfo>
 80a3f38:	4621      	mov	r1, r4
 80a3f3a:	4605      	mov	r5, r0
 80a3f3c:	4640      	mov	r0, r8
 80a3f3e:	f002 fc23 	bl	80a6788 <gmtime_r>
 80a3f42:	6943      	ldr	r3, [r0, #20]
 80a3f44:	4604      	mov	r4, r0
 80a3f46:	0799      	lsls	r1, r3, #30
 80a3f48:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 80a3f4c:	d105      	bne.n	80a3f5a <localtime_r+0x2e>
 80a3f4e:	2264      	movs	r2, #100	; 0x64
 80a3f50:	fb97 f3f2 	sdiv	r3, r7, r2
 80a3f54:	fb02 7313 	mls	r3, r2, r3, r7
 80a3f58:	bb73      	cbnz	r3, 80a3fb8 <localtime_r+0x8c>
 80a3f5a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a3f5e:	fb97 f6f3 	sdiv	r6, r7, r3
 80a3f62:	fb03 7616 	mls	r6, r3, r6, r7
 80a3f66:	fab6 f386 	clz	r3, r6
 80a3f6a:	095b      	lsrs	r3, r3, #5
 80a3f6c:	2230      	movs	r2, #48	; 0x30
 80a3f6e:	4e66      	ldr	r6, [pc, #408]	; (80a4108 <localtime_r+0x1dc>)
 80a3f70:	fb02 6603 	mla	r6, r2, r3, r6
 80a3f74:	f001 fe5e 	bl	80a5c34 <__tz_lock>
 80a3f78:	f001 fe68 	bl	80a5c4c <_tzset_unlocked>
 80a3f7c:	4b63      	ldr	r3, [pc, #396]	; (80a410c <localtime_r+0x1e0>)
 80a3f7e:	681b      	ldr	r3, [r3, #0]
 80a3f80:	b34b      	cbz	r3, 80a3fd6 <localtime_r+0xaa>
 80a3f82:	686b      	ldr	r3, [r5, #4]
 80a3f84:	42bb      	cmp	r3, r7
 80a3f86:	d119      	bne.n	80a3fbc <localtime_r+0x90>
 80a3f88:	e9d8 2300 	ldrd	r2, r3, [r8]
 80a3f8c:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 80a3f90:	682f      	ldr	r7, [r5, #0]
 80a3f92:	b9df      	cbnz	r7, 80a3fcc <localtime_r+0xa0>
 80a3f94:	4282      	cmp	r2, r0
 80a3f96:	eb73 0101 	sbcs.w	r1, r3, r1
 80a3f9a:	da23      	bge.n	80a3fe4 <localtime_r+0xb8>
 80a3f9c:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80a3fa0:	4282      	cmp	r2, r0
 80a3fa2:	eb73 0701 	sbcs.w	r7, r3, r1
 80a3fa6:	bfb4      	ite	lt
 80a3fa8:	2701      	movlt	r7, #1
 80a3faa:	2700      	movge	r7, #0
 80a3fac:	4282      	cmp	r2, r0
 80a3fae:	418b      	sbcs	r3, r1
 80a3fb0:	6227      	str	r7, [r4, #32]
 80a3fb2:	db19      	blt.n	80a3fe8 <localtime_r+0xbc>
 80a3fb4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80a3fb6:	e018      	b.n	80a3fea <localtime_r+0xbe>
 80a3fb8:	2301      	movs	r3, #1
 80a3fba:	e7d7      	b.n	80a3f6c <localtime_r+0x40>
 80a3fbc:	4638      	mov	r0, r7
 80a3fbe:	f001 fd95 	bl	80a5aec <__tzcalc_limits>
 80a3fc2:	2800      	cmp	r0, #0
 80a3fc4:	d1e0      	bne.n	80a3f88 <localtime_r+0x5c>
 80a3fc6:	f04f 33ff 	mov.w	r3, #4294967295
 80a3fca:	e004      	b.n	80a3fd6 <localtime_r+0xaa>
 80a3fcc:	4282      	cmp	r2, r0
 80a3fce:	eb73 0101 	sbcs.w	r1, r3, r1
 80a3fd2:	da02      	bge.n	80a3fda <localtime_r+0xae>
 80a3fd4:	2300      	movs	r3, #0
 80a3fd6:	6223      	str	r3, [r4, #32]
 80a3fd8:	e7ec      	b.n	80a3fb4 <localtime_r+0x88>
 80a3fda:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80a3fde:	4282      	cmp	r2, r0
 80a3fe0:	418b      	sbcs	r3, r1
 80a3fe2:	daf7      	bge.n	80a3fd4 <localtime_r+0xa8>
 80a3fe4:	2301      	movs	r3, #1
 80a3fe6:	6223      	str	r3, [r4, #32]
 80a3fe8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80a3fea:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80a3fee:	fb93 f5f2 	sdiv	r5, r3, r2
 80a3ff2:	203c      	movs	r0, #60	; 0x3c
 80a3ff4:	fb02 3315 	mls	r3, r2, r5, r3
 80a3ff8:	fb93 f2f0 	sdiv	r2, r3, r0
 80a3ffc:	fb00 3012 	mls	r0, r0, r2, r3
 80a4000:	6861      	ldr	r1, [r4, #4]
 80a4002:	6823      	ldr	r3, [r4, #0]
 80a4004:	1a89      	subs	r1, r1, r2
 80a4006:	68a2      	ldr	r2, [r4, #8]
 80a4008:	1a1b      	subs	r3, r3, r0
 80a400a:	1b52      	subs	r2, r2, r5
 80a400c:	2b3b      	cmp	r3, #59	; 0x3b
 80a400e:	6023      	str	r3, [r4, #0]
 80a4010:	6061      	str	r1, [r4, #4]
 80a4012:	60a2      	str	r2, [r4, #8]
 80a4014:	dd34      	ble.n	80a4080 <localtime_r+0x154>
 80a4016:	3101      	adds	r1, #1
 80a4018:	6061      	str	r1, [r4, #4]
 80a401a:	3b3c      	subs	r3, #60	; 0x3c
 80a401c:	6023      	str	r3, [r4, #0]
 80a401e:	6863      	ldr	r3, [r4, #4]
 80a4020:	2b3b      	cmp	r3, #59	; 0x3b
 80a4022:	dd33      	ble.n	80a408c <localtime_r+0x160>
 80a4024:	3201      	adds	r2, #1
 80a4026:	60a2      	str	r2, [r4, #8]
 80a4028:	3b3c      	subs	r3, #60	; 0x3c
 80a402a:	6063      	str	r3, [r4, #4]
 80a402c:	68a3      	ldr	r3, [r4, #8]
 80a402e:	2b17      	cmp	r3, #23
 80a4030:	dd32      	ble.n	80a4098 <localtime_r+0x16c>
 80a4032:	69e2      	ldr	r2, [r4, #28]
 80a4034:	3b18      	subs	r3, #24
 80a4036:	3201      	adds	r2, #1
 80a4038:	61e2      	str	r2, [r4, #28]
 80a403a:	69a2      	ldr	r2, [r4, #24]
 80a403c:	60a3      	str	r3, [r4, #8]
 80a403e:	3201      	adds	r2, #1
 80a4040:	2a06      	cmp	r2, #6
 80a4042:	bfc8      	it	gt
 80a4044:	2200      	movgt	r2, #0
 80a4046:	61a2      	str	r2, [r4, #24]
 80a4048:	68e2      	ldr	r2, [r4, #12]
 80a404a:	6923      	ldr	r3, [r4, #16]
 80a404c:	3201      	adds	r2, #1
 80a404e:	60e2      	str	r2, [r4, #12]
 80a4050:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80a4054:	428a      	cmp	r2, r1
 80a4056:	dd0e      	ble.n	80a4076 <localtime_r+0x14a>
 80a4058:	2b0b      	cmp	r3, #11
 80a405a:	eba2 0201 	sub.w	r2, r2, r1
 80a405e:	60e2      	str	r2, [r4, #12]
 80a4060:	f103 0201 	add.w	r2, r3, #1
 80a4064:	bf05      	ittet	eq
 80a4066:	2200      	moveq	r2, #0
 80a4068:	6963      	ldreq	r3, [r4, #20]
 80a406a:	6122      	strne	r2, [r4, #16]
 80a406c:	3301      	addeq	r3, #1
 80a406e:	bf02      	ittt	eq
 80a4070:	6122      	streq	r2, [r4, #16]
 80a4072:	6163      	streq	r3, [r4, #20]
 80a4074:	61e2      	streq	r2, [r4, #28]
 80a4076:	f001 fde3 	bl	80a5c40 <__tz_unlock>
 80a407a:	4620      	mov	r0, r4
 80a407c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4080:	2b00      	cmp	r3, #0
 80a4082:	dacc      	bge.n	80a401e <localtime_r+0xf2>
 80a4084:	3901      	subs	r1, #1
 80a4086:	6061      	str	r1, [r4, #4]
 80a4088:	333c      	adds	r3, #60	; 0x3c
 80a408a:	e7c7      	b.n	80a401c <localtime_r+0xf0>
 80a408c:	2b00      	cmp	r3, #0
 80a408e:	dacd      	bge.n	80a402c <localtime_r+0x100>
 80a4090:	3a01      	subs	r2, #1
 80a4092:	60a2      	str	r2, [r4, #8]
 80a4094:	333c      	adds	r3, #60	; 0x3c
 80a4096:	e7c8      	b.n	80a402a <localtime_r+0xfe>
 80a4098:	2b00      	cmp	r3, #0
 80a409a:	daec      	bge.n	80a4076 <localtime_r+0x14a>
 80a409c:	69e2      	ldr	r2, [r4, #28]
 80a409e:	3318      	adds	r3, #24
 80a40a0:	3a01      	subs	r2, #1
 80a40a2:	61e2      	str	r2, [r4, #28]
 80a40a4:	69a2      	ldr	r2, [r4, #24]
 80a40a6:	60a3      	str	r3, [r4, #8]
 80a40a8:	3a01      	subs	r2, #1
 80a40aa:	bf48      	it	mi
 80a40ac:	2206      	movmi	r2, #6
 80a40ae:	61a2      	str	r2, [r4, #24]
 80a40b0:	68e2      	ldr	r2, [r4, #12]
 80a40b2:	3a01      	subs	r2, #1
 80a40b4:	60e2      	str	r2, [r4, #12]
 80a40b6:	2a00      	cmp	r2, #0
 80a40b8:	d1dd      	bne.n	80a4076 <localtime_r+0x14a>
 80a40ba:	6923      	ldr	r3, [r4, #16]
 80a40bc:	3b01      	subs	r3, #1
 80a40be:	d405      	bmi.n	80a40cc <localtime_r+0x1a0>
 80a40c0:	6123      	str	r3, [r4, #16]
 80a40c2:	6923      	ldr	r3, [r4, #16]
 80a40c4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80a40c8:	60e3      	str	r3, [r4, #12]
 80a40ca:	e7d4      	b.n	80a4076 <localtime_r+0x14a>
 80a40cc:	230b      	movs	r3, #11
 80a40ce:	6123      	str	r3, [r4, #16]
 80a40d0:	6963      	ldr	r3, [r4, #20]
 80a40d2:	1e5a      	subs	r2, r3, #1
 80a40d4:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a40d8:	6162      	str	r2, [r4, #20]
 80a40da:	079a      	lsls	r2, r3, #30
 80a40dc:	d105      	bne.n	80a40ea <localtime_r+0x1be>
 80a40de:	2164      	movs	r1, #100	; 0x64
 80a40e0:	fb93 f2f1 	sdiv	r2, r3, r1
 80a40e4:	fb01 3212 	mls	r2, r1, r2, r3
 80a40e8:	b962      	cbnz	r2, 80a4104 <localtime_r+0x1d8>
 80a40ea:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a40ee:	fb93 f1f2 	sdiv	r1, r3, r2
 80a40f2:	fb02 3311 	mls	r3, r2, r1, r3
 80a40f6:	fab3 f383 	clz	r3, r3
 80a40fa:	095b      	lsrs	r3, r3, #5
 80a40fc:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a4100:	61e3      	str	r3, [r4, #28]
 80a4102:	e7de      	b.n	80a40c2 <localtime_r+0x196>
 80a4104:	2301      	movs	r3, #1
 80a4106:	e7f9      	b.n	80a40fc <localtime_r+0x1d0>
 80a4108:	080a771c 	.word	0x080a771c
 80a410c:	200004e8 	.word	0x200004e8

080a4110 <memcpy>:
 80a4110:	440a      	add	r2, r1
 80a4112:	4291      	cmp	r1, r2
 80a4114:	f100 33ff 	add.w	r3, r0, #4294967295
 80a4118:	d100      	bne.n	80a411c <memcpy+0xc>
 80a411a:	4770      	bx	lr
 80a411c:	b510      	push	{r4, lr}
 80a411e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a4122:	4291      	cmp	r1, r2
 80a4124:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a4128:	d1f9      	bne.n	80a411e <memcpy+0xe>
 80a412a:	bd10      	pop	{r4, pc}

080a412c <memset>:
 80a412c:	4603      	mov	r3, r0
 80a412e:	4402      	add	r2, r0
 80a4130:	4293      	cmp	r3, r2
 80a4132:	d100      	bne.n	80a4136 <memset+0xa>
 80a4134:	4770      	bx	lr
 80a4136:	f803 1b01 	strb.w	r1, [r3], #1
 80a413a:	e7f9      	b.n	80a4130 <memset+0x4>

080a413c <srand>:
 80a413c:	b538      	push	{r3, r4, r5, lr}
 80a413e:	4b10      	ldr	r3, [pc, #64]	; (80a4180 <srand+0x44>)
 80a4140:	4604      	mov	r4, r0
 80a4142:	681d      	ldr	r5, [r3, #0]
 80a4144:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a4146:	b9b3      	cbnz	r3, 80a4176 <srand+0x3a>
 80a4148:	2018      	movs	r0, #24
 80a414a:	f7fd fa1d 	bl	80a1588 <malloc>
 80a414e:	4602      	mov	r2, r0
 80a4150:	63a8      	str	r0, [r5, #56]	; 0x38
 80a4152:	b920      	cbnz	r0, 80a415e <srand+0x22>
 80a4154:	2142      	movs	r1, #66	; 0x42
 80a4156:	4b0b      	ldr	r3, [pc, #44]	; (80a4184 <srand+0x48>)
 80a4158:	480b      	ldr	r0, [pc, #44]	; (80a4188 <srand+0x4c>)
 80a415a:	f7fd fa65 	bl	80a1628 <__assert_func>
 80a415e:	490b      	ldr	r1, [pc, #44]	; (80a418c <srand+0x50>)
 80a4160:	4b0b      	ldr	r3, [pc, #44]	; (80a4190 <srand+0x54>)
 80a4162:	e9c0 1300 	strd	r1, r3, [r0]
 80a4166:	4b0b      	ldr	r3, [pc, #44]	; (80a4194 <srand+0x58>)
 80a4168:	2100      	movs	r1, #0
 80a416a:	6083      	str	r3, [r0, #8]
 80a416c:	230b      	movs	r3, #11
 80a416e:	8183      	strh	r3, [r0, #12]
 80a4170:	2001      	movs	r0, #1
 80a4172:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80a4176:	2200      	movs	r2, #0
 80a4178:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a417a:	611c      	str	r4, [r3, #16]
 80a417c:	615a      	str	r2, [r3, #20]
 80a417e:	bd38      	pop	{r3, r4, r5, pc}
 80a4180:	2000000c 	.word	0x2000000c
 80a4184:	080a777c 	.word	0x080a777c
 80a4188:	080a7793 	.word	0x080a7793
 80a418c:	abcd330e 	.word	0xabcd330e
 80a4190:	e66d1234 	.word	0xe66d1234
 80a4194:	0005deec 	.word	0x0005deec

080a4198 <strcmp>:
 80a4198:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a419c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a41a0:	2a01      	cmp	r2, #1
 80a41a2:	bf28      	it	cs
 80a41a4:	429a      	cmpcs	r2, r3
 80a41a6:	d0f7      	beq.n	80a4198 <strcmp>
 80a41a8:	1ad0      	subs	r0, r2, r3
 80a41aa:	4770      	bx	lr

080a41ac <strcpy>:
 80a41ac:	4603      	mov	r3, r0
 80a41ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a41b2:	f803 2b01 	strb.w	r2, [r3], #1
 80a41b6:	2a00      	cmp	r2, #0
 80a41b8:	d1f9      	bne.n	80a41ae <strcpy+0x2>
 80a41ba:	4770      	bx	lr

080a41bc <strdup>:
 80a41bc:	4b02      	ldr	r3, [pc, #8]	; (80a41c8 <strdup+0xc>)
 80a41be:	4601      	mov	r1, r0
 80a41c0:	6818      	ldr	r0, [r3, #0]
 80a41c2:	f000 b803 	b.w	80a41cc <_strdup_r>
 80a41c6:	bf00      	nop
 80a41c8:	2000000c 	.word	0x2000000c

080a41cc <_strdup_r>:
 80a41cc:	b570      	push	{r4, r5, r6, lr}
 80a41ce:	4604      	mov	r4, r0
 80a41d0:	4608      	mov	r0, r1
 80a41d2:	460d      	mov	r5, r1
 80a41d4:	f000 fd44 	bl	80a4c60 <strlen>
 80a41d8:	1c46      	adds	r6, r0, #1
 80a41da:	4631      	mov	r1, r6
 80a41dc:	4620      	mov	r0, r4
 80a41de:	f7fd fa13 	bl	80a1608 <_malloc_r>
 80a41e2:	4604      	mov	r4, r0
 80a41e4:	b118      	cbz	r0, 80a41ee <_strdup_r+0x22>
 80a41e6:	4632      	mov	r2, r6
 80a41e8:	4629      	mov	r1, r5
 80a41ea:	f7ff ff91 	bl	80a4110 <memcpy>
 80a41ee:	4620      	mov	r0, r4
 80a41f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080a41f4 <iso_year_adjust>:
 80a41f4:	6942      	ldr	r2, [r0, #20]
 80a41f6:	f240 736c 	movw	r3, #1900	; 0x76c
 80a41fa:	2a00      	cmp	r2, #0
 80a41fc:	bfa8      	it	ge
 80a41fe:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80a4202:	4413      	add	r3, r2
 80a4204:	0792      	lsls	r2, r2, #30
 80a4206:	d105      	bne.n	80a4214 <iso_year_adjust+0x20>
 80a4208:	2164      	movs	r1, #100	; 0x64
 80a420a:	fb93 f2f1 	sdiv	r2, r3, r1
 80a420e:	fb01 3212 	mls	r2, r1, r2, r3
 80a4212:	b9da      	cbnz	r2, 80a424c <iso_year_adjust+0x58>
 80a4214:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a4218:	fb93 f1f2 	sdiv	r1, r3, r2
 80a421c:	fb02 3311 	mls	r3, r2, r1, r3
 80a4220:	fab3 f383 	clz	r3, r3
 80a4224:	095b      	lsrs	r3, r3, #5
 80a4226:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 80a422a:	0040      	lsls	r0, r0, #1
 80a422c:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 80a4230:	4418      	add	r0, r3
 80a4232:	f241 63a2 	movw	r3, #5794	; 0x16a2
 80a4236:	4298      	cmp	r0, r3
 80a4238:	d03a      	beq.n	80a42b0 <iso_year_adjust+0xbc>
 80a423a:	dc21      	bgt.n	80a4280 <iso_year_adjust+0x8c>
 80a423c:	2801      	cmp	r0, #1
 80a423e:	dc1a      	bgt.n	80a4276 <iso_year_adjust+0x82>
 80a4240:	2800      	cmp	r0, #0
 80a4242:	bfb4      	ite	lt
 80a4244:	2000      	movlt	r0, #0
 80a4246:	f04f 30ff 	movge.w	r0, #4294967295
 80a424a:	4770      	bx	lr
 80a424c:	2301      	movs	r3, #1
 80a424e:	e7ea      	b.n	80a4226 <iso_year_adjust+0x32>
 80a4250:	2817      	cmp	r0, #23
 80a4252:	d813      	bhi.n	80a427c <iso_year_adjust+0x88>
 80a4254:	e8df f000 	tbb	[pc, r0]
 80a4258:	0c0c0c0c 	.word	0x0c0c0c0c
 80a425c:	0c0c1212 	.word	0x0c0c1212
 80a4260:	12121212 	.word	0x12121212
 80a4264:	12121212 	.word	0x12121212
 80a4268:	0c0c1212 	.word	0x0c0c1212
 80a426c:	0c0c1212 	.word	0x0c0c1212
 80a4270:	f04f 30ff 	mov.w	r0, #4294967295
 80a4274:	4770      	bx	lr
 80a4276:	380a      	subs	r0, #10
 80a4278:	2817      	cmp	r0, #23
 80a427a:	d9e9      	bls.n	80a4250 <iso_year_adjust+0x5c>
 80a427c:	2000      	movs	r0, #0
 80a427e:	4770      	bx	lr
 80a4280:	f241 63b4 	movw	r3, #5812	; 0x16b4
 80a4284:	4298      	cmp	r0, r3
 80a4286:	dc06      	bgt.n	80a4296 <iso_year_adjust+0xa2>
 80a4288:	f241 63b1 	movw	r3, #5809	; 0x16b1
 80a428c:	4298      	cmp	r0, r3
 80a428e:	bfd4      	ite	le
 80a4290:	2000      	movle	r0, #0
 80a4292:	2001      	movgt	r0, #1
 80a4294:	4770      	bx	lr
 80a4296:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 80a429a:	3802      	subs	r0, #2
 80a429c:	2815      	cmp	r0, #21
 80a429e:	d8ed      	bhi.n	80a427c <iso_year_adjust+0x88>
 80a42a0:	2301      	movs	r3, #1
 80a42a2:	4083      	lsls	r3, r0
 80a42a4:	4803      	ldr	r0, [pc, #12]	; (80a42b4 <iso_year_adjust+0xc0>)
 80a42a6:	4018      	ands	r0, r3
 80a42a8:	3800      	subs	r0, #0
 80a42aa:	bf18      	it	ne
 80a42ac:	2001      	movne	r0, #1
 80a42ae:	4770      	bx	lr
 80a42b0:	2001      	movs	r0, #1
 80a42b2:	4770      	bx	lr
 80a42b4:	002a001f 	.word	0x002a001f

080a42b8 <__strftime.isra.0>:
 80a42b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a42bc:	461e      	mov	r6, r3
 80a42be:	2300      	movs	r3, #0
 80a42c0:	4607      	mov	r7, r0
 80a42c2:	460d      	mov	r5, r1
 80a42c4:	461c      	mov	r4, r3
 80a42c6:	b08f      	sub	sp, #60	; 0x3c
 80a42c8:	9302      	str	r3, [sp, #8]
 80a42ca:	7813      	ldrb	r3, [r2, #0]
 80a42cc:	2b00      	cmp	r3, #0
 80a42ce:	f000 84b5 	beq.w	80a4c3c <__strftime.isra.0+0x984>
 80a42d2:	2b25      	cmp	r3, #37	; 0x25
 80a42d4:	d11f      	bne.n	80a4316 <__strftime.isra.0+0x5e>
 80a42d6:	f892 b001 	ldrb.w	fp, [r2, #1]
 80a42da:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 80a42de:	d024      	beq.n	80a432a <__strftime.isra.0+0x72>
 80a42e0:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 80a42e4:	d021      	beq.n	80a432a <__strftime.isra.0+0x72>
 80a42e6:	f04f 0b00 	mov.w	fp, #0
 80a42ea:	f102 0801 	add.w	r8, r2, #1
 80a42ee:	f898 2000 	ldrb.w	r2, [r8]
 80a42f2:	3a31      	subs	r2, #49	; 0x31
 80a42f4:	2a08      	cmp	r2, #8
 80a42f6:	d81b      	bhi.n	80a4330 <__strftime.isra.0+0x78>
 80a42f8:	4640      	mov	r0, r8
 80a42fa:	220a      	movs	r2, #10
 80a42fc:	a906      	add	r1, sp, #24
 80a42fe:	f001 fbeb 	bl	80a5ad8 <strtoul>
 80a4302:	4681      	mov	r9, r0
 80a4304:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a4308:	f898 2000 	ldrb.w	r2, [r8]
 80a430c:	2a45      	cmp	r2, #69	; 0x45
 80a430e:	d112      	bne.n	80a4336 <__strftime.isra.0+0x7e>
 80a4310:	f108 0801 	add.w	r8, r8, #1
 80a4314:	e011      	b.n	80a433a <__strftime.isra.0+0x82>
 80a4316:	1e69      	subs	r1, r5, #1
 80a4318:	42a1      	cmp	r1, r4
 80a431a:	d802      	bhi.n	80a4322 <__strftime.isra.0+0x6a>
 80a431c:	2400      	movs	r4, #0
 80a431e:	f000 bc90 	b.w	80a4c42 <__strftime.isra.0+0x98a>
 80a4322:	553b      	strb	r3, [r7, r4]
 80a4324:	3201      	adds	r2, #1
 80a4326:	3401      	adds	r4, #1
 80a4328:	e7cf      	b.n	80a42ca <__strftime.isra.0+0x12>
 80a432a:	f102 0802 	add.w	r8, r2, #2
 80a432e:	e7de      	b.n	80a42ee <__strftime.isra.0+0x36>
 80a4330:	f04f 0900 	mov.w	r9, #0
 80a4334:	e7e8      	b.n	80a4308 <__strftime.isra.0+0x50>
 80a4336:	2a4f      	cmp	r2, #79	; 0x4f
 80a4338:	d0ea      	beq.n	80a4310 <__strftime.isra.0+0x58>
 80a433a:	f898 0000 	ldrb.w	r0, [r8]
 80a433e:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 80a4342:	2a55      	cmp	r2, #85	; 0x55
 80a4344:	d8ea      	bhi.n	80a431c <__strftime.isra.0+0x64>
 80a4346:	a301      	add	r3, pc, #4	; (adr r3, 80a434c <__strftime.isra.0+0x94>)
 80a4348:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80a434c:	080a4c31 	.word	0x080a4c31
 80a4350:	080a431d 	.word	0x080a431d
 80a4354:	080a431d 	.word	0x080a431d
 80a4358:	080a431d 	.word	0x080a431d
 80a435c:	080a431d 	.word	0x080a431d
 80a4360:	080a431d 	.word	0x080a431d
 80a4364:	080a431d 	.word	0x080a431d
 80a4368:	080a431d 	.word	0x080a431d
 80a436c:	080a431d 	.word	0x080a431d
 80a4370:	080a431d 	.word	0x080a431d
 80a4374:	080a431d 	.word	0x080a431d
 80a4378:	080a431d 	.word	0x080a431d
 80a437c:	080a431d 	.word	0x080a431d
 80a4380:	080a431d 	.word	0x080a431d
 80a4384:	080a431d 	.word	0x080a431d
 80a4388:	080a431d 	.word	0x080a431d
 80a438c:	080a431d 	.word	0x080a431d
 80a4390:	080a431d 	.word	0x080a431d
 80a4394:	080a431d 	.word	0x080a431d
 80a4398:	080a431d 	.word	0x080a431d
 80a439c:	080a431d 	.word	0x080a431d
 80a43a0:	080a431d 	.word	0x080a431d
 80a43a4:	080a431d 	.word	0x080a431d
 80a43a8:	080a431d 	.word	0x080a431d
 80a43ac:	080a431d 	.word	0x080a431d
 80a43b0:	080a431d 	.word	0x080a431d
 80a43b4:	080a431d 	.word	0x080a431d
 80a43b8:	080a431d 	.word	0x080a431d
 80a43bc:	080a44e1 	.word	0x080a44e1
 80a43c0:	080a4539 	.word	0x080a4539
 80a43c4:	080a45a7 	.word	0x080a45a7
 80a43c8:	080a4645 	.word	0x080a4645
 80a43cc:	080a431d 	.word	0x080a431d
 80a43d0:	080a468f 	.word	0x080a468f
 80a43d4:	080a477d 	.word	0x080a477d
 80a43d8:	080a4853 	.word	0x080a4853
 80a43dc:	080a4861 	.word	0x080a4861
 80a43e0:	080a431d 	.word	0x080a431d
 80a43e4:	080a431d 	.word	0x080a431d
 80a43e8:	080a431d 	.word	0x080a431d
 80a43ec:	080a4891 	.word	0x080a4891
 80a43f0:	080a431d 	.word	0x080a431d
 80a43f4:	080a431d 	.word	0x080a431d
 80a43f8:	080a48a5 	.word	0x080a48a5
 80a43fc:	080a431d 	.word	0x080a431d
 80a4400:	080a48f7 	.word	0x080a48f7
 80a4404:	080a4a09 	.word	0x080a4a09
 80a4408:	080a4a19 	.word	0x080a4a19
 80a440c:	080a4a41 	.word	0x080a4a41
 80a4410:	080a4a51 	.word	0x080a4a51
 80a4414:	080a4aeb 	.word	0x080a4aeb
 80a4418:	080a459f 	.word	0x080a459f
 80a441c:	080a4b17 	.word	0x080a4b17
 80a4420:	080a4bdf 	.word	0x080a4bdf
 80a4424:	080a431d 	.word	0x080a431d
 80a4428:	080a431d 	.word	0x080a431d
 80a442c:	080a431d 	.word	0x080a431d
 80a4430:	080a431d 	.word	0x080a431d
 80a4434:	080a431d 	.word	0x080a431d
 80a4438:	080a431d 	.word	0x080a431d
 80a443c:	080a44a5 	.word	0x080a44a5
 80a4440:	080a450f 	.word	0x080a450f
 80a4444:	080a4565 	.word	0x080a4565
 80a4448:	080a4621 	.word	0x080a4621
 80a444c:	080a4621 	.word	0x080a4621
 80a4450:	080a431d 	.word	0x080a431d
 80a4454:	080a46e1 	.word	0x080a46e1
 80a4458:	080a450f 	.word	0x080a450f
 80a445c:	080a431d 	.word	0x080a431d
 80a4460:	080a4883 	.word	0x080a4883
 80a4464:	080a4853 	.word	0x080a4853
 80a4468:	080a4861 	.word	0x080a4861
 80a446c:	080a488b 	.word	0x080a488b
 80a4470:	080a4895 	.word	0x080a4895
 80a4474:	080a431d 	.word	0x080a431d
 80a4478:	080a48a5 	.word	0x080a48a5
 80a447c:	080a431d 	.word	0x080a431d
 80a4480:	080a458f 	.word	0x080a458f
 80a4484:	080a4909 	.word	0x080a4909
 80a4488:	080a4a0d 	.word	0x080a4a0d
 80a448c:	080a4a27 	.word	0x080a4a27
 80a4490:	080a431d 	.word	0x080a431d
 80a4494:	080a4add 	.word	0x080a4add
 80a4498:	080a4597 	.word	0x080a4597
 80a449c:	080a4afb 	.word	0x080a4afb
 80a44a0:	080a4b69 	.word	0x080a4b69
 80a44a4:	69b3      	ldr	r3, [r6, #24]
 80a44a6:	4aa9      	ldr	r2, [pc, #676]	; (80a474c <__strftime.isra.0+0x494>)
 80a44a8:	3318      	adds	r3, #24
 80a44aa:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 80a44ae:	4648      	mov	r0, r9
 80a44b0:	f000 fbd6 	bl	80a4c60 <strlen>
 80a44b4:	f109 39ff 	add.w	r9, r9, #4294967295
 80a44b8:	4420      	add	r0, r4
 80a44ba:	1e6b      	subs	r3, r5, #1
 80a44bc:	42a0      	cmp	r0, r4
 80a44be:	d107      	bne.n	80a44d0 <__strftime.isra.0+0x218>
 80a44c0:	f898 3000 	ldrb.w	r3, [r8]
 80a44c4:	2b00      	cmp	r3, #0
 80a44c6:	f000 83b9 	beq.w	80a4c3c <__strftime.isra.0+0x984>
 80a44ca:	f108 0201 	add.w	r2, r8, #1
 80a44ce:	e6fc      	b.n	80a42ca <__strftime.isra.0+0x12>
 80a44d0:	42a3      	cmp	r3, r4
 80a44d2:	f67f af23 	bls.w	80a431c <__strftime.isra.0+0x64>
 80a44d6:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80a44da:	553a      	strb	r2, [r7, r4]
 80a44dc:	3401      	adds	r4, #1
 80a44de:	e7ed      	b.n	80a44bc <__strftime.isra.0+0x204>
 80a44e0:	69b2      	ldr	r2, [r6, #24]
 80a44e2:	4b9a      	ldr	r3, [pc, #616]	; (80a474c <__strftime.isra.0+0x494>)
 80a44e4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80a44e8:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 80a44ec:	4648      	mov	r0, r9
 80a44ee:	f000 fbb7 	bl	80a4c60 <strlen>
 80a44f2:	f109 39ff 	add.w	r9, r9, #4294967295
 80a44f6:	4420      	add	r0, r4
 80a44f8:	1e6b      	subs	r3, r5, #1
 80a44fa:	42a0      	cmp	r0, r4
 80a44fc:	d0e0      	beq.n	80a44c0 <__strftime.isra.0+0x208>
 80a44fe:	42a3      	cmp	r3, r4
 80a4500:	f67f af0c 	bls.w	80a431c <__strftime.isra.0+0x64>
 80a4504:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80a4508:	553a      	strb	r2, [r7, r4]
 80a450a:	3401      	adds	r4, #1
 80a450c:	e7f5      	b.n	80a44fa <__strftime.isra.0+0x242>
 80a450e:	4b8f      	ldr	r3, [pc, #572]	; (80a474c <__strftime.isra.0+0x494>)
 80a4510:	6932      	ldr	r2, [r6, #16]
 80a4512:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 80a4516:	4648      	mov	r0, r9
 80a4518:	f000 fba2 	bl	80a4c60 <strlen>
 80a451c:	f109 39ff 	add.w	r9, r9, #4294967295
 80a4520:	4420      	add	r0, r4
 80a4522:	1e6b      	subs	r3, r5, #1
 80a4524:	42a0      	cmp	r0, r4
 80a4526:	d0cb      	beq.n	80a44c0 <__strftime.isra.0+0x208>
 80a4528:	42a3      	cmp	r3, r4
 80a452a:	f67f aef7 	bls.w	80a431c <__strftime.isra.0+0x64>
 80a452e:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80a4532:	553a      	strb	r2, [r7, r4]
 80a4534:	3401      	adds	r4, #1
 80a4536:	e7f5      	b.n	80a4524 <__strftime.isra.0+0x26c>
 80a4538:	6933      	ldr	r3, [r6, #16]
 80a453a:	4a84      	ldr	r2, [pc, #528]	; (80a474c <__strftime.isra.0+0x494>)
 80a453c:	330c      	adds	r3, #12
 80a453e:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 80a4542:	4648      	mov	r0, r9
 80a4544:	f000 fb8c 	bl	80a4c60 <strlen>
 80a4548:	f109 39ff 	add.w	r9, r9, #4294967295
 80a454c:	4420      	add	r0, r4
 80a454e:	1e6b      	subs	r3, r5, #1
 80a4550:	42a0      	cmp	r0, r4
 80a4552:	d0b5      	beq.n	80a44c0 <__strftime.isra.0+0x208>
 80a4554:	42a3      	cmp	r3, r4
 80a4556:	f67f aee1 	bls.w	80a431c <__strftime.isra.0+0x64>
 80a455a:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80a455e:	553a      	strb	r2, [r7, r4]
 80a4560:	3401      	adds	r4, #1
 80a4562:	e7f5      	b.n	80a4550 <__strftime.isra.0+0x298>
 80a4564:	4b79      	ldr	r3, [pc, #484]	; (80a474c <__strftime.isra.0+0x494>)
 80a4566:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 80a456a:	4648      	mov	r0, r9
 80a456c:	f000 fb78 	bl	80a4c60 <strlen>
 80a4570:	f899 3000 	ldrb.w	r3, [r9]
 80a4574:	2b00      	cmp	r3, #0
 80a4576:	d0a3      	beq.n	80a44c0 <__strftime.isra.0+0x208>
 80a4578:	4633      	mov	r3, r6
 80a457a:	464a      	mov	r2, r9
 80a457c:	1b29      	subs	r1, r5, r4
 80a457e:	1938      	adds	r0, r7, r4
 80a4580:	f7ff fe9a 	bl	80a42b8 <__strftime.isra.0>
 80a4584:	2800      	cmp	r0, #0
 80a4586:	f77f aec9 	ble.w	80a431c <__strftime.isra.0+0x64>
 80a458a:	4404      	add	r4, r0
 80a458c:	e798      	b.n	80a44c0 <__strftime.isra.0+0x208>
 80a458e:	4b6f      	ldr	r3, [pc, #444]	; (80a474c <__strftime.isra.0+0x494>)
 80a4590:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 80a4594:	e7e9      	b.n	80a456a <__strftime.isra.0+0x2b2>
 80a4596:	4b6d      	ldr	r3, [pc, #436]	; (80a474c <__strftime.isra.0+0x494>)
 80a4598:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 80a459c:	e7e5      	b.n	80a456a <__strftime.isra.0+0x2b2>
 80a459e:	4b6b      	ldr	r3, [pc, #428]	; (80a474c <__strftime.isra.0+0x494>)
 80a45a0:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 80a45a4:	e7e1      	b.n	80a456a <__strftime.isra.0+0x2b2>
 80a45a6:	496a      	ldr	r1, [pc, #424]	; (80a4750 <__strftime.isra.0+0x498>)
 80a45a8:	f8d6 a014 	ldr.w	sl, [r6, #20]
 80a45ac:	458a      	cmp	sl, r1
 80a45ae:	bfac      	ite	ge
 80a45b0:	2100      	movge	r1, #0
 80a45b2:	2101      	movlt	r1, #1
 80a45b4:	f1ba 0f00 	cmp.w	sl, #0
 80a45b8:	db11      	blt.n	80a45de <__strftime.isra.0+0x326>
 80a45ba:	2064      	movs	r0, #100	; 0x64
 80a45bc:	fb9a f0f0 	sdiv	r0, sl, r0
 80a45c0:	3013      	adds	r0, #19
 80a45c2:	f1bb 0f00 	cmp.w	fp, #0
 80a45c6:	d014      	beq.n	80a45f2 <__strftime.isra.0+0x33a>
 80a45c8:	2863      	cmp	r0, #99	; 0x63
 80a45ca:	dd27      	ble.n	80a461c <__strftime.isra.0+0x364>
 80a45cc:	4b61      	ldr	r3, [pc, #388]	; (80a4754 <__strftime.isra.0+0x49c>)
 80a45ce:	4a62      	ldr	r2, [pc, #392]	; (80a4758 <__strftime.isra.0+0x4a0>)
 80a45d0:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 80a45d4:	bf18      	it	ne
 80a45d6:	461a      	movne	r2, r3
 80a45d8:	f8df c180 	ldr.w	ip, [pc, #384]	; 80a475c <__strftime.isra.0+0x4a4>
 80a45dc:	e00c      	b.n	80a45f8 <__strftime.isra.0+0x340>
 80a45de:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 80a45e2:	9103      	str	r1, [sp, #12]
 80a45e4:	f001 fd1e 	bl	80a6024 <abs>
 80a45e8:	2264      	movs	r2, #100	; 0x64
 80a45ea:	9903      	ldr	r1, [sp, #12]
 80a45ec:	fb90 f0f2 	sdiv	r0, r0, r2
 80a45f0:	e7e7      	b.n	80a45c2 <__strftime.isra.0+0x30a>
 80a45f2:	4a58      	ldr	r2, [pc, #352]	; (80a4754 <__strftime.isra.0+0x49c>)
 80a45f4:	f8df c168 	ldr.w	ip, [pc, #360]	; 80a4760 <__strftime.isra.0+0x4a8>
 80a45f8:	f1b9 0f02 	cmp.w	r9, #2
 80a45fc:	bf2c      	ite	cs
 80a45fe:	ebc1 0109 	rsbcs	r1, r1, r9
 80a4602:	f1c1 0102 	rsbcc	r1, r1, #2
 80a4606:	4b57      	ldr	r3, [pc, #348]	; (80a4764 <__strftime.isra.0+0x4ac>)
 80a4608:	9100      	str	r1, [sp, #0]
 80a460a:	4951      	ldr	r1, [pc, #324]	; (80a4750 <__strftime.isra.0+0x498>)
 80a460c:	9001      	str	r0, [sp, #4]
 80a460e:	458a      	cmp	sl, r1
 80a4610:	bfa8      	it	ge
 80a4612:	4613      	movge	r3, r2
 80a4614:	4662      	mov	r2, ip
 80a4616:	1b29      	subs	r1, r5, r4
 80a4618:	1938      	adds	r0, r7, r4
 80a461a:	e029      	b.n	80a4670 <__strftime.isra.0+0x3b8>
 80a461c:	4a4d      	ldr	r2, [pc, #308]	; (80a4754 <__strftime.isra.0+0x49c>)
 80a461e:	e7db      	b.n	80a45d8 <__strftime.isra.0+0x320>
 80a4620:	4951      	ldr	r1, [pc, #324]	; (80a4768 <__strftime.isra.0+0x4b0>)
 80a4622:	4a52      	ldr	r2, [pc, #328]	; (80a476c <__strftime.isra.0+0x4b4>)
 80a4624:	68f3      	ldr	r3, [r6, #12]
 80a4626:	2864      	cmp	r0, #100	; 0x64
 80a4628:	bf08      	it	eq
 80a462a:	460a      	moveq	r2, r1
 80a462c:	1b29      	subs	r1, r5, r4
 80a462e:	1938      	adds	r0, r7, r4
 80a4630:	f7fc ffda 	bl	80a15e8 <sniprintf>
 80a4634:	2800      	cmp	r0, #0
 80a4636:	f6ff ae71 	blt.w	80a431c <__strftime.isra.0+0x64>
 80a463a:	4404      	add	r4, r0
 80a463c:	42a5      	cmp	r5, r4
 80a463e:	f63f af3f 	bhi.w	80a44c0 <__strftime.isra.0+0x208>
 80a4642:	e66b      	b.n	80a431c <__strftime.isra.0+0x64>
 80a4644:	6970      	ldr	r0, [r6, #20]
 80a4646:	6933      	ldr	r3, [r6, #16]
 80a4648:	2800      	cmp	r0, #0
 80a464a:	68f2      	ldr	r2, [r6, #12]
 80a464c:	eb07 0904 	add.w	r9, r7, r4
 80a4650:	eba5 0a04 	sub.w	sl, r5, r4
 80a4654:	f103 0b01 	add.w	fp, r3, #1
 80a4658:	db0d      	blt.n	80a4676 <__strftime.isra.0+0x3be>
 80a465a:	2164      	movs	r1, #100	; 0x64
 80a465c:	fb90 fcf1 	sdiv	ip, r0, r1
 80a4660:	fb01 001c 	mls	r0, r1, ip, r0
 80a4664:	e9cd 2000 	strd	r2, r0, [sp]
 80a4668:	465b      	mov	r3, fp
 80a466a:	4651      	mov	r1, sl
 80a466c:	4648      	mov	r0, r9
 80a466e:	4a40      	ldr	r2, [pc, #256]	; (80a4770 <__strftime.isra.0+0x4b8>)
 80a4670:	f7fc ffba 	bl	80a15e8 <sniprintf>
 80a4674:	e7de      	b.n	80a4634 <__strftime.isra.0+0x37c>
 80a4676:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a467a:	9203      	str	r2, [sp, #12]
 80a467c:	f001 fcd2 	bl	80a6024 <abs>
 80a4680:	2164      	movs	r1, #100	; 0x64
 80a4682:	fb90 fcf1 	sdiv	ip, r0, r1
 80a4686:	9a03      	ldr	r2, [sp, #12]
 80a4688:	fb0c 0011 	mls	r0, ip, r1, r0
 80a468c:	e7ea      	b.n	80a4664 <__strftime.isra.0+0x3ac>
 80a468e:	2225      	movs	r2, #37	; 0x25
 80a4690:	f88d 2018 	strb.w	r2, [sp, #24]
 80a4694:	f1bb 0f00 	cmp.w	fp, #0
 80a4698:	d011      	beq.n	80a46be <__strftime.isra.0+0x406>
 80a469a:	f1b9 0f06 	cmp.w	r9, #6
 80a469e:	bf38      	it	cc
 80a46a0:	f04f 0906 	movcc.w	r9, #6
 80a46a4:	f1b9 0306 	subs.w	r3, r9, #6
 80a46a8:	f88d b019 	strb.w	fp, [sp, #25]
 80a46ac:	d10c      	bne.n	80a46c8 <__strftime.isra.0+0x410>
 80a46ae:	f10d 001a 	add.w	r0, sp, #26
 80a46b2:	4930      	ldr	r1, [pc, #192]	; (80a4774 <__strftime.isra.0+0x4bc>)
 80a46b4:	f7ff fd7a 	bl	80a41ac <strcpy>
 80a46b8:	4633      	mov	r3, r6
 80a46ba:	aa06      	add	r2, sp, #24
 80a46bc:	e75e      	b.n	80a457c <__strftime.isra.0+0x2c4>
 80a46be:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 80a46c2:	f04f 090a 	mov.w	r9, #10
 80a46c6:	e7ed      	b.n	80a46a4 <__strftime.isra.0+0x3ec>
 80a46c8:	211e      	movs	r1, #30
 80a46ca:	4a2b      	ldr	r2, [pc, #172]	; (80a4778 <__strftime.isra.0+0x4c0>)
 80a46cc:	f10d 001a 	add.w	r0, sp, #26
 80a46d0:	f7fc ff8a 	bl	80a15e8 <sniprintf>
 80a46d4:	2800      	cmp	r0, #0
 80a46d6:	ddea      	ble.n	80a46ae <__strftime.isra.0+0x3f6>
 80a46d8:	f10d 031a 	add.w	r3, sp, #26
 80a46dc:	4418      	add	r0, r3
 80a46de:	e7e8      	b.n	80a46b2 <__strftime.isra.0+0x3fa>
 80a46e0:	4630      	mov	r0, r6
 80a46e2:	f7ff fd87 	bl	80a41f4 <iso_year_adjust>
 80a46e6:	4681      	mov	r9, r0
 80a46e8:	6970      	ldr	r0, [r6, #20]
 80a46ea:	2800      	cmp	r0, #0
 80a46ec:	db11      	blt.n	80a4712 <__strftime.isra.0+0x45a>
 80a46ee:	2364      	movs	r3, #100	; 0x64
 80a46f0:	fb90 f2f3 	sdiv	r2, r0, r3
 80a46f4:	fb03 0012 	mls	r0, r3, r2, r0
 80a46f8:	2264      	movs	r2, #100	; 0x64
 80a46fa:	4481      	add	r9, r0
 80a46fc:	fb99 f3f2 	sdiv	r3, r9, r2
 80a4700:	fb02 9913 	mls	r9, r2, r3, r9
 80a4704:	4491      	add	r9, r2
 80a4706:	fbb9 f3f2 	udiv	r3, r9, r2
 80a470a:	fb02 9313 	mls	r3, r2, r3, r9
 80a470e:	4a16      	ldr	r2, [pc, #88]	; (80a4768 <__strftime.isra.0+0x4b0>)
 80a4710:	e78c      	b.n	80a462c <__strftime.isra.0+0x374>
 80a4712:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a4716:	f001 fc85 	bl	80a6024 <abs>
 80a471a:	2364      	movs	r3, #100	; 0x64
 80a471c:	fb90 f2f3 	sdiv	r2, r0, r3
 80a4720:	f1b9 0f00 	cmp.w	r9, #0
 80a4724:	fb02 0013 	mls	r0, r2, r3, r0
 80a4728:	da07      	bge.n	80a473a <__strftime.isra.0+0x482>
 80a472a:	6972      	ldr	r2, [r6, #20]
 80a472c:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 80a4730:	429a      	cmp	r2, r3
 80a4732:	bfb8      	it	lt
 80a4734:	f04f 0901 	movlt.w	r9, #1
 80a4738:	e7de      	b.n	80a46f8 <__strftime.isra.0+0x440>
 80a473a:	d0dd      	beq.n	80a46f8 <__strftime.isra.0+0x440>
 80a473c:	6972      	ldr	r2, [r6, #20]
 80a473e:	4b04      	ldr	r3, [pc, #16]	; (80a4750 <__strftime.isra.0+0x498>)
 80a4740:	429a      	cmp	r2, r3
 80a4742:	bfb8      	it	lt
 80a4744:	f04f 39ff 	movlt.w	r9, #4294967295
 80a4748:	e7d6      	b.n	80a46f8 <__strftime.isra.0+0x440>
 80a474a:	bf00      	nop
 80a474c:	080a79f4 	.word	0x080a79f4
 80a4750:	fffff894 	.word	0xfffff894
 80a4754:	080a76e0 	.word	0x080a76e0
 80a4758:	080a781f 	.word	0x080a781f
 80a475c:	080a7817 	.word	0x080a7817
 80a4760:	080a7810 	.word	0x080a7810
 80a4764:	080a7821 	.word	0x080a7821
 80a4768:	080a7831 	.word	0x080a7831
 80a476c:	080a7823 	.word	0x080a7823
 80a4770:	080a7827 	.word	0x080a7827
 80a4774:	080a783a 	.word	0x080a783a
 80a4778:	080a7836 	.word	0x080a7836
 80a477c:	6971      	ldr	r1, [r6, #20]
 80a477e:	4aba      	ldr	r2, [pc, #744]	; (80a4a68 <__strftime.isra.0+0x7b0>)
 80a4780:	4630      	mov	r0, r6
 80a4782:	4291      	cmp	r1, r2
 80a4784:	bfac      	ite	ge
 80a4786:	2300      	movge	r3, #0
 80a4788:	2301      	movlt	r3, #1
 80a478a:	e9cd 3103 	strd	r3, r1, [sp, #12]
 80a478e:	f7ff fd31 	bl	80a41f4 <iso_year_adjust>
 80a4792:	9904      	ldr	r1, [sp, #16]
 80a4794:	4682      	mov	sl, r0
 80a4796:	2900      	cmp	r1, #0
 80a4798:	db2c      	blt.n	80a47f4 <__strftime.isra.0+0x53c>
 80a479a:	2264      	movs	r2, #100	; 0x64
 80a479c:	fb91 f2f2 	sdiv	r2, r1, r2
 80a47a0:	3213      	adds	r2, #19
 80a47a2:	6970      	ldr	r0, [r6, #20]
 80a47a4:	2800      	cmp	r0, #0
 80a47a6:	db2f      	blt.n	80a4808 <__strftime.isra.0+0x550>
 80a47a8:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80a47ac:	fb90 fefc 	sdiv	lr, r0, ip
 80a47b0:	fb0c 001e 	mls	r0, ip, lr, r0
 80a47b4:	f1ba 0f00 	cmp.w	sl, #0
 80a47b8:	da35      	bge.n	80a4826 <__strftime.isra.0+0x56e>
 80a47ba:	6971      	ldr	r1, [r6, #20]
 80a47bc:	4bab      	ldr	r3, [pc, #684]	; (80a4a6c <__strftime.isra.0+0x7b4>)
 80a47be:	4299      	cmp	r1, r3
 80a47c0:	db3b      	blt.n	80a483a <__strftime.isra.0+0x582>
 80a47c2:	4482      	add	sl, r0
 80a47c4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80a47c8:	d13c      	bne.n	80a4844 <__strftime.isra.0+0x58c>
 80a47ca:	f04f 0a63 	mov.w	sl, #99	; 0x63
 80a47ce:	3a01      	subs	r2, #1
 80a47d0:	2064      	movs	r0, #100	; 0x64
 80a47d2:	9b03      	ldr	r3, [sp, #12]
 80a47d4:	fb00 aa02 	mla	sl, r0, r2, sl
 80a47d8:	2b00      	cmp	r3, #0
 80a47da:	f000 81a8 	beq.w	80a4b2e <__strftime.isra.0+0x876>
 80a47de:	222d      	movs	r2, #45	; 0x2d
 80a47e0:	f88d 2018 	strb.w	r2, [sp, #24]
 80a47e4:	f1b9 0f00 	cmp.w	r9, #0
 80a47e8:	d001      	beq.n	80a47ee <__strftime.isra.0+0x536>
 80a47ea:	f109 39ff 	add.w	r9, r9, #4294967295
 80a47ee:	f10d 0219 	add.w	r2, sp, #25
 80a47f2:	e1a7      	b.n	80a4b44 <__strftime.isra.0+0x88c>
 80a47f4:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80a47f8:	9104      	str	r1, [sp, #16]
 80a47fa:	f001 fc13 	bl	80a6024 <abs>
 80a47fe:	2264      	movs	r2, #100	; 0x64
 80a4800:	9904      	ldr	r1, [sp, #16]
 80a4802:	fb90 f2f2 	sdiv	r2, r0, r2
 80a4806:	e7cc      	b.n	80a47a2 <__strftime.isra.0+0x4ea>
 80a4808:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a480c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80a4810:	f001 fc08 	bl	80a6024 <abs>
 80a4814:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 80a4818:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80a481c:	fb90 fefc 	sdiv	lr, r0, ip
 80a4820:	fb0e 001c 	mls	r0, lr, ip, r0
 80a4824:	e7c6      	b.n	80a47b4 <__strftime.isra.0+0x4fc>
 80a4826:	d0cc      	beq.n	80a47c2 <__strftime.isra.0+0x50a>
 80a4828:	4b8f      	ldr	r3, [pc, #572]	; (80a4a68 <__strftime.isra.0+0x7b0>)
 80a482a:	4299      	cmp	r1, r3
 80a482c:	bfb6      	itet	lt
 80a482e:	2301      	movlt	r3, #1
 80a4830:	2300      	movge	r3, #0
 80a4832:	f04f 3aff 	movlt.w	sl, #4294967295
 80a4836:	9303      	str	r3, [sp, #12]
 80a4838:	e7c3      	b.n	80a47c2 <__strftime.isra.0+0x50a>
 80a483a:	f04f 0a01 	mov.w	sl, #1
 80a483e:	f8cd a00c 	str.w	sl, [sp, #12]
 80a4842:	e7be      	b.n	80a47c2 <__strftime.isra.0+0x50a>
 80a4844:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 80a4848:	bf04      	itt	eq
 80a484a:	f04f 0a00 	moveq.w	sl, #0
 80a484e:	3201      	addeq	r2, #1
 80a4850:	e7be      	b.n	80a47d0 <__strftime.isra.0+0x518>
 80a4852:	4987      	ldr	r1, [pc, #540]	; (80a4a70 <__strftime.isra.0+0x7b8>)
 80a4854:	4a87      	ldr	r2, [pc, #540]	; (80a4a74 <__strftime.isra.0+0x7bc>)
 80a4856:	68b3      	ldr	r3, [r6, #8]
 80a4858:	286b      	cmp	r0, #107	; 0x6b
 80a485a:	bf08      	it	eq
 80a485c:	460a      	moveq	r2, r1
 80a485e:	e6e5      	b.n	80a462c <__strftime.isra.0+0x374>
 80a4860:	68b3      	ldr	r3, [r6, #8]
 80a4862:	b163      	cbz	r3, 80a487e <__strftime.isra.0+0x5c6>
 80a4864:	2b0c      	cmp	r3, #12
 80a4866:	d004      	beq.n	80a4872 <__strftime.isra.0+0x5ba>
 80a4868:	210c      	movs	r1, #12
 80a486a:	fb93 f2f1 	sdiv	r2, r3, r1
 80a486e:	fb01 3312 	mls	r3, r1, r2, r3
 80a4872:	4980      	ldr	r1, [pc, #512]	; (80a4a74 <__strftime.isra.0+0x7bc>)
 80a4874:	4a7e      	ldr	r2, [pc, #504]	; (80a4a70 <__strftime.isra.0+0x7b8>)
 80a4876:	2849      	cmp	r0, #73	; 0x49
 80a4878:	bf08      	it	eq
 80a487a:	460a      	moveq	r2, r1
 80a487c:	e6d6      	b.n	80a462c <__strftime.isra.0+0x374>
 80a487e:	230c      	movs	r3, #12
 80a4880:	e7f7      	b.n	80a4872 <__strftime.isra.0+0x5ba>
 80a4882:	69f3      	ldr	r3, [r6, #28]
 80a4884:	4a7c      	ldr	r2, [pc, #496]	; (80a4a78 <__strftime.isra.0+0x7c0>)
 80a4886:	3301      	adds	r3, #1
 80a4888:	e6d0      	b.n	80a462c <__strftime.isra.0+0x374>
 80a488a:	6933      	ldr	r3, [r6, #16]
 80a488c:	3301      	adds	r3, #1
 80a488e:	e73e      	b.n	80a470e <__strftime.isra.0+0x456>
 80a4890:	6873      	ldr	r3, [r6, #4]
 80a4892:	e73c      	b.n	80a470e <__strftime.isra.0+0x456>
 80a4894:	1e6b      	subs	r3, r5, #1
 80a4896:	429c      	cmp	r4, r3
 80a4898:	f4bf ad40 	bcs.w	80a431c <__strftime.isra.0+0x64>
 80a489c:	230a      	movs	r3, #10
 80a489e:	553b      	strb	r3, [r7, r4]
 80a48a0:	3401      	adds	r4, #1
 80a48a2:	e60d      	b.n	80a44c0 <__strftime.isra.0+0x208>
 80a48a4:	68b3      	ldr	r3, [r6, #8]
 80a48a6:	2b0b      	cmp	r3, #11
 80a48a8:	bfd4      	ite	le
 80a48aa:	2200      	movle	r2, #0
 80a48ac:	2201      	movgt	r2, #1
 80a48ae:	4b73      	ldr	r3, [pc, #460]	; (80a4a7c <__strftime.isra.0+0x7c4>)
 80a48b0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80a48b4:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 80a48b8:	4648      	mov	r0, r9
 80a48ba:	f000 f9d1 	bl	80a4c60 <strlen>
 80a48be:	f109 32ff 	add.w	r2, r9, #4294967295
 80a48c2:	4420      	add	r0, r4
 80a48c4:	f105 3cff 	add.w	ip, r5, #4294967295
 80a48c8:	42a0      	cmp	r0, r4
 80a48ca:	f43f adf9 	beq.w	80a44c0 <__strftime.isra.0+0x208>
 80a48ce:	45a4      	cmp	ip, r4
 80a48d0:	f67f ad24 	bls.w	80a431c <__strftime.isra.0+0x64>
 80a48d4:	f898 1000 	ldrb.w	r1, [r8]
 80a48d8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80a48dc:	2950      	cmp	r1, #80	; 0x50
 80a48de:	d107      	bne.n	80a48f0 <__strftime.isra.0+0x638>
 80a48e0:	4967      	ldr	r1, [pc, #412]	; (80a4a80 <__strftime.isra.0+0x7c8>)
 80a48e2:	5cc9      	ldrb	r1, [r1, r3]
 80a48e4:	f001 0103 	and.w	r1, r1, #3
 80a48e8:	2901      	cmp	r1, #1
 80a48ea:	bf08      	it	eq
 80a48ec:	3320      	addeq	r3, #32
 80a48ee:	b2db      	uxtb	r3, r3
 80a48f0:	553b      	strb	r3, [r7, r4]
 80a48f2:	3401      	adds	r4, #1
 80a48f4:	e7e8      	b.n	80a48c8 <__strftime.isra.0+0x610>
 80a48f6:	6873      	ldr	r3, [r6, #4]
 80a48f8:	4a62      	ldr	r2, [pc, #392]	; (80a4a84 <__strftime.isra.0+0x7cc>)
 80a48fa:	9300      	str	r3, [sp, #0]
 80a48fc:	68b3      	ldr	r3, [r6, #8]
 80a48fe:	1b29      	subs	r1, r5, r4
 80a4900:	1938      	adds	r0, r7, r4
 80a4902:	f7fc fe71 	bl	80a15e8 <sniprintf>
 80a4906:	e695      	b.n	80a4634 <__strftime.isra.0+0x37c>
 80a4908:	6a33      	ldr	r3, [r6, #32]
 80a490a:	2b00      	cmp	r3, #0
 80a490c:	db79      	blt.n	80a4a02 <__strftime.isra.0+0x74a>
 80a490e:	f001 f991 	bl	80a5c34 <__tz_lock>
 80a4912:	9b02      	ldr	r3, [sp, #8]
 80a4914:	b90b      	cbnz	r3, 80a491a <__strftime.isra.0+0x662>
 80a4916:	f001 f999 	bl	80a5c4c <_tzset_unlocked>
 80a491a:	f001 ff31 	bl	80a6780 <__gettzinfo>
 80a491e:	6a33      	ldr	r3, [r6, #32]
 80a4920:	2b00      	cmp	r3, #0
 80a4922:	bfd4      	ite	le
 80a4924:	2200      	movle	r2, #0
 80a4926:	2201      	movgt	r2, #1
 80a4928:	2328      	movs	r3, #40	; 0x28
 80a492a:	fb02 3303 	mla	r3, r2, r3, r3
 80a492e:	58c3      	ldr	r3, [r0, r3]
 80a4930:	f1c3 0900 	rsb	r9, r3, #0
 80a4934:	f001 f984 	bl	80a5c40 <__tz_unlock>
 80a4938:	2301      	movs	r3, #1
 80a493a:	9302      	str	r3, [sp, #8]
 80a493c:	6972      	ldr	r2, [r6, #20]
 80a493e:	1b29      	subs	r1, r5, r4
 80a4940:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 80a4944:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 80a4948:	f16c 0c00 	sbc.w	ip, ip, #0
 80a494c:	f1bc 0f00 	cmp.w	ip, #0
 80a4950:	eb07 0004 	add.w	r0, r7, r4
 80a4954:	da02      	bge.n	80a495c <__strftime.isra.0+0x6a4>
 80a4956:	3303      	adds	r3, #3
 80a4958:	f14c 0c00 	adc.w	ip, ip, #0
 80a495c:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80a4960:	f102 3aff 	add.w	sl, r2, #4294967295
 80a4964:	fb9a fefe 	sdiv	lr, sl, lr
 80a4968:	089b      	lsrs	r3, r3, #2
 80a496a:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 80a496e:	ebb3 030e 	subs.w	r3, r3, lr
 80a4972:	ea4f 0cac 	mov.w	ip, ip, asr #2
 80a4976:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 80a497a:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 80a497e:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 80a4982:	fb9a fefe 	sdiv	lr, sl, lr
 80a4986:	eb13 030e 	adds.w	r3, r3, lr
 80a498a:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 80a498e:	f240 1c6d 	movw	ip, #365	; 0x16d
 80a4992:	3a46      	subs	r2, #70	; 0x46
 80a4994:	fb0c f202 	mul.w	r2, ip, r2
 80a4998:	f04f 0c18 	mov.w	ip, #24
 80a499c:	189b      	adds	r3, r3, r2
 80a499e:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 80a49a2:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 80a49a6:	eb13 030e 	adds.w	r3, r3, lr
 80a49aa:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 80a49ae:	fba3 3e0c 	umull	r3, lr, r3, ip
 80a49b2:	fb0c e202 	mla	r2, ip, r2, lr
 80a49b6:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 80a49ba:	f8d6 e008 	ldr.w	lr, [r6, #8]
 80a49be:	eb13 030e 	adds.w	r3, r3, lr
 80a49c2:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 80a49c6:	fba3 320c 	umull	r3, r2, r3, ip
 80a49ca:	fb0c 220e 	mla	r2, ip, lr, r2
 80a49ce:	f8d6 e004 	ldr.w	lr, [r6, #4]
 80a49d2:	eb13 030e 	adds.w	r3, r3, lr
 80a49d6:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 80a49da:	fba3 3e0c 	umull	r3, lr, r3, ip
 80a49de:	fb0c e202 	mla	r2, ip, r2, lr
 80a49e2:	f8d6 e000 	ldr.w	lr, [r6]
 80a49e6:	eb13 030e 	adds.w	r3, r3, lr
 80a49ea:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 80a49ee:	ebb3 0309 	subs.w	r3, r3, r9
 80a49f2:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 80a49f6:	e9cd 3200 	strd	r3, r2, [sp]
 80a49fa:	4a23      	ldr	r2, [pc, #140]	; (80a4a88 <__strftime.isra.0+0x7d0>)
 80a49fc:	f7fc fdf4 	bl	80a15e8 <sniprintf>
 80a4a00:	e618      	b.n	80a4634 <__strftime.isra.0+0x37c>
 80a4a02:	f04f 0900 	mov.w	r9, #0
 80a4a06:	e799      	b.n	80a493c <__strftime.isra.0+0x684>
 80a4a08:	6833      	ldr	r3, [r6, #0]
 80a4a0a:	e680      	b.n	80a470e <__strftime.isra.0+0x456>
 80a4a0c:	1e6b      	subs	r3, r5, #1
 80a4a0e:	429c      	cmp	r4, r3
 80a4a10:	f4bf ac84 	bcs.w	80a431c <__strftime.isra.0+0x64>
 80a4a14:	2309      	movs	r3, #9
 80a4a16:	e742      	b.n	80a489e <__strftime.isra.0+0x5e6>
 80a4a18:	6833      	ldr	r3, [r6, #0]
 80a4a1a:	4a1c      	ldr	r2, [pc, #112]	; (80a4a8c <__strftime.isra.0+0x7d4>)
 80a4a1c:	9301      	str	r3, [sp, #4]
 80a4a1e:	6873      	ldr	r3, [r6, #4]
 80a4a20:	9300      	str	r3, [sp, #0]
 80a4a22:	68b3      	ldr	r3, [r6, #8]
 80a4a24:	e5f7      	b.n	80a4616 <__strftime.isra.0+0x35e>
 80a4a26:	1e6b      	subs	r3, r5, #1
 80a4a28:	429c      	cmp	r4, r3
 80a4a2a:	f4bf ac77 	bcs.w	80a431c <__strftime.isra.0+0x64>
 80a4a2e:	69b3      	ldr	r3, [r6, #24]
 80a4a30:	1c62      	adds	r2, r4, #1
 80a4a32:	b91b      	cbnz	r3, 80a4a3c <__strftime.isra.0+0x784>
 80a4a34:	2337      	movs	r3, #55	; 0x37
 80a4a36:	553b      	strb	r3, [r7, r4]
 80a4a38:	4614      	mov	r4, r2
 80a4a3a:	e541      	b.n	80a44c0 <__strftime.isra.0+0x208>
 80a4a3c:	3330      	adds	r3, #48	; 0x30
 80a4a3e:	e7fa      	b.n	80a4a36 <__strftime.isra.0+0x77e>
 80a4a40:	69f3      	ldr	r3, [r6, #28]
 80a4a42:	69b2      	ldr	r2, [r6, #24]
 80a4a44:	3307      	adds	r3, #7
 80a4a46:	1a9b      	subs	r3, r3, r2
 80a4a48:	2207      	movs	r2, #7
 80a4a4a:	fb93 f3f2 	sdiv	r3, r3, r2
 80a4a4e:	e65e      	b.n	80a470e <__strftime.isra.0+0x456>
 80a4a50:	4630      	mov	r0, r6
 80a4a52:	f7ff fbcf 	bl	80a41f4 <iso_year_adjust>
 80a4a56:	69b2      	ldr	r2, [r6, #24]
 80a4a58:	b1d2      	cbz	r2, 80a4a90 <__strftime.isra.0+0x7d8>
 80a4a5a:	3a01      	subs	r2, #1
 80a4a5c:	2800      	cmp	r0, #0
 80a4a5e:	dc3b      	bgt.n	80a4ad8 <__strftime.isra.0+0x820>
 80a4a60:	69f3      	ldr	r3, [r6, #28]
 80a4a62:	d117      	bne.n	80a4a94 <__strftime.isra.0+0x7dc>
 80a4a64:	330a      	adds	r3, #10
 80a4a66:	e7ee      	b.n	80a4a46 <__strftime.isra.0+0x78e>
 80a4a68:	fffff894 	.word	0xfffff894
 80a4a6c:	fffff895 	.word	0xfffff895
 80a4a70:	080a7823 	.word	0x080a7823
 80a4a74:	080a7831 	.word	0x080a7831
 80a4a78:	080a7846 	.word	0x080a7846
 80a4a7c:	080a79f4 	.word	0x080a79f4
 80a4a80:	080a7b2d 	.word	0x080a7b2d
 80a4a84:	080a7855 	.word	0x080a7855
 80a4a88:	080a784b 	.word	0x080a784b
 80a4a8c:	080a7850 	.word	0x080a7850
 80a4a90:	2206      	movs	r2, #6
 80a4a92:	e7e3      	b.n	80a4a5c <__strftime.isra.0+0x7a4>
 80a4a94:	6971      	ldr	r1, [r6, #20]
 80a4a96:	1ad2      	subs	r2, r2, r3
 80a4a98:	2900      	cmp	r1, #0
 80a4a9a:	f240 736b 	movw	r3, #1899	; 0x76b
 80a4a9e:	bfa8      	it	ge
 80a4aa0:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 80a4aa4:	440b      	add	r3, r1
 80a4aa6:	0799      	lsls	r1, r3, #30
 80a4aa8:	d105      	bne.n	80a4ab6 <__strftime.isra.0+0x7fe>
 80a4aaa:	2064      	movs	r0, #100	; 0x64
 80a4aac:	fb93 f1f0 	sdiv	r1, r3, r0
 80a4ab0:	fb00 3111 	mls	r1, r0, r1, r3
 80a4ab4:	b971      	cbnz	r1, 80a4ad4 <__strftime.isra.0+0x81c>
 80a4ab6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a4aba:	fb93 f0f1 	sdiv	r0, r3, r1
 80a4abe:	fb01 3310 	mls	r3, r1, r0, r3
 80a4ac2:	fab3 f383 	clz	r3, r3
 80a4ac6:	095b      	lsrs	r3, r3, #5
 80a4ac8:	1ad3      	subs	r3, r2, r3
 80a4aca:	2b05      	cmp	r3, #5
 80a4acc:	bfb4      	ite	lt
 80a4ace:	2335      	movlt	r3, #53	; 0x35
 80a4ad0:	2334      	movge	r3, #52	; 0x34
 80a4ad2:	e61c      	b.n	80a470e <__strftime.isra.0+0x456>
 80a4ad4:	2301      	movs	r3, #1
 80a4ad6:	e7f7      	b.n	80a4ac8 <__strftime.isra.0+0x810>
 80a4ad8:	2301      	movs	r3, #1
 80a4ada:	e618      	b.n	80a470e <__strftime.isra.0+0x456>
 80a4adc:	1e6b      	subs	r3, r5, #1
 80a4ade:	429c      	cmp	r4, r3
 80a4ae0:	f4bf ac1c 	bcs.w	80a431c <__strftime.isra.0+0x64>
 80a4ae4:	69b3      	ldr	r3, [r6, #24]
 80a4ae6:	3330      	adds	r3, #48	; 0x30
 80a4ae8:	e6d9      	b.n	80a489e <__strftime.isra.0+0x5e6>
 80a4aea:	69b2      	ldr	r2, [r6, #24]
 80a4aec:	b11a      	cbz	r2, 80a4af6 <__strftime.isra.0+0x83e>
 80a4aee:	3a01      	subs	r2, #1
 80a4af0:	69f3      	ldr	r3, [r6, #28]
 80a4af2:	3307      	adds	r3, #7
 80a4af4:	e7a7      	b.n	80a4a46 <__strftime.isra.0+0x78e>
 80a4af6:	2206      	movs	r2, #6
 80a4af8:	e7fa      	b.n	80a4af0 <__strftime.isra.0+0x838>
 80a4afa:	6970      	ldr	r0, [r6, #20]
 80a4afc:	2800      	cmp	r0, #0
 80a4afe:	db05      	blt.n	80a4b0c <__strftime.isra.0+0x854>
 80a4b00:	2364      	movs	r3, #100	; 0x64
 80a4b02:	fb90 f2f3 	sdiv	r2, r0, r3
 80a4b06:	fb02 0313 	mls	r3, r2, r3, r0
 80a4b0a:	e600      	b.n	80a470e <__strftime.isra.0+0x456>
 80a4b0c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a4b10:	f001 fa88 	bl	80a6024 <abs>
 80a4b14:	e7f4      	b.n	80a4b00 <__strftime.isra.0+0x848>
 80a4b16:	6972      	ldr	r2, [r6, #20]
 80a4b18:	494c      	ldr	r1, [pc, #304]	; (80a4c4c <__strftime.isra.0+0x994>)
 80a4b1a:	428a      	cmp	r2, r1
 80a4b1c:	da05      	bge.n	80a4b2a <__strftime.isra.0+0x872>
 80a4b1e:	202d      	movs	r0, #45	; 0x2d
 80a4b20:	eba1 0a02 	sub.w	sl, r1, r2
 80a4b24:	f88d 0018 	strb.w	r0, [sp, #24]
 80a4b28:	e65c      	b.n	80a47e4 <__strftime.isra.0+0x52c>
 80a4b2a:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 80a4b2e:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 80a4b32:	d106      	bne.n	80a4b42 <__strftime.isra.0+0x88a>
 80a4b34:	f242 720f 	movw	r2, #9999	; 0x270f
 80a4b38:	4592      	cmp	sl, r2
 80a4b3a:	d902      	bls.n	80a4b42 <__strftime.isra.0+0x88a>
 80a4b3c:	f88d b018 	strb.w	fp, [sp, #24]
 80a4b40:	e650      	b.n	80a47e4 <__strftime.isra.0+0x52c>
 80a4b42:	aa06      	add	r2, sp, #24
 80a4b44:	2125      	movs	r1, #37	; 0x25
 80a4b46:	7011      	strb	r1, [r2, #0]
 80a4b48:	f1bb 0f00 	cmp.w	fp, #0
 80a4b4c:	d108      	bne.n	80a4b60 <__strftime.isra.0+0x8a8>
 80a4b4e:	1c50      	adds	r0, r2, #1
 80a4b50:	493f      	ldr	r1, [pc, #252]	; (80a4c50 <__strftime.isra.0+0x998>)
 80a4b52:	f7ff fb2b 	bl	80a41ac <strcpy>
 80a4b56:	464b      	mov	r3, r9
 80a4b58:	f8cd a000 	str.w	sl, [sp]
 80a4b5c:	aa06      	add	r2, sp, #24
 80a4b5e:	e6ce      	b.n	80a48fe <__strftime.isra.0+0x646>
 80a4b60:	2330      	movs	r3, #48	; 0x30
 80a4b62:	1c90      	adds	r0, r2, #2
 80a4b64:	7053      	strb	r3, [r2, #1]
 80a4b66:	e7f3      	b.n	80a4b50 <__strftime.isra.0+0x898>
 80a4b68:	6a33      	ldr	r3, [r6, #32]
 80a4b6a:	2b00      	cmp	r3, #0
 80a4b6c:	f6ff aca8 	blt.w	80a44c0 <__strftime.isra.0+0x208>
 80a4b70:	f001 f860 	bl	80a5c34 <__tz_lock>
 80a4b74:	9b02      	ldr	r3, [sp, #8]
 80a4b76:	b90b      	cbnz	r3, 80a4b7c <__strftime.isra.0+0x8c4>
 80a4b78:	f001 f868 	bl	80a5c4c <_tzset_unlocked>
 80a4b7c:	f001 fe00 	bl	80a6780 <__gettzinfo>
 80a4b80:	6a33      	ldr	r3, [r6, #32]
 80a4b82:	eb07 0a04 	add.w	sl, r7, r4
 80a4b86:	2b00      	cmp	r3, #0
 80a4b88:	bfd4      	ite	le
 80a4b8a:	2200      	movle	r2, #0
 80a4b8c:	2201      	movgt	r2, #1
 80a4b8e:	2328      	movs	r3, #40	; 0x28
 80a4b90:	fb02 3303 	mla	r3, r2, r3, r3
 80a4b94:	58c3      	ldr	r3, [r0, r3]
 80a4b96:	eba5 0b04 	sub.w	fp, r5, r4
 80a4b9a:	f1c3 0900 	rsb	r9, r3, #0
 80a4b9e:	f001 f84f 	bl	80a5c40 <__tz_unlock>
 80a4ba2:	233c      	movs	r3, #60	; 0x3c
 80a4ba4:	fb99 f0f3 	sdiv	r0, r9, r3
 80a4ba8:	f001 fe9c 	bl	80a68e4 <labs>
 80a4bac:	233c      	movs	r3, #60	; 0x3c
 80a4bae:	fb90 f2f3 	sdiv	r2, r0, r3
 80a4bb2:	fb02 0013 	mls	r0, r2, r3, r0
 80a4bb6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a4bba:	9000      	str	r0, [sp, #0]
 80a4bbc:	fb99 f3f3 	sdiv	r3, r9, r3
 80a4bc0:	4659      	mov	r1, fp
 80a4bc2:	4650      	mov	r0, sl
 80a4bc4:	4a23      	ldr	r2, [pc, #140]	; (80a4c54 <__strftime.isra.0+0x99c>)
 80a4bc6:	f7fc fd0f 	bl	80a15e8 <sniprintf>
 80a4bca:	2800      	cmp	r0, #0
 80a4bcc:	f6ff aba6 	blt.w	80a431c <__strftime.isra.0+0x64>
 80a4bd0:	4404      	add	r4, r0
 80a4bd2:	42a5      	cmp	r5, r4
 80a4bd4:	f67f aba2 	bls.w	80a431c <__strftime.isra.0+0x64>
 80a4bd8:	2301      	movs	r3, #1
 80a4bda:	9302      	str	r3, [sp, #8]
 80a4bdc:	e470      	b.n	80a44c0 <__strftime.isra.0+0x208>
 80a4bde:	6a33      	ldr	r3, [r6, #32]
 80a4be0:	2b00      	cmp	r3, #0
 80a4be2:	f6ff ac6d 	blt.w	80a44c0 <__strftime.isra.0+0x208>
 80a4be6:	f001 f825 	bl	80a5c34 <__tz_lock>
 80a4bea:	9b02      	ldr	r3, [sp, #8]
 80a4bec:	b90b      	cbnz	r3, 80a4bf2 <__strftime.isra.0+0x93a>
 80a4bee:	f001 f82d 	bl	80a5c4c <_tzset_unlocked>
 80a4bf2:	6a33      	ldr	r3, [r6, #32]
 80a4bf4:	4a18      	ldr	r2, [pc, #96]	; (80a4c58 <__strftime.isra.0+0x9a0>)
 80a4bf6:	2b00      	cmp	r3, #0
 80a4bf8:	bfd4      	ite	le
 80a4bfa:	2300      	movle	r3, #0
 80a4bfc:	2301      	movgt	r3, #1
 80a4bfe:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 80a4c02:	4648      	mov	r0, r9
 80a4c04:	f000 f82c 	bl	80a4c60 <strlen>
 80a4c08:	f109 39ff 	add.w	r9, r9, #4294967295
 80a4c0c:	4420      	add	r0, r4
 80a4c0e:	1e6b      	subs	r3, r5, #1
 80a4c10:	42a0      	cmp	r0, r4
 80a4c12:	d102      	bne.n	80a4c1a <__strftime.isra.0+0x962>
 80a4c14:	f001 f814 	bl	80a5c40 <__tz_unlock>
 80a4c18:	e7de      	b.n	80a4bd8 <__strftime.isra.0+0x920>
 80a4c1a:	42a3      	cmp	r3, r4
 80a4c1c:	d904      	bls.n	80a4c28 <__strftime.isra.0+0x970>
 80a4c1e:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80a4c22:	553a      	strb	r2, [r7, r4]
 80a4c24:	3401      	adds	r4, #1
 80a4c26:	e7f3      	b.n	80a4c10 <__strftime.isra.0+0x958>
 80a4c28:	f001 f80a 	bl	80a5c40 <__tz_unlock>
 80a4c2c:	f7ff bb76 	b.w	80a431c <__strftime.isra.0+0x64>
 80a4c30:	1e6b      	subs	r3, r5, #1
 80a4c32:	429c      	cmp	r4, r3
 80a4c34:	f4bf ab72 	bcs.w	80a431c <__strftime.isra.0+0x64>
 80a4c38:	2325      	movs	r3, #37	; 0x25
 80a4c3a:	e630      	b.n	80a489e <__strftime.isra.0+0x5e6>
 80a4c3c:	b10d      	cbz	r5, 80a4c42 <__strftime.isra.0+0x98a>
 80a4c3e:	2300      	movs	r3, #0
 80a4c40:	553b      	strb	r3, [r7, r4]
 80a4c42:	4620      	mov	r0, r4
 80a4c44:	b00f      	add	sp, #60	; 0x3c
 80a4c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4c4a:	bf00      	nop
 80a4c4c:	fffff894 	.word	0xfffff894
 80a4c50:	080a7842 	.word	0x080a7842
 80a4c54:	080a785f 	.word	0x080a785f
 80a4c58:	20000070 	.word	0x20000070

080a4c5c <strftime>:
 80a4c5c:	f7ff bb2c 	b.w	80a42b8 <__strftime.isra.0>

080a4c60 <strlen>:
 80a4c60:	4603      	mov	r3, r0
 80a4c62:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a4c66:	2a00      	cmp	r2, #0
 80a4c68:	d1fb      	bne.n	80a4c62 <strlen+0x2>
 80a4c6a:	1a18      	subs	r0, r3, r0
 80a4c6c:	3801      	subs	r0, #1
 80a4c6e:	4770      	bx	lr

080a4c70 <strncmp>:
 80a4c70:	4603      	mov	r3, r0
 80a4c72:	b510      	push	{r4, lr}
 80a4c74:	b172      	cbz	r2, 80a4c94 <strncmp+0x24>
 80a4c76:	3901      	subs	r1, #1
 80a4c78:	1884      	adds	r4, r0, r2
 80a4c7a:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a4c7e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a4c82:	4290      	cmp	r0, r2
 80a4c84:	d101      	bne.n	80a4c8a <strncmp+0x1a>
 80a4c86:	42a3      	cmp	r3, r4
 80a4c88:	d101      	bne.n	80a4c8e <strncmp+0x1e>
 80a4c8a:	1a80      	subs	r0, r0, r2
 80a4c8c:	bd10      	pop	{r4, pc}
 80a4c8e:	2800      	cmp	r0, #0
 80a4c90:	d1f3      	bne.n	80a4c7a <strncmp+0xa>
 80a4c92:	e7fa      	b.n	80a4c8a <strncmp+0x1a>
 80a4c94:	4610      	mov	r0, r2
 80a4c96:	e7f9      	b.n	80a4c8c <strncmp+0x1c>

080a4c98 <strncpy>:
 80a4c98:	4603      	mov	r3, r0
 80a4c9a:	b510      	push	{r4, lr}
 80a4c9c:	3901      	subs	r1, #1
 80a4c9e:	b132      	cbz	r2, 80a4cae <strncpy+0x16>
 80a4ca0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a4ca4:	3a01      	subs	r2, #1
 80a4ca6:	f803 4b01 	strb.w	r4, [r3], #1
 80a4caa:	2c00      	cmp	r4, #0
 80a4cac:	d1f7      	bne.n	80a4c9e <strncpy+0x6>
 80a4cae:	2100      	movs	r1, #0
 80a4cb0:	441a      	add	r2, r3
 80a4cb2:	4293      	cmp	r3, r2
 80a4cb4:	d100      	bne.n	80a4cb8 <strncpy+0x20>
 80a4cb6:	bd10      	pop	{r4, pc}
 80a4cb8:	f803 1b01 	strb.w	r1, [r3], #1
 80a4cbc:	e7f9      	b.n	80a4cb2 <strncpy+0x1a>

080a4cbe <sulp>:
 80a4cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a4cc2:	460f      	mov	r7, r1
 80a4cc4:	4690      	mov	r8, r2
 80a4cc6:	f002 f997 	bl	80a6ff8 <__ulp>
 80a4cca:	4604      	mov	r4, r0
 80a4ccc:	460d      	mov	r5, r1
 80a4cce:	f1b8 0f00 	cmp.w	r8, #0
 80a4cd2:	d011      	beq.n	80a4cf8 <sulp+0x3a>
 80a4cd4:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80a4cd8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a4cdc:	2b00      	cmp	r3, #0
 80a4cde:	dd0b      	ble.n	80a4cf8 <sulp+0x3a>
 80a4ce0:	2400      	movs	r4, #0
 80a4ce2:	051b      	lsls	r3, r3, #20
 80a4ce4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80a4ce8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80a4cec:	4622      	mov	r2, r4
 80a4cee:	462b      	mov	r3, r5
 80a4cf0:	f7fe fa90 	bl	80a3214 <__aeabi_dmul>
 80a4cf4:	4604      	mov	r4, r0
 80a4cf6:	460d      	mov	r5, r1
 80a4cf8:	4620      	mov	r0, r4
 80a4cfa:	4629      	mov	r1, r5
 80a4cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a4d00 <_strtod_l>:
 80a4d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4d04:	469b      	mov	fp, r3
 80a4d06:	2300      	movs	r3, #0
 80a4d08:	b09f      	sub	sp, #124	; 0x7c
 80a4d0a:	931a      	str	r3, [sp, #104]	; 0x68
 80a4d0c:	4b9e      	ldr	r3, [pc, #632]	; (80a4f88 <_strtod_l+0x288>)
 80a4d0e:	4682      	mov	sl, r0
 80a4d10:	681f      	ldr	r7, [r3, #0]
 80a4d12:	460e      	mov	r6, r1
 80a4d14:	4638      	mov	r0, r7
 80a4d16:	9215      	str	r2, [sp, #84]	; 0x54
 80a4d18:	f7ff ffa2 	bl	80a4c60 <strlen>
 80a4d1c:	f04f 0800 	mov.w	r8, #0
 80a4d20:	4604      	mov	r4, r0
 80a4d22:	f04f 0900 	mov.w	r9, #0
 80a4d26:	9619      	str	r6, [sp, #100]	; 0x64
 80a4d28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a4d2a:	781a      	ldrb	r2, [r3, #0]
 80a4d2c:	2a2b      	cmp	r2, #43	; 0x2b
 80a4d2e:	d04c      	beq.n	80a4dca <_strtod_l+0xca>
 80a4d30:	d83a      	bhi.n	80a4da8 <_strtod_l+0xa8>
 80a4d32:	2a0d      	cmp	r2, #13
 80a4d34:	d833      	bhi.n	80a4d9e <_strtod_l+0x9e>
 80a4d36:	2a08      	cmp	r2, #8
 80a4d38:	d833      	bhi.n	80a4da2 <_strtod_l+0xa2>
 80a4d3a:	2a00      	cmp	r2, #0
 80a4d3c:	d03d      	beq.n	80a4dba <_strtod_l+0xba>
 80a4d3e:	2300      	movs	r3, #0
 80a4d40:	930a      	str	r3, [sp, #40]	; 0x28
 80a4d42:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80a4d44:	782b      	ldrb	r3, [r5, #0]
 80a4d46:	2b30      	cmp	r3, #48	; 0x30
 80a4d48:	f040 80aa 	bne.w	80a4ea0 <_strtod_l+0x1a0>
 80a4d4c:	786b      	ldrb	r3, [r5, #1]
 80a4d4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80a4d52:	2b58      	cmp	r3, #88	; 0x58
 80a4d54:	d166      	bne.n	80a4e24 <_strtod_l+0x124>
 80a4d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a4d58:	4650      	mov	r0, sl
 80a4d5a:	9301      	str	r3, [sp, #4]
 80a4d5c:	ab1a      	add	r3, sp, #104	; 0x68
 80a4d5e:	9300      	str	r3, [sp, #0]
 80a4d60:	4a8a      	ldr	r2, [pc, #552]	; (80a4f8c <_strtod_l+0x28c>)
 80a4d62:	f8cd b008 	str.w	fp, [sp, #8]
 80a4d66:	ab1b      	add	r3, sp, #108	; 0x6c
 80a4d68:	a919      	add	r1, sp, #100	; 0x64
 80a4d6a:	f001 f9c7 	bl	80a60fc <__gethex>
 80a4d6e:	f010 0607 	ands.w	r6, r0, #7
 80a4d72:	4604      	mov	r4, r0
 80a4d74:	d005      	beq.n	80a4d82 <_strtod_l+0x82>
 80a4d76:	2e06      	cmp	r6, #6
 80a4d78:	d129      	bne.n	80a4dce <_strtod_l+0xce>
 80a4d7a:	2300      	movs	r3, #0
 80a4d7c:	3501      	adds	r5, #1
 80a4d7e:	9519      	str	r5, [sp, #100]	; 0x64
 80a4d80:	930a      	str	r3, [sp, #40]	; 0x28
 80a4d82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a4d84:	2b00      	cmp	r3, #0
 80a4d86:	f040 858a 	bne.w	80a589e <_strtod_l+0xb9e>
 80a4d8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a4d8c:	b1d3      	cbz	r3, 80a4dc4 <_strtod_l+0xc4>
 80a4d8e:	4642      	mov	r2, r8
 80a4d90:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80a4d94:	4610      	mov	r0, r2
 80a4d96:	4619      	mov	r1, r3
 80a4d98:	b01f      	add	sp, #124	; 0x7c
 80a4d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4d9e:	2a20      	cmp	r2, #32
 80a4da0:	d1cd      	bne.n	80a4d3e <_strtod_l+0x3e>
 80a4da2:	3301      	adds	r3, #1
 80a4da4:	9319      	str	r3, [sp, #100]	; 0x64
 80a4da6:	e7bf      	b.n	80a4d28 <_strtod_l+0x28>
 80a4da8:	2a2d      	cmp	r2, #45	; 0x2d
 80a4daa:	d1c8      	bne.n	80a4d3e <_strtod_l+0x3e>
 80a4dac:	2201      	movs	r2, #1
 80a4dae:	920a      	str	r2, [sp, #40]	; 0x28
 80a4db0:	1c5a      	adds	r2, r3, #1
 80a4db2:	9219      	str	r2, [sp, #100]	; 0x64
 80a4db4:	785b      	ldrb	r3, [r3, #1]
 80a4db6:	2b00      	cmp	r3, #0
 80a4db8:	d1c3      	bne.n	80a4d42 <_strtod_l+0x42>
 80a4dba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a4dbc:	9619      	str	r6, [sp, #100]	; 0x64
 80a4dbe:	2b00      	cmp	r3, #0
 80a4dc0:	f040 856b 	bne.w	80a589a <_strtod_l+0xb9a>
 80a4dc4:	4642      	mov	r2, r8
 80a4dc6:	464b      	mov	r3, r9
 80a4dc8:	e7e4      	b.n	80a4d94 <_strtod_l+0x94>
 80a4dca:	2200      	movs	r2, #0
 80a4dcc:	e7ef      	b.n	80a4dae <_strtod_l+0xae>
 80a4dce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80a4dd0:	b13a      	cbz	r2, 80a4de2 <_strtod_l+0xe2>
 80a4dd2:	2135      	movs	r1, #53	; 0x35
 80a4dd4:	a81c      	add	r0, sp, #112	; 0x70
 80a4dd6:	f002 fa13 	bl	80a7200 <__copybits>
 80a4dda:	4650      	mov	r0, sl
 80a4ddc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80a4dde:	f001 fddb 	bl	80a6998 <_Bfree>
 80a4de2:	3e01      	subs	r6, #1
 80a4de4:	2e04      	cmp	r6, #4
 80a4de6:	d806      	bhi.n	80a4df6 <_strtod_l+0xf6>
 80a4de8:	e8df f006 	tbb	[pc, r6]
 80a4dec:	1714030a 	.word	0x1714030a
 80a4df0:	0a          	.byte	0x0a
 80a4df1:	00          	.byte	0x00
 80a4df2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80a4df6:	0721      	lsls	r1, r4, #28
 80a4df8:	d5c3      	bpl.n	80a4d82 <_strtod_l+0x82>
 80a4dfa:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80a4dfe:	e7c0      	b.n	80a4d82 <_strtod_l+0x82>
 80a4e00:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80a4e02:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80a4e06:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80a4e0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80a4e0e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80a4e12:	e7f0      	b.n	80a4df6 <_strtod_l+0xf6>
 80a4e14:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80a4f90 <_strtod_l+0x290>
 80a4e18:	e7ed      	b.n	80a4df6 <_strtod_l+0xf6>
 80a4e1a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80a4e1e:	f04f 38ff 	mov.w	r8, #4294967295
 80a4e22:	e7e8      	b.n	80a4df6 <_strtod_l+0xf6>
 80a4e24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a4e26:	1c5a      	adds	r2, r3, #1
 80a4e28:	9219      	str	r2, [sp, #100]	; 0x64
 80a4e2a:	785b      	ldrb	r3, [r3, #1]
 80a4e2c:	2b30      	cmp	r3, #48	; 0x30
 80a4e2e:	d0f9      	beq.n	80a4e24 <_strtod_l+0x124>
 80a4e30:	2b00      	cmp	r3, #0
 80a4e32:	d0a6      	beq.n	80a4d82 <_strtod_l+0x82>
 80a4e34:	2301      	movs	r3, #1
 80a4e36:	9307      	str	r3, [sp, #28]
 80a4e38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a4e3a:	220a      	movs	r2, #10
 80a4e3c:	9308      	str	r3, [sp, #32]
 80a4e3e:	2300      	movs	r3, #0
 80a4e40:	469b      	mov	fp, r3
 80a4e42:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80a4e46:	9819      	ldr	r0, [sp, #100]	; 0x64
 80a4e48:	7805      	ldrb	r5, [r0, #0]
 80a4e4a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80a4e4e:	b2d9      	uxtb	r1, r3
 80a4e50:	2909      	cmp	r1, #9
 80a4e52:	d927      	bls.n	80a4ea4 <_strtod_l+0x1a4>
 80a4e54:	4622      	mov	r2, r4
 80a4e56:	4639      	mov	r1, r7
 80a4e58:	f7ff ff0a 	bl	80a4c70 <strncmp>
 80a4e5c:	2800      	cmp	r0, #0
 80a4e5e:	d033      	beq.n	80a4ec8 <_strtod_l+0x1c8>
 80a4e60:	2000      	movs	r0, #0
 80a4e62:	462a      	mov	r2, r5
 80a4e64:	465c      	mov	r4, fp
 80a4e66:	4603      	mov	r3, r0
 80a4e68:	9004      	str	r0, [sp, #16]
 80a4e6a:	2a65      	cmp	r2, #101	; 0x65
 80a4e6c:	d001      	beq.n	80a4e72 <_strtod_l+0x172>
 80a4e6e:	2a45      	cmp	r2, #69	; 0x45
 80a4e70:	d114      	bne.n	80a4e9c <_strtod_l+0x19c>
 80a4e72:	b91c      	cbnz	r4, 80a4e7c <_strtod_l+0x17c>
 80a4e74:	9a07      	ldr	r2, [sp, #28]
 80a4e76:	4302      	orrs	r2, r0
 80a4e78:	d09f      	beq.n	80a4dba <_strtod_l+0xba>
 80a4e7a:	2400      	movs	r4, #0
 80a4e7c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80a4e7e:	1c72      	adds	r2, r6, #1
 80a4e80:	9219      	str	r2, [sp, #100]	; 0x64
 80a4e82:	7872      	ldrb	r2, [r6, #1]
 80a4e84:	2a2b      	cmp	r2, #43	; 0x2b
 80a4e86:	d079      	beq.n	80a4f7c <_strtod_l+0x27c>
 80a4e88:	2a2d      	cmp	r2, #45	; 0x2d
 80a4e8a:	f000 8083 	beq.w	80a4f94 <_strtod_l+0x294>
 80a4e8e:	2700      	movs	r7, #0
 80a4e90:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80a4e94:	2909      	cmp	r1, #9
 80a4e96:	f240 8083 	bls.w	80a4fa0 <_strtod_l+0x2a0>
 80a4e9a:	9619      	str	r6, [sp, #100]	; 0x64
 80a4e9c:	2500      	movs	r5, #0
 80a4e9e:	e09f      	b.n	80a4fe0 <_strtod_l+0x2e0>
 80a4ea0:	2300      	movs	r3, #0
 80a4ea2:	e7c8      	b.n	80a4e36 <_strtod_l+0x136>
 80a4ea4:	f1bb 0f08 	cmp.w	fp, #8
 80a4ea8:	bfd5      	itete	le
 80a4eaa:	9906      	ldrle	r1, [sp, #24]
 80a4eac:	9905      	ldrgt	r1, [sp, #20]
 80a4eae:	fb02 3301 	mlale	r3, r2, r1, r3
 80a4eb2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80a4eb6:	f100 0001 	add.w	r0, r0, #1
 80a4eba:	bfd4      	ite	le
 80a4ebc:	9306      	strle	r3, [sp, #24]
 80a4ebe:	9305      	strgt	r3, [sp, #20]
 80a4ec0:	f10b 0b01 	add.w	fp, fp, #1
 80a4ec4:	9019      	str	r0, [sp, #100]	; 0x64
 80a4ec6:	e7be      	b.n	80a4e46 <_strtod_l+0x146>
 80a4ec8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a4eca:	191a      	adds	r2, r3, r4
 80a4ecc:	9219      	str	r2, [sp, #100]	; 0x64
 80a4ece:	5d1a      	ldrb	r2, [r3, r4]
 80a4ed0:	f1bb 0f00 	cmp.w	fp, #0
 80a4ed4:	d036      	beq.n	80a4f44 <_strtod_l+0x244>
 80a4ed6:	465c      	mov	r4, fp
 80a4ed8:	9004      	str	r0, [sp, #16]
 80a4eda:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80a4ede:	2b09      	cmp	r3, #9
 80a4ee0:	d912      	bls.n	80a4f08 <_strtod_l+0x208>
 80a4ee2:	2301      	movs	r3, #1
 80a4ee4:	e7c1      	b.n	80a4e6a <_strtod_l+0x16a>
 80a4ee6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a4ee8:	3001      	adds	r0, #1
 80a4eea:	1c5a      	adds	r2, r3, #1
 80a4eec:	9219      	str	r2, [sp, #100]	; 0x64
 80a4eee:	785a      	ldrb	r2, [r3, #1]
 80a4ef0:	2a30      	cmp	r2, #48	; 0x30
 80a4ef2:	d0f8      	beq.n	80a4ee6 <_strtod_l+0x1e6>
 80a4ef4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80a4ef8:	2b08      	cmp	r3, #8
 80a4efa:	f200 84d5 	bhi.w	80a58a8 <_strtod_l+0xba8>
 80a4efe:	9004      	str	r0, [sp, #16]
 80a4f00:	2000      	movs	r0, #0
 80a4f02:	4604      	mov	r4, r0
 80a4f04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a4f06:	9308      	str	r3, [sp, #32]
 80a4f08:	3a30      	subs	r2, #48	; 0x30
 80a4f0a:	f100 0301 	add.w	r3, r0, #1
 80a4f0e:	d013      	beq.n	80a4f38 <_strtod_l+0x238>
 80a4f10:	9904      	ldr	r1, [sp, #16]
 80a4f12:	1905      	adds	r5, r0, r4
 80a4f14:	4419      	add	r1, r3
 80a4f16:	9104      	str	r1, [sp, #16]
 80a4f18:	4623      	mov	r3, r4
 80a4f1a:	210a      	movs	r1, #10
 80a4f1c:	42ab      	cmp	r3, r5
 80a4f1e:	d113      	bne.n	80a4f48 <_strtod_l+0x248>
 80a4f20:	1823      	adds	r3, r4, r0
 80a4f22:	2b08      	cmp	r3, #8
 80a4f24:	f104 0401 	add.w	r4, r4, #1
 80a4f28:	4404      	add	r4, r0
 80a4f2a:	dc1b      	bgt.n	80a4f64 <_strtod_l+0x264>
 80a4f2c:	230a      	movs	r3, #10
 80a4f2e:	9906      	ldr	r1, [sp, #24]
 80a4f30:	fb03 2301 	mla	r3, r3, r1, r2
 80a4f34:	9306      	str	r3, [sp, #24]
 80a4f36:	2300      	movs	r3, #0
 80a4f38:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80a4f3a:	4618      	mov	r0, r3
 80a4f3c:	1c51      	adds	r1, r2, #1
 80a4f3e:	9119      	str	r1, [sp, #100]	; 0x64
 80a4f40:	7852      	ldrb	r2, [r2, #1]
 80a4f42:	e7ca      	b.n	80a4eda <_strtod_l+0x1da>
 80a4f44:	4658      	mov	r0, fp
 80a4f46:	e7d3      	b.n	80a4ef0 <_strtod_l+0x1f0>
 80a4f48:	2b08      	cmp	r3, #8
 80a4f4a:	dc04      	bgt.n	80a4f56 <_strtod_l+0x256>
 80a4f4c:	9f06      	ldr	r7, [sp, #24]
 80a4f4e:	434f      	muls	r7, r1
 80a4f50:	9706      	str	r7, [sp, #24]
 80a4f52:	3301      	adds	r3, #1
 80a4f54:	e7e2      	b.n	80a4f1c <_strtod_l+0x21c>
 80a4f56:	1c5f      	adds	r7, r3, #1
 80a4f58:	2f10      	cmp	r7, #16
 80a4f5a:	bfde      	ittt	le
 80a4f5c:	9f05      	ldrle	r7, [sp, #20]
 80a4f5e:	434f      	mulle	r7, r1
 80a4f60:	9705      	strle	r7, [sp, #20]
 80a4f62:	e7f6      	b.n	80a4f52 <_strtod_l+0x252>
 80a4f64:	2c10      	cmp	r4, #16
 80a4f66:	bfdf      	itttt	le
 80a4f68:	230a      	movle	r3, #10
 80a4f6a:	9905      	ldrle	r1, [sp, #20]
 80a4f6c:	fb03 2301 	mlale	r3, r3, r1, r2
 80a4f70:	9305      	strle	r3, [sp, #20]
 80a4f72:	e7e0      	b.n	80a4f36 <_strtod_l+0x236>
 80a4f74:	2300      	movs	r3, #0
 80a4f76:	9304      	str	r3, [sp, #16]
 80a4f78:	2301      	movs	r3, #1
 80a4f7a:	e77b      	b.n	80a4e74 <_strtod_l+0x174>
 80a4f7c:	2700      	movs	r7, #0
 80a4f7e:	1cb2      	adds	r2, r6, #2
 80a4f80:	9219      	str	r2, [sp, #100]	; 0x64
 80a4f82:	78b2      	ldrb	r2, [r6, #2]
 80a4f84:	e784      	b.n	80a4e90 <_strtod_l+0x190>
 80a4f86:	bf00      	nop
 80a4f88:	080a7cc4 	.word	0x080a7cc4
 80a4f8c:	080a7874 	.word	0x080a7874
 80a4f90:	7ff00000 	.word	0x7ff00000
 80a4f94:	2701      	movs	r7, #1
 80a4f96:	e7f2      	b.n	80a4f7e <_strtod_l+0x27e>
 80a4f98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80a4f9a:	1c51      	adds	r1, r2, #1
 80a4f9c:	9119      	str	r1, [sp, #100]	; 0x64
 80a4f9e:	7852      	ldrb	r2, [r2, #1]
 80a4fa0:	2a30      	cmp	r2, #48	; 0x30
 80a4fa2:	d0f9      	beq.n	80a4f98 <_strtod_l+0x298>
 80a4fa4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80a4fa8:	2908      	cmp	r1, #8
 80a4faa:	f63f af77 	bhi.w	80a4e9c <_strtod_l+0x19c>
 80a4fae:	f04f 0e0a 	mov.w	lr, #10
 80a4fb2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80a4fb6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80a4fb8:	9209      	str	r2, [sp, #36]	; 0x24
 80a4fba:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80a4fbc:	1c51      	adds	r1, r2, #1
 80a4fbe:	9119      	str	r1, [sp, #100]	; 0x64
 80a4fc0:	7852      	ldrb	r2, [r2, #1]
 80a4fc2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80a4fc6:	2d09      	cmp	r5, #9
 80a4fc8:	d935      	bls.n	80a5036 <_strtod_l+0x336>
 80a4fca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80a4fcc:	1b49      	subs	r1, r1, r5
 80a4fce:	2908      	cmp	r1, #8
 80a4fd0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80a4fd4:	dc02      	bgt.n	80a4fdc <_strtod_l+0x2dc>
 80a4fd6:	4565      	cmp	r5, ip
 80a4fd8:	bfa8      	it	ge
 80a4fda:	4665      	movge	r5, ip
 80a4fdc:	b107      	cbz	r7, 80a4fe0 <_strtod_l+0x2e0>
 80a4fde:	426d      	negs	r5, r5
 80a4fe0:	2c00      	cmp	r4, #0
 80a4fe2:	d14c      	bne.n	80a507e <_strtod_l+0x37e>
 80a4fe4:	9907      	ldr	r1, [sp, #28]
 80a4fe6:	4301      	orrs	r1, r0
 80a4fe8:	f47f aecb 	bne.w	80a4d82 <_strtod_l+0x82>
 80a4fec:	2b00      	cmp	r3, #0
 80a4fee:	f47f aee4 	bne.w	80a4dba <_strtod_l+0xba>
 80a4ff2:	2a69      	cmp	r2, #105	; 0x69
 80a4ff4:	d026      	beq.n	80a5044 <_strtod_l+0x344>
 80a4ff6:	dc23      	bgt.n	80a5040 <_strtod_l+0x340>
 80a4ff8:	2a49      	cmp	r2, #73	; 0x49
 80a4ffa:	d023      	beq.n	80a5044 <_strtod_l+0x344>
 80a4ffc:	2a4e      	cmp	r2, #78	; 0x4e
 80a4ffe:	f47f aedc 	bne.w	80a4dba <_strtod_l+0xba>
 80a5002:	499d      	ldr	r1, [pc, #628]	; (80a5278 <_strtod_l+0x578>)
 80a5004:	a819      	add	r0, sp, #100	; 0x64
 80a5006:	f001 fac7 	bl	80a6598 <__match>
 80a500a:	2800      	cmp	r0, #0
 80a500c:	f43f aed5 	beq.w	80a4dba <_strtod_l+0xba>
 80a5010:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a5012:	781b      	ldrb	r3, [r3, #0]
 80a5014:	2b28      	cmp	r3, #40	; 0x28
 80a5016:	d12c      	bne.n	80a5072 <_strtod_l+0x372>
 80a5018:	4998      	ldr	r1, [pc, #608]	; (80a527c <_strtod_l+0x57c>)
 80a501a:	aa1c      	add	r2, sp, #112	; 0x70
 80a501c:	a819      	add	r0, sp, #100	; 0x64
 80a501e:	f001 facf 	bl	80a65c0 <__hexnan>
 80a5022:	2805      	cmp	r0, #5
 80a5024:	d125      	bne.n	80a5072 <_strtod_l+0x372>
 80a5026:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80a5028:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80a502c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80a5030:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80a5034:	e6a5      	b.n	80a4d82 <_strtod_l+0x82>
 80a5036:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80a503a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80a503e:	e7bc      	b.n	80a4fba <_strtod_l+0x2ba>
 80a5040:	2a6e      	cmp	r2, #110	; 0x6e
 80a5042:	e7dc      	b.n	80a4ffe <_strtod_l+0x2fe>
 80a5044:	498e      	ldr	r1, [pc, #568]	; (80a5280 <_strtod_l+0x580>)
 80a5046:	a819      	add	r0, sp, #100	; 0x64
 80a5048:	f001 faa6 	bl	80a6598 <__match>
 80a504c:	2800      	cmp	r0, #0
 80a504e:	f43f aeb4 	beq.w	80a4dba <_strtod_l+0xba>
 80a5052:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a5054:	498b      	ldr	r1, [pc, #556]	; (80a5284 <_strtod_l+0x584>)
 80a5056:	3b01      	subs	r3, #1
 80a5058:	a819      	add	r0, sp, #100	; 0x64
 80a505a:	9319      	str	r3, [sp, #100]	; 0x64
 80a505c:	f001 fa9c 	bl	80a6598 <__match>
 80a5060:	b910      	cbnz	r0, 80a5068 <_strtod_l+0x368>
 80a5062:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a5064:	3301      	adds	r3, #1
 80a5066:	9319      	str	r3, [sp, #100]	; 0x64
 80a5068:	f04f 0800 	mov.w	r8, #0
 80a506c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80a5288 <_strtod_l+0x588>
 80a5070:	e687      	b.n	80a4d82 <_strtod_l+0x82>
 80a5072:	4886      	ldr	r0, [pc, #536]	; (80a528c <_strtod_l+0x58c>)
 80a5074:	f7fd ff0c 	bl	80a2e90 <nan>
 80a5078:	4680      	mov	r8, r0
 80a507a:	4689      	mov	r9, r1
 80a507c:	e681      	b.n	80a4d82 <_strtod_l+0x82>
 80a507e:	9b04      	ldr	r3, [sp, #16]
 80a5080:	f1bb 0f00 	cmp.w	fp, #0
 80a5084:	bf08      	it	eq
 80a5086:	46a3      	moveq	fp, r4
 80a5088:	1aeb      	subs	r3, r5, r3
 80a508a:	2c10      	cmp	r4, #16
 80a508c:	9806      	ldr	r0, [sp, #24]
 80a508e:	4626      	mov	r6, r4
 80a5090:	9307      	str	r3, [sp, #28]
 80a5092:	bfa8      	it	ge
 80a5094:	2610      	movge	r6, #16
 80a5096:	f7fe f843 	bl	80a3120 <__aeabi_ui2d>
 80a509a:	2c09      	cmp	r4, #9
 80a509c:	4680      	mov	r8, r0
 80a509e:	4689      	mov	r9, r1
 80a50a0:	dd13      	ble.n	80a50ca <_strtod_l+0x3ca>
 80a50a2:	4b7b      	ldr	r3, [pc, #492]	; (80a5290 <_strtod_l+0x590>)
 80a50a4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80a50a8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80a50ac:	f7fe f8b2 	bl	80a3214 <__aeabi_dmul>
 80a50b0:	4680      	mov	r8, r0
 80a50b2:	9805      	ldr	r0, [sp, #20]
 80a50b4:	4689      	mov	r9, r1
 80a50b6:	f7fe f833 	bl	80a3120 <__aeabi_ui2d>
 80a50ba:	4602      	mov	r2, r0
 80a50bc:	460b      	mov	r3, r1
 80a50be:	4640      	mov	r0, r8
 80a50c0:	4649      	mov	r1, r9
 80a50c2:	f7fd fef1 	bl	80a2ea8 <__adddf3>
 80a50c6:	4680      	mov	r8, r0
 80a50c8:	4689      	mov	r9, r1
 80a50ca:	2c0f      	cmp	r4, #15
 80a50cc:	dc36      	bgt.n	80a513c <_strtod_l+0x43c>
 80a50ce:	9b07      	ldr	r3, [sp, #28]
 80a50d0:	2b00      	cmp	r3, #0
 80a50d2:	f43f ae56 	beq.w	80a4d82 <_strtod_l+0x82>
 80a50d6:	dd22      	ble.n	80a511e <_strtod_l+0x41e>
 80a50d8:	2b16      	cmp	r3, #22
 80a50da:	dc09      	bgt.n	80a50f0 <_strtod_l+0x3f0>
 80a50dc:	496c      	ldr	r1, [pc, #432]	; (80a5290 <_strtod_l+0x590>)
 80a50de:	4642      	mov	r2, r8
 80a50e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80a50e4:	464b      	mov	r3, r9
 80a50e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a50ea:	f7fe f893 	bl	80a3214 <__aeabi_dmul>
 80a50ee:	e7c3      	b.n	80a5078 <_strtod_l+0x378>
 80a50f0:	9a07      	ldr	r2, [sp, #28]
 80a50f2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80a50f6:	4293      	cmp	r3, r2
 80a50f8:	db20      	blt.n	80a513c <_strtod_l+0x43c>
 80a50fa:	4d65      	ldr	r5, [pc, #404]	; (80a5290 <_strtod_l+0x590>)
 80a50fc:	f1c4 040f 	rsb	r4, r4, #15
 80a5100:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80a5104:	4642      	mov	r2, r8
 80a5106:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a510a:	464b      	mov	r3, r9
 80a510c:	f7fe f882 	bl	80a3214 <__aeabi_dmul>
 80a5110:	9b07      	ldr	r3, [sp, #28]
 80a5112:	1b1c      	subs	r4, r3, r4
 80a5114:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80a5118:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a511c:	e7e5      	b.n	80a50ea <_strtod_l+0x3ea>
 80a511e:	9b07      	ldr	r3, [sp, #28]
 80a5120:	3316      	adds	r3, #22
 80a5122:	db0b      	blt.n	80a513c <_strtod_l+0x43c>
 80a5124:	9b04      	ldr	r3, [sp, #16]
 80a5126:	4640      	mov	r0, r8
 80a5128:	1b5d      	subs	r5, r3, r5
 80a512a:	4b59      	ldr	r3, [pc, #356]	; (80a5290 <_strtod_l+0x590>)
 80a512c:	4649      	mov	r1, r9
 80a512e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80a5132:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a5136:	f7fe f997 	bl	80a3468 <__aeabi_ddiv>
 80a513a:	e79d      	b.n	80a5078 <_strtod_l+0x378>
 80a513c:	9b07      	ldr	r3, [sp, #28]
 80a513e:	1ba6      	subs	r6, r4, r6
 80a5140:	441e      	add	r6, r3
 80a5142:	2e00      	cmp	r6, #0
 80a5144:	dd74      	ble.n	80a5230 <_strtod_l+0x530>
 80a5146:	f016 030f 	ands.w	r3, r6, #15
 80a514a:	d00a      	beq.n	80a5162 <_strtod_l+0x462>
 80a514c:	4950      	ldr	r1, [pc, #320]	; (80a5290 <_strtod_l+0x590>)
 80a514e:	4642      	mov	r2, r8
 80a5150:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80a5154:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a5158:	464b      	mov	r3, r9
 80a515a:	f7fe f85b 	bl	80a3214 <__aeabi_dmul>
 80a515e:	4680      	mov	r8, r0
 80a5160:	4689      	mov	r9, r1
 80a5162:	f036 060f 	bics.w	r6, r6, #15
 80a5166:	d052      	beq.n	80a520e <_strtod_l+0x50e>
 80a5168:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80a516c:	dd27      	ble.n	80a51be <_strtod_l+0x4be>
 80a516e:	f04f 0b00 	mov.w	fp, #0
 80a5172:	f8cd b010 	str.w	fp, [sp, #16]
 80a5176:	f8cd b020 	str.w	fp, [sp, #32]
 80a517a:	f8cd b018 	str.w	fp, [sp, #24]
 80a517e:	2322      	movs	r3, #34	; 0x22
 80a5180:	f04f 0800 	mov.w	r8, #0
 80a5184:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80a5288 <_strtod_l+0x588>
 80a5188:	f8ca 3000 	str.w	r3, [sl]
 80a518c:	9b08      	ldr	r3, [sp, #32]
 80a518e:	2b00      	cmp	r3, #0
 80a5190:	f43f adf7 	beq.w	80a4d82 <_strtod_l+0x82>
 80a5194:	4650      	mov	r0, sl
 80a5196:	991a      	ldr	r1, [sp, #104]	; 0x68
 80a5198:	f001 fbfe 	bl	80a6998 <_Bfree>
 80a519c:	4650      	mov	r0, sl
 80a519e:	9906      	ldr	r1, [sp, #24]
 80a51a0:	f001 fbfa 	bl	80a6998 <_Bfree>
 80a51a4:	4650      	mov	r0, sl
 80a51a6:	9904      	ldr	r1, [sp, #16]
 80a51a8:	f001 fbf6 	bl	80a6998 <_Bfree>
 80a51ac:	4650      	mov	r0, sl
 80a51ae:	9908      	ldr	r1, [sp, #32]
 80a51b0:	f001 fbf2 	bl	80a6998 <_Bfree>
 80a51b4:	4659      	mov	r1, fp
 80a51b6:	4650      	mov	r0, sl
 80a51b8:	f001 fbee 	bl	80a6998 <_Bfree>
 80a51bc:	e5e1      	b.n	80a4d82 <_strtod_l+0x82>
 80a51be:	4b35      	ldr	r3, [pc, #212]	; (80a5294 <_strtod_l+0x594>)
 80a51c0:	4640      	mov	r0, r8
 80a51c2:	9305      	str	r3, [sp, #20]
 80a51c4:	2300      	movs	r3, #0
 80a51c6:	4649      	mov	r1, r9
 80a51c8:	461f      	mov	r7, r3
 80a51ca:	1136      	asrs	r6, r6, #4
 80a51cc:	2e01      	cmp	r6, #1
 80a51ce:	dc21      	bgt.n	80a5214 <_strtod_l+0x514>
 80a51d0:	b10b      	cbz	r3, 80a51d6 <_strtod_l+0x4d6>
 80a51d2:	4680      	mov	r8, r0
 80a51d4:	4689      	mov	r9, r1
 80a51d6:	4b2f      	ldr	r3, [pc, #188]	; (80a5294 <_strtod_l+0x594>)
 80a51d8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80a51dc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80a51e0:	4642      	mov	r2, r8
 80a51e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80a51e6:	464b      	mov	r3, r9
 80a51e8:	f7fe f814 	bl	80a3214 <__aeabi_dmul>
 80a51ec:	4b26      	ldr	r3, [pc, #152]	; (80a5288 <_strtod_l+0x588>)
 80a51ee:	460a      	mov	r2, r1
 80a51f0:	400b      	ands	r3, r1
 80a51f2:	4929      	ldr	r1, [pc, #164]	; (80a5298 <_strtod_l+0x598>)
 80a51f4:	4680      	mov	r8, r0
 80a51f6:	428b      	cmp	r3, r1
 80a51f8:	d8b9      	bhi.n	80a516e <_strtod_l+0x46e>
 80a51fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80a51fe:	428b      	cmp	r3, r1
 80a5200:	bf86      	itte	hi
 80a5202:	f04f 38ff 	movhi.w	r8, #4294967295
 80a5206:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80a529c <_strtod_l+0x59c>
 80a520a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80a520e:	2300      	movs	r3, #0
 80a5210:	9305      	str	r3, [sp, #20]
 80a5212:	e07f      	b.n	80a5314 <_strtod_l+0x614>
 80a5214:	07f2      	lsls	r2, r6, #31
 80a5216:	d505      	bpl.n	80a5224 <_strtod_l+0x524>
 80a5218:	9b05      	ldr	r3, [sp, #20]
 80a521a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a521e:	f7fd fff9 	bl	80a3214 <__aeabi_dmul>
 80a5222:	2301      	movs	r3, #1
 80a5224:	9a05      	ldr	r2, [sp, #20]
 80a5226:	3701      	adds	r7, #1
 80a5228:	3208      	adds	r2, #8
 80a522a:	1076      	asrs	r6, r6, #1
 80a522c:	9205      	str	r2, [sp, #20]
 80a522e:	e7cd      	b.n	80a51cc <_strtod_l+0x4cc>
 80a5230:	d0ed      	beq.n	80a520e <_strtod_l+0x50e>
 80a5232:	4276      	negs	r6, r6
 80a5234:	f016 020f 	ands.w	r2, r6, #15
 80a5238:	d00a      	beq.n	80a5250 <_strtod_l+0x550>
 80a523a:	4b15      	ldr	r3, [pc, #84]	; (80a5290 <_strtod_l+0x590>)
 80a523c:	4640      	mov	r0, r8
 80a523e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a5242:	4649      	mov	r1, r9
 80a5244:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5248:	f7fe f90e 	bl	80a3468 <__aeabi_ddiv>
 80a524c:	4680      	mov	r8, r0
 80a524e:	4689      	mov	r9, r1
 80a5250:	1136      	asrs	r6, r6, #4
 80a5252:	d0dc      	beq.n	80a520e <_strtod_l+0x50e>
 80a5254:	2e1f      	cmp	r6, #31
 80a5256:	dd23      	ble.n	80a52a0 <_strtod_l+0x5a0>
 80a5258:	f04f 0b00 	mov.w	fp, #0
 80a525c:	f8cd b010 	str.w	fp, [sp, #16]
 80a5260:	f8cd b020 	str.w	fp, [sp, #32]
 80a5264:	f8cd b018 	str.w	fp, [sp, #24]
 80a5268:	2322      	movs	r3, #34	; 0x22
 80a526a:	f04f 0800 	mov.w	r8, #0
 80a526e:	f04f 0900 	mov.w	r9, #0
 80a5272:	f8ca 3000 	str.w	r3, [sl]
 80a5276:	e789      	b.n	80a518c <_strtod_l+0x48c>
 80a5278:	080a78c9 	.word	0x080a78c9
 80a527c:	080a7888 	.word	0x080a7888
 80a5280:	080a786b 	.word	0x080a786b
 80a5284:	080a786e 	.word	0x080a786e
 80a5288:	7ff00000 	.word	0x7ff00000
 80a528c:	080a76e0 	.word	0x080a76e0
 80a5290:	080a7d80 	.word	0x080a7d80
 80a5294:	080a7d58 	.word	0x080a7d58
 80a5298:	7ca00000 	.word	0x7ca00000
 80a529c:	7fefffff 	.word	0x7fefffff
 80a52a0:	f016 0310 	ands.w	r3, r6, #16
 80a52a4:	bf18      	it	ne
 80a52a6:	236a      	movne	r3, #106	; 0x6a
 80a52a8:	4640      	mov	r0, r8
 80a52aa:	9305      	str	r3, [sp, #20]
 80a52ac:	4649      	mov	r1, r9
 80a52ae:	2300      	movs	r3, #0
 80a52b0:	4fb0      	ldr	r7, [pc, #704]	; (80a5574 <_strtod_l+0x874>)
 80a52b2:	07f2      	lsls	r2, r6, #31
 80a52b4:	d504      	bpl.n	80a52c0 <_strtod_l+0x5c0>
 80a52b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80a52ba:	f7fd ffab 	bl	80a3214 <__aeabi_dmul>
 80a52be:	2301      	movs	r3, #1
 80a52c0:	1076      	asrs	r6, r6, #1
 80a52c2:	f107 0708 	add.w	r7, r7, #8
 80a52c6:	d1f4      	bne.n	80a52b2 <_strtod_l+0x5b2>
 80a52c8:	b10b      	cbz	r3, 80a52ce <_strtod_l+0x5ce>
 80a52ca:	4680      	mov	r8, r0
 80a52cc:	4689      	mov	r9, r1
 80a52ce:	9b05      	ldr	r3, [sp, #20]
 80a52d0:	b1c3      	cbz	r3, 80a5304 <_strtod_l+0x604>
 80a52d2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80a52d6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80a52da:	2b00      	cmp	r3, #0
 80a52dc:	4649      	mov	r1, r9
 80a52de:	dd11      	ble.n	80a5304 <_strtod_l+0x604>
 80a52e0:	2b1f      	cmp	r3, #31
 80a52e2:	f340 8127 	ble.w	80a5534 <_strtod_l+0x834>
 80a52e6:	2b34      	cmp	r3, #52	; 0x34
 80a52e8:	bfd8      	it	le
 80a52ea:	f04f 33ff 	movle.w	r3, #4294967295
 80a52ee:	f04f 0800 	mov.w	r8, #0
 80a52f2:	bfcf      	iteee	gt
 80a52f4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80a52f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80a52fc:	fa03 f202 	lslle.w	r2, r3, r2
 80a5300:	ea02 0901 	andle.w	r9, r2, r1
 80a5304:	2200      	movs	r2, #0
 80a5306:	2300      	movs	r3, #0
 80a5308:	4640      	mov	r0, r8
 80a530a:	4649      	mov	r1, r9
 80a530c:	f7fe f9ea 	bl	80a36e4 <__aeabi_dcmpeq>
 80a5310:	2800      	cmp	r0, #0
 80a5312:	d1a1      	bne.n	80a5258 <_strtod_l+0x558>
 80a5314:	9b06      	ldr	r3, [sp, #24]
 80a5316:	465a      	mov	r2, fp
 80a5318:	9300      	str	r3, [sp, #0]
 80a531a:	4650      	mov	r0, sl
 80a531c:	4623      	mov	r3, r4
 80a531e:	9908      	ldr	r1, [sp, #32]
 80a5320:	f001 fba2 	bl	80a6a68 <__s2b>
 80a5324:	9008      	str	r0, [sp, #32]
 80a5326:	2800      	cmp	r0, #0
 80a5328:	f43f af21 	beq.w	80a516e <_strtod_l+0x46e>
 80a532c:	9b04      	ldr	r3, [sp, #16]
 80a532e:	f04f 0b00 	mov.w	fp, #0
 80a5332:	1b5d      	subs	r5, r3, r5
 80a5334:	9b07      	ldr	r3, [sp, #28]
 80a5336:	f8cd b010 	str.w	fp, [sp, #16]
 80a533a:	2b00      	cmp	r3, #0
 80a533c:	bfb4      	ite	lt
 80a533e:	462b      	movlt	r3, r5
 80a5340:	2300      	movge	r3, #0
 80a5342:	930e      	str	r3, [sp, #56]	; 0x38
 80a5344:	9b07      	ldr	r3, [sp, #28]
 80a5346:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80a534a:	9314      	str	r3, [sp, #80]	; 0x50
 80a534c:	9b08      	ldr	r3, [sp, #32]
 80a534e:	4650      	mov	r0, sl
 80a5350:	6859      	ldr	r1, [r3, #4]
 80a5352:	f001 fae1 	bl	80a6918 <_Balloc>
 80a5356:	9006      	str	r0, [sp, #24]
 80a5358:	2800      	cmp	r0, #0
 80a535a:	f43f af10 	beq.w	80a517e <_strtod_l+0x47e>
 80a535e:	9b08      	ldr	r3, [sp, #32]
 80a5360:	300c      	adds	r0, #12
 80a5362:	691a      	ldr	r2, [r3, #16]
 80a5364:	f103 010c 	add.w	r1, r3, #12
 80a5368:	3202      	adds	r2, #2
 80a536a:	0092      	lsls	r2, r2, #2
 80a536c:	f7fe fed0 	bl	80a4110 <memcpy>
 80a5370:	ab1c      	add	r3, sp, #112	; 0x70
 80a5372:	9301      	str	r3, [sp, #4]
 80a5374:	ab1b      	add	r3, sp, #108	; 0x6c
 80a5376:	9300      	str	r3, [sp, #0]
 80a5378:	4642      	mov	r2, r8
 80a537a:	464b      	mov	r3, r9
 80a537c:	4650      	mov	r0, sl
 80a537e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80a5382:	f001 feb3 	bl	80a70ec <__d2b>
 80a5386:	901a      	str	r0, [sp, #104]	; 0x68
 80a5388:	2800      	cmp	r0, #0
 80a538a:	f43f aef8 	beq.w	80a517e <_strtod_l+0x47e>
 80a538e:	2101      	movs	r1, #1
 80a5390:	4650      	mov	r0, sl
 80a5392:	f001 fc01 	bl	80a6b98 <__i2b>
 80a5396:	4603      	mov	r3, r0
 80a5398:	9004      	str	r0, [sp, #16]
 80a539a:	2800      	cmp	r0, #0
 80a539c:	f43f aeef 	beq.w	80a517e <_strtod_l+0x47e>
 80a53a0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80a53a2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80a53a4:	2d00      	cmp	r5, #0
 80a53a6:	bfab      	itete	ge
 80a53a8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80a53aa:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80a53ac:	18ee      	addge	r6, r5, r3
 80a53ae:	1b5c      	sublt	r4, r3, r5
 80a53b0:	9b05      	ldr	r3, [sp, #20]
 80a53b2:	bfa8      	it	ge
 80a53b4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80a53b6:	eba5 0503 	sub.w	r5, r5, r3
 80a53ba:	4415      	add	r5, r2
 80a53bc:	4b6e      	ldr	r3, [pc, #440]	; (80a5578 <_strtod_l+0x878>)
 80a53be:	f105 35ff 	add.w	r5, r5, #4294967295
 80a53c2:	bfb8      	it	lt
 80a53c4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80a53c6:	429d      	cmp	r5, r3
 80a53c8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80a53cc:	f280 80c4 	bge.w	80a5558 <_strtod_l+0x858>
 80a53d0:	1b5b      	subs	r3, r3, r5
 80a53d2:	2b1f      	cmp	r3, #31
 80a53d4:	f04f 0701 	mov.w	r7, #1
 80a53d8:	eba2 0203 	sub.w	r2, r2, r3
 80a53dc:	f300 80b1 	bgt.w	80a5542 <_strtod_l+0x842>
 80a53e0:	2500      	movs	r5, #0
 80a53e2:	fa07 f303 	lsl.w	r3, r7, r3
 80a53e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80a53e8:	18b7      	adds	r7, r6, r2
 80a53ea:	9b05      	ldr	r3, [sp, #20]
 80a53ec:	42be      	cmp	r6, r7
 80a53ee:	4414      	add	r4, r2
 80a53f0:	441c      	add	r4, r3
 80a53f2:	4633      	mov	r3, r6
 80a53f4:	bfa8      	it	ge
 80a53f6:	463b      	movge	r3, r7
 80a53f8:	42a3      	cmp	r3, r4
 80a53fa:	bfa8      	it	ge
 80a53fc:	4623      	movge	r3, r4
 80a53fe:	2b00      	cmp	r3, #0
 80a5400:	bfc2      	ittt	gt
 80a5402:	1aff      	subgt	r7, r7, r3
 80a5404:	1ae4      	subgt	r4, r4, r3
 80a5406:	1af6      	subgt	r6, r6, r3
 80a5408:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a540a:	2b00      	cmp	r3, #0
 80a540c:	dd17      	ble.n	80a543e <_strtod_l+0x73e>
 80a540e:	461a      	mov	r2, r3
 80a5410:	4650      	mov	r0, sl
 80a5412:	9904      	ldr	r1, [sp, #16]
 80a5414:	f001 fc7e 	bl	80a6d14 <__pow5mult>
 80a5418:	9004      	str	r0, [sp, #16]
 80a541a:	2800      	cmp	r0, #0
 80a541c:	f43f aeaf 	beq.w	80a517e <_strtod_l+0x47e>
 80a5420:	4601      	mov	r1, r0
 80a5422:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80a5424:	4650      	mov	r0, sl
 80a5426:	f001 fbcd 	bl	80a6bc4 <__multiply>
 80a542a:	9009      	str	r0, [sp, #36]	; 0x24
 80a542c:	2800      	cmp	r0, #0
 80a542e:	f43f aea6 	beq.w	80a517e <_strtod_l+0x47e>
 80a5432:	4650      	mov	r0, sl
 80a5434:	991a      	ldr	r1, [sp, #104]	; 0x68
 80a5436:	f001 faaf 	bl	80a6998 <_Bfree>
 80a543a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a543c:	931a      	str	r3, [sp, #104]	; 0x68
 80a543e:	2f00      	cmp	r7, #0
 80a5440:	f300 808e 	bgt.w	80a5560 <_strtod_l+0x860>
 80a5444:	9b07      	ldr	r3, [sp, #28]
 80a5446:	2b00      	cmp	r3, #0
 80a5448:	dd08      	ble.n	80a545c <_strtod_l+0x75c>
 80a544a:	4650      	mov	r0, sl
 80a544c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a544e:	9906      	ldr	r1, [sp, #24]
 80a5450:	f001 fc60 	bl	80a6d14 <__pow5mult>
 80a5454:	9006      	str	r0, [sp, #24]
 80a5456:	2800      	cmp	r0, #0
 80a5458:	f43f ae91 	beq.w	80a517e <_strtod_l+0x47e>
 80a545c:	2c00      	cmp	r4, #0
 80a545e:	dd08      	ble.n	80a5472 <_strtod_l+0x772>
 80a5460:	4622      	mov	r2, r4
 80a5462:	4650      	mov	r0, sl
 80a5464:	9906      	ldr	r1, [sp, #24]
 80a5466:	f001 fcaf 	bl	80a6dc8 <__lshift>
 80a546a:	9006      	str	r0, [sp, #24]
 80a546c:	2800      	cmp	r0, #0
 80a546e:	f43f ae86 	beq.w	80a517e <_strtod_l+0x47e>
 80a5472:	2e00      	cmp	r6, #0
 80a5474:	dd08      	ble.n	80a5488 <_strtod_l+0x788>
 80a5476:	4632      	mov	r2, r6
 80a5478:	4650      	mov	r0, sl
 80a547a:	9904      	ldr	r1, [sp, #16]
 80a547c:	f001 fca4 	bl	80a6dc8 <__lshift>
 80a5480:	9004      	str	r0, [sp, #16]
 80a5482:	2800      	cmp	r0, #0
 80a5484:	f43f ae7b 	beq.w	80a517e <_strtod_l+0x47e>
 80a5488:	4650      	mov	r0, sl
 80a548a:	9a06      	ldr	r2, [sp, #24]
 80a548c:	991a      	ldr	r1, [sp, #104]	; 0x68
 80a548e:	f001 fd27 	bl	80a6ee0 <__mdiff>
 80a5492:	4683      	mov	fp, r0
 80a5494:	2800      	cmp	r0, #0
 80a5496:	f43f ae72 	beq.w	80a517e <_strtod_l+0x47e>
 80a549a:	2400      	movs	r4, #0
 80a549c:	68c3      	ldr	r3, [r0, #12]
 80a549e:	9904      	ldr	r1, [sp, #16]
 80a54a0:	60c4      	str	r4, [r0, #12]
 80a54a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80a54a4:	f001 fd00 	bl	80a6ea8 <__mcmp>
 80a54a8:	42a0      	cmp	r0, r4
 80a54aa:	da6b      	bge.n	80a5584 <_strtod_l+0x884>
 80a54ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a54ae:	ea53 0308 	orrs.w	r3, r3, r8
 80a54b2:	f040 8091 	bne.w	80a55d8 <_strtod_l+0x8d8>
 80a54b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a54ba:	2b00      	cmp	r3, #0
 80a54bc:	f040 808c 	bne.w	80a55d8 <_strtod_l+0x8d8>
 80a54c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a54c4:	0d1b      	lsrs	r3, r3, #20
 80a54c6:	051b      	lsls	r3, r3, #20
 80a54c8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80a54cc:	f240 8084 	bls.w	80a55d8 <_strtod_l+0x8d8>
 80a54d0:	f8db 3014 	ldr.w	r3, [fp, #20]
 80a54d4:	b91b      	cbnz	r3, 80a54de <_strtod_l+0x7de>
 80a54d6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80a54da:	2b01      	cmp	r3, #1
 80a54dc:	dd7c      	ble.n	80a55d8 <_strtod_l+0x8d8>
 80a54de:	4659      	mov	r1, fp
 80a54e0:	2201      	movs	r2, #1
 80a54e2:	4650      	mov	r0, sl
 80a54e4:	f001 fc70 	bl	80a6dc8 <__lshift>
 80a54e8:	9904      	ldr	r1, [sp, #16]
 80a54ea:	4683      	mov	fp, r0
 80a54ec:	f001 fcdc 	bl	80a6ea8 <__mcmp>
 80a54f0:	2800      	cmp	r0, #0
 80a54f2:	dd71      	ble.n	80a55d8 <_strtod_l+0x8d8>
 80a54f4:	9905      	ldr	r1, [sp, #20]
 80a54f6:	464b      	mov	r3, r9
 80a54f8:	4a20      	ldr	r2, [pc, #128]	; (80a557c <_strtod_l+0x87c>)
 80a54fa:	2900      	cmp	r1, #0
 80a54fc:	f000 808c 	beq.w	80a5618 <_strtod_l+0x918>
 80a5500:	ea02 0109 	and.w	r1, r2, r9
 80a5504:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80a5508:	f300 8086 	bgt.w	80a5618 <_strtod_l+0x918>
 80a550c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80a5510:	f77f aeaa 	ble.w	80a5268 <_strtod_l+0x568>
 80a5514:	4640      	mov	r0, r8
 80a5516:	4649      	mov	r1, r9
 80a5518:	4b19      	ldr	r3, [pc, #100]	; (80a5580 <_strtod_l+0x880>)
 80a551a:	2200      	movs	r2, #0
 80a551c:	f7fd fe7a 	bl	80a3214 <__aeabi_dmul>
 80a5520:	460b      	mov	r3, r1
 80a5522:	4303      	orrs	r3, r0
 80a5524:	bf08      	it	eq
 80a5526:	2322      	moveq	r3, #34	; 0x22
 80a5528:	4680      	mov	r8, r0
 80a552a:	4689      	mov	r9, r1
 80a552c:	bf08      	it	eq
 80a552e:	f8ca 3000 	streq.w	r3, [sl]
 80a5532:	e62f      	b.n	80a5194 <_strtod_l+0x494>
 80a5534:	f04f 32ff 	mov.w	r2, #4294967295
 80a5538:	fa02 f303 	lsl.w	r3, r2, r3
 80a553c:	ea03 0808 	and.w	r8, r3, r8
 80a5540:	e6e0      	b.n	80a5304 <_strtod_l+0x604>
 80a5542:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80a5546:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80a554a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80a554e:	35e2      	adds	r5, #226	; 0xe2
 80a5550:	fa07 f505 	lsl.w	r5, r7, r5
 80a5554:	970f      	str	r7, [sp, #60]	; 0x3c
 80a5556:	e747      	b.n	80a53e8 <_strtod_l+0x6e8>
 80a5558:	2301      	movs	r3, #1
 80a555a:	2500      	movs	r5, #0
 80a555c:	930f      	str	r3, [sp, #60]	; 0x3c
 80a555e:	e743      	b.n	80a53e8 <_strtod_l+0x6e8>
 80a5560:	463a      	mov	r2, r7
 80a5562:	4650      	mov	r0, sl
 80a5564:	991a      	ldr	r1, [sp, #104]	; 0x68
 80a5566:	f001 fc2f 	bl	80a6dc8 <__lshift>
 80a556a:	901a      	str	r0, [sp, #104]	; 0x68
 80a556c:	2800      	cmp	r0, #0
 80a556e:	f47f af69 	bne.w	80a5444 <_strtod_l+0x744>
 80a5572:	e604      	b.n	80a517e <_strtod_l+0x47e>
 80a5574:	080a78a0 	.word	0x080a78a0
 80a5578:	fffffc02 	.word	0xfffffc02
 80a557c:	7ff00000 	.word	0x7ff00000
 80a5580:	39500000 	.word	0x39500000
 80a5584:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80a5588:	d165      	bne.n	80a5656 <_strtod_l+0x956>
 80a558a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a558c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a5590:	b35a      	cbz	r2, 80a55ea <_strtod_l+0x8ea>
 80a5592:	4a99      	ldr	r2, [pc, #612]	; (80a57f8 <_strtod_l+0xaf8>)
 80a5594:	4293      	cmp	r3, r2
 80a5596:	d12b      	bne.n	80a55f0 <_strtod_l+0x8f0>
 80a5598:	9b05      	ldr	r3, [sp, #20]
 80a559a:	4641      	mov	r1, r8
 80a559c:	b303      	cbz	r3, 80a55e0 <_strtod_l+0x8e0>
 80a559e:	464a      	mov	r2, r9
 80a55a0:	4b96      	ldr	r3, [pc, #600]	; (80a57fc <_strtod_l+0xafc>)
 80a55a2:	4013      	ands	r3, r2
 80a55a4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80a55a8:	f04f 32ff 	mov.w	r2, #4294967295
 80a55ac:	d81b      	bhi.n	80a55e6 <_strtod_l+0x8e6>
 80a55ae:	0d1b      	lsrs	r3, r3, #20
 80a55b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a55b4:	fa02 f303 	lsl.w	r3, r2, r3
 80a55b8:	4299      	cmp	r1, r3
 80a55ba:	d119      	bne.n	80a55f0 <_strtod_l+0x8f0>
 80a55bc:	4b90      	ldr	r3, [pc, #576]	; (80a5800 <_strtod_l+0xb00>)
 80a55be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a55c0:	429a      	cmp	r2, r3
 80a55c2:	d102      	bne.n	80a55ca <_strtod_l+0x8ca>
 80a55c4:	3101      	adds	r1, #1
 80a55c6:	f43f adda 	beq.w	80a517e <_strtod_l+0x47e>
 80a55ca:	f04f 0800 	mov.w	r8, #0
 80a55ce:	4b8b      	ldr	r3, [pc, #556]	; (80a57fc <_strtod_l+0xafc>)
 80a55d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a55d2:	401a      	ands	r2, r3
 80a55d4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80a55d8:	9b05      	ldr	r3, [sp, #20]
 80a55da:	2b00      	cmp	r3, #0
 80a55dc:	d19a      	bne.n	80a5514 <_strtod_l+0x814>
 80a55de:	e5d9      	b.n	80a5194 <_strtod_l+0x494>
 80a55e0:	f04f 33ff 	mov.w	r3, #4294967295
 80a55e4:	e7e8      	b.n	80a55b8 <_strtod_l+0x8b8>
 80a55e6:	4613      	mov	r3, r2
 80a55e8:	e7e6      	b.n	80a55b8 <_strtod_l+0x8b8>
 80a55ea:	ea53 0308 	orrs.w	r3, r3, r8
 80a55ee:	d081      	beq.n	80a54f4 <_strtod_l+0x7f4>
 80a55f0:	b1e5      	cbz	r5, 80a562c <_strtod_l+0x92c>
 80a55f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a55f4:	421d      	tst	r5, r3
 80a55f6:	d0ef      	beq.n	80a55d8 <_strtod_l+0x8d8>
 80a55f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a55fa:	4640      	mov	r0, r8
 80a55fc:	4649      	mov	r1, r9
 80a55fe:	9a05      	ldr	r2, [sp, #20]
 80a5600:	b1c3      	cbz	r3, 80a5634 <_strtod_l+0x934>
 80a5602:	f7ff fb5c 	bl	80a4cbe <sulp>
 80a5606:	4602      	mov	r2, r0
 80a5608:	460b      	mov	r3, r1
 80a560a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80a560e:	f7fd fc4b 	bl	80a2ea8 <__adddf3>
 80a5612:	4680      	mov	r8, r0
 80a5614:	4689      	mov	r9, r1
 80a5616:	e7df      	b.n	80a55d8 <_strtod_l+0x8d8>
 80a5618:	4013      	ands	r3, r2
 80a561a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80a561e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80a5622:	f04f 38ff 	mov.w	r8, #4294967295
 80a5626:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80a562a:	e7d5      	b.n	80a55d8 <_strtod_l+0x8d8>
 80a562c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a562e:	ea13 0f08 	tst.w	r3, r8
 80a5632:	e7e0      	b.n	80a55f6 <_strtod_l+0x8f6>
 80a5634:	f7ff fb43 	bl	80a4cbe <sulp>
 80a5638:	4602      	mov	r2, r0
 80a563a:	460b      	mov	r3, r1
 80a563c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80a5640:	f7fd fc30 	bl	80a2ea4 <__aeabi_dsub>
 80a5644:	2200      	movs	r2, #0
 80a5646:	2300      	movs	r3, #0
 80a5648:	4680      	mov	r8, r0
 80a564a:	4689      	mov	r9, r1
 80a564c:	f7fe f84a 	bl	80a36e4 <__aeabi_dcmpeq>
 80a5650:	2800      	cmp	r0, #0
 80a5652:	d0c1      	beq.n	80a55d8 <_strtod_l+0x8d8>
 80a5654:	e608      	b.n	80a5268 <_strtod_l+0x568>
 80a5656:	4658      	mov	r0, fp
 80a5658:	9904      	ldr	r1, [sp, #16]
 80a565a:	f001 fda3 	bl	80a71a4 <__ratio>
 80a565e:	2200      	movs	r2, #0
 80a5660:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a5664:	4606      	mov	r6, r0
 80a5666:	460f      	mov	r7, r1
 80a5668:	f7fe f850 	bl	80a370c <__aeabi_dcmple>
 80a566c:	2800      	cmp	r0, #0
 80a566e:	d070      	beq.n	80a5752 <_strtod_l+0xa52>
 80a5670:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a5672:	2b00      	cmp	r3, #0
 80a5674:	d042      	beq.n	80a56fc <_strtod_l+0x9fc>
 80a5676:	2600      	movs	r6, #0
 80a5678:	4f62      	ldr	r7, [pc, #392]	; (80a5804 <_strtod_l+0xb04>)
 80a567a:	4d62      	ldr	r5, [pc, #392]	; (80a5804 <_strtod_l+0xb04>)
 80a567c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a567e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80a5682:	0d1b      	lsrs	r3, r3, #20
 80a5684:	051b      	lsls	r3, r3, #20
 80a5686:	930f      	str	r3, [sp, #60]	; 0x3c
 80a5688:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a568a:	4b5f      	ldr	r3, [pc, #380]	; (80a5808 <_strtod_l+0xb08>)
 80a568c:	429a      	cmp	r2, r3
 80a568e:	f040 80c3 	bne.w	80a5818 <_strtod_l+0xb18>
 80a5692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a5694:	4640      	mov	r0, r8
 80a5696:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80a569a:	4649      	mov	r1, r9
 80a569c:	f001 fcac 	bl	80a6ff8 <__ulp>
 80a56a0:	4602      	mov	r2, r0
 80a56a2:	460b      	mov	r3, r1
 80a56a4:	4630      	mov	r0, r6
 80a56a6:	4639      	mov	r1, r7
 80a56a8:	f7fd fdb4 	bl	80a3214 <__aeabi_dmul>
 80a56ac:	4642      	mov	r2, r8
 80a56ae:	464b      	mov	r3, r9
 80a56b0:	f7fd fbfa 	bl	80a2ea8 <__adddf3>
 80a56b4:	460b      	mov	r3, r1
 80a56b6:	4951      	ldr	r1, [pc, #324]	; (80a57fc <_strtod_l+0xafc>)
 80a56b8:	4a54      	ldr	r2, [pc, #336]	; (80a580c <_strtod_l+0xb0c>)
 80a56ba:	4019      	ands	r1, r3
 80a56bc:	4291      	cmp	r1, r2
 80a56be:	4680      	mov	r8, r0
 80a56c0:	d95d      	bls.n	80a577e <_strtod_l+0xa7e>
 80a56c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80a56c4:	4b4e      	ldr	r3, [pc, #312]	; (80a5800 <_strtod_l+0xb00>)
 80a56c6:	429a      	cmp	r2, r3
 80a56c8:	d103      	bne.n	80a56d2 <_strtod_l+0x9d2>
 80a56ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a56cc:	3301      	adds	r3, #1
 80a56ce:	f43f ad56 	beq.w	80a517e <_strtod_l+0x47e>
 80a56d2:	f04f 38ff 	mov.w	r8, #4294967295
 80a56d6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80a5800 <_strtod_l+0xb00>
 80a56da:	4650      	mov	r0, sl
 80a56dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80a56de:	f001 f95b 	bl	80a6998 <_Bfree>
 80a56e2:	4650      	mov	r0, sl
 80a56e4:	9906      	ldr	r1, [sp, #24]
 80a56e6:	f001 f957 	bl	80a6998 <_Bfree>
 80a56ea:	4650      	mov	r0, sl
 80a56ec:	9904      	ldr	r1, [sp, #16]
 80a56ee:	f001 f953 	bl	80a6998 <_Bfree>
 80a56f2:	4659      	mov	r1, fp
 80a56f4:	4650      	mov	r0, sl
 80a56f6:	f001 f94f 	bl	80a6998 <_Bfree>
 80a56fa:	e627      	b.n	80a534c <_strtod_l+0x64c>
 80a56fc:	f1b8 0f00 	cmp.w	r8, #0
 80a5700:	d119      	bne.n	80a5736 <_strtod_l+0xa36>
 80a5702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a5704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a5708:	b9e3      	cbnz	r3, 80a5744 <_strtod_l+0xa44>
 80a570a:	2200      	movs	r2, #0
 80a570c:	4630      	mov	r0, r6
 80a570e:	4639      	mov	r1, r7
 80a5710:	4b3c      	ldr	r3, [pc, #240]	; (80a5804 <_strtod_l+0xb04>)
 80a5712:	f7fd fff1 	bl	80a36f8 <__aeabi_dcmplt>
 80a5716:	b9c8      	cbnz	r0, 80a574c <_strtod_l+0xa4c>
 80a5718:	2200      	movs	r2, #0
 80a571a:	4630      	mov	r0, r6
 80a571c:	4639      	mov	r1, r7
 80a571e:	4b3c      	ldr	r3, [pc, #240]	; (80a5810 <_strtod_l+0xb10>)
 80a5720:	f7fd fd78 	bl	80a3214 <__aeabi_dmul>
 80a5724:	4604      	mov	r4, r0
 80a5726:	460d      	mov	r5, r1
 80a5728:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80a572c:	9416      	str	r4, [sp, #88]	; 0x58
 80a572e:	9317      	str	r3, [sp, #92]	; 0x5c
 80a5730:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80a5734:	e7a2      	b.n	80a567c <_strtod_l+0x97c>
 80a5736:	f1b8 0f01 	cmp.w	r8, #1
 80a573a:	d103      	bne.n	80a5744 <_strtod_l+0xa44>
 80a573c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a573e:	2b00      	cmp	r3, #0
 80a5740:	f43f ad92 	beq.w	80a5268 <_strtod_l+0x568>
 80a5744:	2600      	movs	r6, #0
 80a5746:	2400      	movs	r4, #0
 80a5748:	4f32      	ldr	r7, [pc, #200]	; (80a5814 <_strtod_l+0xb14>)
 80a574a:	e796      	b.n	80a567a <_strtod_l+0x97a>
 80a574c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80a574e:	4d30      	ldr	r5, [pc, #192]	; (80a5810 <_strtod_l+0xb10>)
 80a5750:	e7ea      	b.n	80a5728 <_strtod_l+0xa28>
 80a5752:	4b2f      	ldr	r3, [pc, #188]	; (80a5810 <_strtod_l+0xb10>)
 80a5754:	2200      	movs	r2, #0
 80a5756:	4630      	mov	r0, r6
 80a5758:	4639      	mov	r1, r7
 80a575a:	f7fd fd5b 	bl	80a3214 <__aeabi_dmul>
 80a575e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a5760:	4604      	mov	r4, r0
 80a5762:	460d      	mov	r5, r1
 80a5764:	b933      	cbnz	r3, 80a5774 <_strtod_l+0xa74>
 80a5766:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a576a:	9010      	str	r0, [sp, #64]	; 0x40
 80a576c:	9311      	str	r3, [sp, #68]	; 0x44
 80a576e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80a5772:	e783      	b.n	80a567c <_strtod_l+0x97c>
 80a5774:	4602      	mov	r2, r0
 80a5776:	460b      	mov	r3, r1
 80a5778:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80a577c:	e7f7      	b.n	80a576e <_strtod_l+0xa6e>
 80a577e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80a5782:	9b05      	ldr	r3, [sp, #20]
 80a5784:	2b00      	cmp	r3, #0
 80a5786:	d1a8      	bne.n	80a56da <_strtod_l+0x9da>
 80a5788:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a578c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a578e:	0d1b      	lsrs	r3, r3, #20
 80a5790:	051b      	lsls	r3, r3, #20
 80a5792:	429a      	cmp	r2, r3
 80a5794:	d1a1      	bne.n	80a56da <_strtod_l+0x9da>
 80a5796:	4620      	mov	r0, r4
 80a5798:	4629      	mov	r1, r5
 80a579a:	f001 fded 	bl	80a7378 <__aeabi_d2lz>
 80a579e:	f7fd fd0b 	bl	80a31b8 <__aeabi_l2d>
 80a57a2:	4602      	mov	r2, r0
 80a57a4:	460b      	mov	r3, r1
 80a57a6:	4620      	mov	r0, r4
 80a57a8:	4629      	mov	r1, r5
 80a57aa:	f7fd fb7b 	bl	80a2ea4 <__aeabi_dsub>
 80a57ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a57b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a57b4:	ea43 0308 	orr.w	r3, r3, r8
 80a57b8:	4313      	orrs	r3, r2
 80a57ba:	4604      	mov	r4, r0
 80a57bc:	460d      	mov	r5, r1
 80a57be:	d066      	beq.n	80a588e <_strtod_l+0xb8e>
 80a57c0:	a309      	add	r3, pc, #36	; (adr r3, 80a57e8 <_strtod_l+0xae8>)
 80a57c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a57c6:	f7fd ff97 	bl	80a36f8 <__aeabi_dcmplt>
 80a57ca:	2800      	cmp	r0, #0
 80a57cc:	f47f ace2 	bne.w	80a5194 <_strtod_l+0x494>
 80a57d0:	a307      	add	r3, pc, #28	; (adr r3, 80a57f0 <_strtod_l+0xaf0>)
 80a57d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a57d6:	4620      	mov	r0, r4
 80a57d8:	4629      	mov	r1, r5
 80a57da:	f7fd ffab 	bl	80a3734 <__aeabi_dcmpgt>
 80a57de:	2800      	cmp	r0, #0
 80a57e0:	f43f af7b 	beq.w	80a56da <_strtod_l+0x9da>
 80a57e4:	e4d6      	b.n	80a5194 <_strtod_l+0x494>
 80a57e6:	bf00      	nop
 80a57e8:	94a03595 	.word	0x94a03595
 80a57ec:	3fdfffff 	.word	0x3fdfffff
 80a57f0:	35afe535 	.word	0x35afe535
 80a57f4:	3fe00000 	.word	0x3fe00000
 80a57f8:	000fffff 	.word	0x000fffff
 80a57fc:	7ff00000 	.word	0x7ff00000
 80a5800:	7fefffff 	.word	0x7fefffff
 80a5804:	3ff00000 	.word	0x3ff00000
 80a5808:	7fe00000 	.word	0x7fe00000
 80a580c:	7c9fffff 	.word	0x7c9fffff
 80a5810:	3fe00000 	.word	0x3fe00000
 80a5814:	bff00000 	.word	0xbff00000
 80a5818:	9b05      	ldr	r3, [sp, #20]
 80a581a:	b313      	cbz	r3, 80a5862 <_strtod_l+0xb62>
 80a581c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a581e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80a5822:	d81e      	bhi.n	80a5862 <_strtod_l+0xb62>
 80a5824:	a326      	add	r3, pc, #152	; (adr r3, 80a58c0 <_strtod_l+0xbc0>)
 80a5826:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a582a:	4620      	mov	r0, r4
 80a582c:	4629      	mov	r1, r5
 80a582e:	f7fd ff6d 	bl	80a370c <__aeabi_dcmple>
 80a5832:	b190      	cbz	r0, 80a585a <_strtod_l+0xb5a>
 80a5834:	4629      	mov	r1, r5
 80a5836:	4620      	mov	r0, r4
 80a5838:	f7fd ffae 	bl	80a3798 <__aeabi_d2uiz>
 80a583c:	2801      	cmp	r0, #1
 80a583e:	bf38      	it	cc
 80a5840:	2001      	movcc	r0, #1
 80a5842:	f7fd fc6d 	bl	80a3120 <__aeabi_ui2d>
 80a5846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a5848:	4604      	mov	r4, r0
 80a584a:	460d      	mov	r5, r1
 80a584c:	b9d3      	cbnz	r3, 80a5884 <_strtod_l+0xb84>
 80a584e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a5852:	9012      	str	r0, [sp, #72]	; 0x48
 80a5854:	9313      	str	r3, [sp, #76]	; 0x4c
 80a5856:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80a585a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a585c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80a5860:	1a9f      	subs	r7, r3, r2
 80a5862:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80a5866:	f001 fbc7 	bl	80a6ff8 <__ulp>
 80a586a:	4602      	mov	r2, r0
 80a586c:	460b      	mov	r3, r1
 80a586e:	4630      	mov	r0, r6
 80a5870:	4639      	mov	r1, r7
 80a5872:	f7fd fccf 	bl	80a3214 <__aeabi_dmul>
 80a5876:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80a587a:	f7fd fb15 	bl	80a2ea8 <__adddf3>
 80a587e:	4680      	mov	r8, r0
 80a5880:	4689      	mov	r9, r1
 80a5882:	e77e      	b.n	80a5782 <_strtod_l+0xa82>
 80a5884:	4602      	mov	r2, r0
 80a5886:	460b      	mov	r3, r1
 80a5888:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80a588c:	e7e3      	b.n	80a5856 <_strtod_l+0xb56>
 80a588e:	a30e      	add	r3, pc, #56	; (adr r3, 80a58c8 <_strtod_l+0xbc8>)
 80a5890:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5894:	f7fd ff30 	bl	80a36f8 <__aeabi_dcmplt>
 80a5898:	e7a1      	b.n	80a57de <_strtod_l+0xade>
 80a589a:	2300      	movs	r3, #0
 80a589c:	930a      	str	r3, [sp, #40]	; 0x28
 80a589e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a58a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80a58a2:	6013      	str	r3, [r2, #0]
 80a58a4:	f7ff ba71 	b.w	80a4d8a <_strtod_l+0x8a>
 80a58a8:	2a65      	cmp	r2, #101	; 0x65
 80a58aa:	f43f ab63 	beq.w	80a4f74 <_strtod_l+0x274>
 80a58ae:	2a45      	cmp	r2, #69	; 0x45
 80a58b0:	f43f ab60 	beq.w	80a4f74 <_strtod_l+0x274>
 80a58b4:	2301      	movs	r3, #1
 80a58b6:	f7ff bb95 	b.w	80a4fe4 <_strtod_l+0x2e4>
 80a58ba:	bf00      	nop
 80a58bc:	f3af 8000 	nop.w
 80a58c0:	ffc00000 	.word	0xffc00000
 80a58c4:	41dfffff 	.word	0x41dfffff
 80a58c8:	94a03595 	.word	0x94a03595
 80a58cc:	3fcfffff 	.word	0x3fcfffff

080a58d0 <strtod>:
 80a58d0:	460a      	mov	r2, r1
 80a58d2:	4601      	mov	r1, r0
 80a58d4:	4802      	ldr	r0, [pc, #8]	; (80a58e0 <strtod+0x10>)
 80a58d6:	4b03      	ldr	r3, [pc, #12]	; (80a58e4 <strtod+0x14>)
 80a58d8:	6800      	ldr	r0, [r0, #0]
 80a58da:	f7ff ba11 	b.w	80a4d00 <_strtod_l>
 80a58de:	bf00      	nop
 80a58e0:	2000000c 	.word	0x2000000c
 80a58e4:	200000dc 	.word	0x200000dc

080a58e8 <_strtol_l.constprop.0>:
 80a58e8:	2b01      	cmp	r3, #1
 80a58ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a58ee:	4680      	mov	r8, r0
 80a58f0:	d001      	beq.n	80a58f6 <_strtol_l.constprop.0+0xe>
 80a58f2:	2b24      	cmp	r3, #36	; 0x24
 80a58f4:	d906      	bls.n	80a5904 <_strtol_l.constprop.0+0x1c>
 80a58f6:	f7fb fe8f 	bl	80a1618 <__errno>
 80a58fa:	2316      	movs	r3, #22
 80a58fc:	6003      	str	r3, [r0, #0]
 80a58fe:	2000      	movs	r0, #0
 80a5900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a5904:	460d      	mov	r5, r1
 80a5906:	4f35      	ldr	r7, [pc, #212]	; (80a59dc <_strtol_l.constprop.0+0xf4>)
 80a5908:	4628      	mov	r0, r5
 80a590a:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a590e:	5de6      	ldrb	r6, [r4, r7]
 80a5910:	f016 0608 	ands.w	r6, r6, #8
 80a5914:	d1f8      	bne.n	80a5908 <_strtol_l.constprop.0+0x20>
 80a5916:	2c2d      	cmp	r4, #45	; 0x2d
 80a5918:	d12f      	bne.n	80a597a <_strtol_l.constprop.0+0x92>
 80a591a:	2601      	movs	r6, #1
 80a591c:	782c      	ldrb	r4, [r5, #0]
 80a591e:	1c85      	adds	r5, r0, #2
 80a5920:	2b00      	cmp	r3, #0
 80a5922:	d057      	beq.n	80a59d4 <_strtol_l.constprop.0+0xec>
 80a5924:	2b10      	cmp	r3, #16
 80a5926:	d109      	bne.n	80a593c <_strtol_l.constprop.0+0x54>
 80a5928:	2c30      	cmp	r4, #48	; 0x30
 80a592a:	d107      	bne.n	80a593c <_strtol_l.constprop.0+0x54>
 80a592c:	7828      	ldrb	r0, [r5, #0]
 80a592e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a5932:	2858      	cmp	r0, #88	; 0x58
 80a5934:	d149      	bne.n	80a59ca <_strtol_l.constprop.0+0xe2>
 80a5936:	2310      	movs	r3, #16
 80a5938:	786c      	ldrb	r4, [r5, #1]
 80a593a:	3502      	adds	r5, #2
 80a593c:	2700      	movs	r7, #0
 80a593e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80a5942:	f10e 3eff 	add.w	lr, lr, #4294967295
 80a5946:	fbbe f9f3 	udiv	r9, lr, r3
 80a594a:	4638      	mov	r0, r7
 80a594c:	fb03 ea19 	mls	sl, r3, r9, lr
 80a5950:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80a5954:	f1bc 0f09 	cmp.w	ip, #9
 80a5958:	d814      	bhi.n	80a5984 <_strtol_l.constprop.0+0x9c>
 80a595a:	4664      	mov	r4, ip
 80a595c:	42a3      	cmp	r3, r4
 80a595e:	dd22      	ble.n	80a59a6 <_strtol_l.constprop.0+0xbe>
 80a5960:	2f00      	cmp	r7, #0
 80a5962:	db1d      	blt.n	80a59a0 <_strtol_l.constprop.0+0xb8>
 80a5964:	4581      	cmp	r9, r0
 80a5966:	d31b      	bcc.n	80a59a0 <_strtol_l.constprop.0+0xb8>
 80a5968:	d101      	bne.n	80a596e <_strtol_l.constprop.0+0x86>
 80a596a:	45a2      	cmp	sl, r4
 80a596c:	db18      	blt.n	80a59a0 <_strtol_l.constprop.0+0xb8>
 80a596e:	2701      	movs	r7, #1
 80a5970:	fb00 4003 	mla	r0, r0, r3, r4
 80a5974:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a5978:	e7ea      	b.n	80a5950 <_strtol_l.constprop.0+0x68>
 80a597a:	2c2b      	cmp	r4, #43	; 0x2b
 80a597c:	bf04      	itt	eq
 80a597e:	782c      	ldrbeq	r4, [r5, #0]
 80a5980:	1c85      	addeq	r5, r0, #2
 80a5982:	e7cd      	b.n	80a5920 <_strtol_l.constprop.0+0x38>
 80a5984:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80a5988:	f1bc 0f19 	cmp.w	ip, #25
 80a598c:	d801      	bhi.n	80a5992 <_strtol_l.constprop.0+0xaa>
 80a598e:	3c37      	subs	r4, #55	; 0x37
 80a5990:	e7e4      	b.n	80a595c <_strtol_l.constprop.0+0x74>
 80a5992:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80a5996:	f1bc 0f19 	cmp.w	ip, #25
 80a599a:	d804      	bhi.n	80a59a6 <_strtol_l.constprop.0+0xbe>
 80a599c:	3c57      	subs	r4, #87	; 0x57
 80a599e:	e7dd      	b.n	80a595c <_strtol_l.constprop.0+0x74>
 80a59a0:	f04f 37ff 	mov.w	r7, #4294967295
 80a59a4:	e7e6      	b.n	80a5974 <_strtol_l.constprop.0+0x8c>
 80a59a6:	2f00      	cmp	r7, #0
 80a59a8:	da07      	bge.n	80a59ba <_strtol_l.constprop.0+0xd2>
 80a59aa:	2322      	movs	r3, #34	; 0x22
 80a59ac:	4670      	mov	r0, lr
 80a59ae:	f8c8 3000 	str.w	r3, [r8]
 80a59b2:	2a00      	cmp	r2, #0
 80a59b4:	d0a4      	beq.n	80a5900 <_strtol_l.constprop.0+0x18>
 80a59b6:	1e69      	subs	r1, r5, #1
 80a59b8:	e005      	b.n	80a59c6 <_strtol_l.constprop.0+0xde>
 80a59ba:	b106      	cbz	r6, 80a59be <_strtol_l.constprop.0+0xd6>
 80a59bc:	4240      	negs	r0, r0
 80a59be:	2a00      	cmp	r2, #0
 80a59c0:	d09e      	beq.n	80a5900 <_strtol_l.constprop.0+0x18>
 80a59c2:	2f00      	cmp	r7, #0
 80a59c4:	d1f7      	bne.n	80a59b6 <_strtol_l.constprop.0+0xce>
 80a59c6:	6011      	str	r1, [r2, #0]
 80a59c8:	e79a      	b.n	80a5900 <_strtol_l.constprop.0+0x18>
 80a59ca:	2430      	movs	r4, #48	; 0x30
 80a59cc:	2b00      	cmp	r3, #0
 80a59ce:	d1b5      	bne.n	80a593c <_strtol_l.constprop.0+0x54>
 80a59d0:	2308      	movs	r3, #8
 80a59d2:	e7b3      	b.n	80a593c <_strtol_l.constprop.0+0x54>
 80a59d4:	2c30      	cmp	r4, #48	; 0x30
 80a59d6:	d0a9      	beq.n	80a592c <_strtol_l.constprop.0+0x44>
 80a59d8:	230a      	movs	r3, #10
 80a59da:	e7af      	b.n	80a593c <_strtol_l.constprop.0+0x54>
 80a59dc:	080a7b2d 	.word	0x080a7b2d

080a59e0 <strtol>:
 80a59e0:	4613      	mov	r3, r2
 80a59e2:	460a      	mov	r2, r1
 80a59e4:	4601      	mov	r1, r0
 80a59e6:	4802      	ldr	r0, [pc, #8]	; (80a59f0 <strtol+0x10>)
 80a59e8:	6800      	ldr	r0, [r0, #0]
 80a59ea:	f7ff bf7d 	b.w	80a58e8 <_strtol_l.constprop.0>
 80a59ee:	bf00      	nop
 80a59f0:	2000000c 	.word	0x2000000c

080a59f4 <_strtoul_l.constprop.0>:
 80a59f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a59f8:	4686      	mov	lr, r0
 80a59fa:	460d      	mov	r5, r1
 80a59fc:	4f35      	ldr	r7, [pc, #212]	; (80a5ad4 <_strtoul_l.constprop.0+0xe0>)
 80a59fe:	4628      	mov	r0, r5
 80a5a00:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a5a04:	5de6      	ldrb	r6, [r4, r7]
 80a5a06:	f016 0608 	ands.w	r6, r6, #8
 80a5a0a:	d1f8      	bne.n	80a59fe <_strtoul_l.constprop.0+0xa>
 80a5a0c:	2c2d      	cmp	r4, #45	; 0x2d
 80a5a0e:	d12f      	bne.n	80a5a70 <_strtoul_l.constprop.0+0x7c>
 80a5a10:	2601      	movs	r6, #1
 80a5a12:	782c      	ldrb	r4, [r5, #0]
 80a5a14:	1c85      	adds	r5, r0, #2
 80a5a16:	2b00      	cmp	r3, #0
 80a5a18:	d057      	beq.n	80a5aca <_strtoul_l.constprop.0+0xd6>
 80a5a1a:	2b10      	cmp	r3, #16
 80a5a1c:	d109      	bne.n	80a5a32 <_strtoul_l.constprop.0+0x3e>
 80a5a1e:	2c30      	cmp	r4, #48	; 0x30
 80a5a20:	d107      	bne.n	80a5a32 <_strtoul_l.constprop.0+0x3e>
 80a5a22:	7828      	ldrb	r0, [r5, #0]
 80a5a24:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a5a28:	2858      	cmp	r0, #88	; 0x58
 80a5a2a:	d149      	bne.n	80a5ac0 <_strtoul_l.constprop.0+0xcc>
 80a5a2c:	2310      	movs	r3, #16
 80a5a2e:	786c      	ldrb	r4, [r5, #1]
 80a5a30:	3502      	adds	r5, #2
 80a5a32:	f04f 38ff 	mov.w	r8, #4294967295
 80a5a36:	fbb8 f8f3 	udiv	r8, r8, r3
 80a5a3a:	2700      	movs	r7, #0
 80a5a3c:	fb03 f908 	mul.w	r9, r3, r8
 80a5a40:	4638      	mov	r0, r7
 80a5a42:	ea6f 0909 	mvn.w	r9, r9
 80a5a46:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80a5a4a:	f1bc 0f09 	cmp.w	ip, #9
 80a5a4e:	d814      	bhi.n	80a5a7a <_strtoul_l.constprop.0+0x86>
 80a5a50:	4664      	mov	r4, ip
 80a5a52:	42a3      	cmp	r3, r4
 80a5a54:	dd22      	ble.n	80a5a9c <_strtoul_l.constprop.0+0xa8>
 80a5a56:	2f00      	cmp	r7, #0
 80a5a58:	db1d      	blt.n	80a5a96 <_strtoul_l.constprop.0+0xa2>
 80a5a5a:	4580      	cmp	r8, r0
 80a5a5c:	d31b      	bcc.n	80a5a96 <_strtoul_l.constprop.0+0xa2>
 80a5a5e:	d101      	bne.n	80a5a64 <_strtoul_l.constprop.0+0x70>
 80a5a60:	45a1      	cmp	r9, r4
 80a5a62:	db18      	blt.n	80a5a96 <_strtoul_l.constprop.0+0xa2>
 80a5a64:	2701      	movs	r7, #1
 80a5a66:	fb00 4003 	mla	r0, r0, r3, r4
 80a5a6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a5a6e:	e7ea      	b.n	80a5a46 <_strtoul_l.constprop.0+0x52>
 80a5a70:	2c2b      	cmp	r4, #43	; 0x2b
 80a5a72:	bf04      	itt	eq
 80a5a74:	782c      	ldrbeq	r4, [r5, #0]
 80a5a76:	1c85      	addeq	r5, r0, #2
 80a5a78:	e7cd      	b.n	80a5a16 <_strtoul_l.constprop.0+0x22>
 80a5a7a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80a5a7e:	f1bc 0f19 	cmp.w	ip, #25
 80a5a82:	d801      	bhi.n	80a5a88 <_strtoul_l.constprop.0+0x94>
 80a5a84:	3c37      	subs	r4, #55	; 0x37
 80a5a86:	e7e4      	b.n	80a5a52 <_strtoul_l.constprop.0+0x5e>
 80a5a88:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80a5a8c:	f1bc 0f19 	cmp.w	ip, #25
 80a5a90:	d804      	bhi.n	80a5a9c <_strtoul_l.constprop.0+0xa8>
 80a5a92:	3c57      	subs	r4, #87	; 0x57
 80a5a94:	e7dd      	b.n	80a5a52 <_strtoul_l.constprop.0+0x5e>
 80a5a96:	f04f 37ff 	mov.w	r7, #4294967295
 80a5a9a:	e7e6      	b.n	80a5a6a <_strtoul_l.constprop.0+0x76>
 80a5a9c:	2f00      	cmp	r7, #0
 80a5a9e:	da07      	bge.n	80a5ab0 <_strtoul_l.constprop.0+0xbc>
 80a5aa0:	2322      	movs	r3, #34	; 0x22
 80a5aa2:	f04f 30ff 	mov.w	r0, #4294967295
 80a5aa6:	f8ce 3000 	str.w	r3, [lr]
 80a5aaa:	b932      	cbnz	r2, 80a5aba <_strtoul_l.constprop.0+0xc6>
 80a5aac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a5ab0:	b106      	cbz	r6, 80a5ab4 <_strtoul_l.constprop.0+0xc0>
 80a5ab2:	4240      	negs	r0, r0
 80a5ab4:	2a00      	cmp	r2, #0
 80a5ab6:	d0f9      	beq.n	80a5aac <_strtoul_l.constprop.0+0xb8>
 80a5ab8:	b107      	cbz	r7, 80a5abc <_strtoul_l.constprop.0+0xc8>
 80a5aba:	1e69      	subs	r1, r5, #1
 80a5abc:	6011      	str	r1, [r2, #0]
 80a5abe:	e7f5      	b.n	80a5aac <_strtoul_l.constprop.0+0xb8>
 80a5ac0:	2430      	movs	r4, #48	; 0x30
 80a5ac2:	2b00      	cmp	r3, #0
 80a5ac4:	d1b5      	bne.n	80a5a32 <_strtoul_l.constprop.0+0x3e>
 80a5ac6:	2308      	movs	r3, #8
 80a5ac8:	e7b3      	b.n	80a5a32 <_strtoul_l.constprop.0+0x3e>
 80a5aca:	2c30      	cmp	r4, #48	; 0x30
 80a5acc:	d0a9      	beq.n	80a5a22 <_strtoul_l.constprop.0+0x2e>
 80a5ace:	230a      	movs	r3, #10
 80a5ad0:	e7af      	b.n	80a5a32 <_strtoul_l.constprop.0+0x3e>
 80a5ad2:	bf00      	nop
 80a5ad4:	080a7b2d 	.word	0x080a7b2d

080a5ad8 <strtoul>:
 80a5ad8:	4613      	mov	r3, r2
 80a5ada:	460a      	mov	r2, r1
 80a5adc:	4601      	mov	r1, r0
 80a5ade:	4802      	ldr	r0, [pc, #8]	; (80a5ae8 <strtoul+0x10>)
 80a5ae0:	6800      	ldr	r0, [r0, #0]
 80a5ae2:	f7ff bf87 	b.w	80a59f4 <_strtoul_l.constprop.0>
 80a5ae6:	bf00      	nop
 80a5ae8:	2000000c 	.word	0x2000000c

080a5aec <__tzcalc_limits>:
 80a5aec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5af0:	4605      	mov	r5, r0
 80a5af2:	f000 fe45 	bl	80a6780 <__gettzinfo>
 80a5af6:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a5afa:	429d      	cmp	r5, r3
 80a5afc:	f340 8094 	ble.w	80a5c28 <__tzcalc_limits+0x13c>
 80a5b00:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 80a5b04:	18ac      	adds	r4, r5, r2
 80a5b06:	f240 126d 	movw	r2, #365	; 0x16d
 80a5b0a:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 80a5b0e:	10a4      	asrs	r4, r4, #2
 80a5b10:	fb02 4403 	mla	r4, r2, r3, r4
 80a5b14:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80a5b18:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 80a5b1c:	fb93 f3f2 	sdiv	r3, r3, r2
 80a5b20:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 80a5b24:	441c      	add	r4, r3
 80a5b26:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a5b2a:	186a      	adds	r2, r5, r1
 80a5b2c:	fbb2 f2f3 	udiv	r2, r2, r3
 80a5b30:	fb95 fef3 	sdiv	lr, r5, r3
 80a5b34:	4414      	add	r4, r2
 80a5b36:	2264      	movs	r2, #100	; 0x64
 80a5b38:	fb03 5e1e 	mls	lr, r3, lr, r5
 80a5b3c:	fb95 fcf2 	sdiv	ip, r5, r2
 80a5b40:	fabe f78e 	clz	r7, lr
 80a5b44:	4601      	mov	r1, r0
 80a5b46:	fb02 5c1c 	mls	ip, r2, ip, r5
 80a5b4a:	6045      	str	r5, [r0, #4]
 80a5b4c:	097f      	lsrs	r7, r7, #5
 80a5b4e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80a5b52:	f005 0303 	and.w	r3, r5, #3
 80a5b56:	7a0a      	ldrb	r2, [r1, #8]
 80a5b58:	694d      	ldr	r5, [r1, #20]
 80a5b5a:	2a4a      	cmp	r2, #74	; 0x4a
 80a5b5c:	d12a      	bne.n	80a5bb4 <__tzcalc_limits+0xc8>
 80a5b5e:	1962      	adds	r2, r4, r5
 80a5b60:	b913      	cbnz	r3, 80a5b68 <__tzcalc_limits+0x7c>
 80a5b62:	f1bc 0f00 	cmp.w	ip, #0
 80a5b66:	d102      	bne.n	80a5b6e <__tzcalc_limits+0x82>
 80a5b68:	f1be 0f00 	cmp.w	lr, #0
 80a5b6c:	d120      	bne.n	80a5bb0 <__tzcalc_limits+0xc4>
 80a5b6e:	2d3b      	cmp	r5, #59	; 0x3b
 80a5b70:	bfd4      	ite	le
 80a5b72:	2500      	movle	r5, #0
 80a5b74:	2501      	movgt	r5, #1
 80a5b76:	4415      	add	r5, r2
 80a5b78:	3d01      	subs	r5, #1
 80a5b7a:	698e      	ldr	r6, [r1, #24]
 80a5b7c:	4a2b      	ldr	r2, [pc, #172]	; (80a5c2c <__tzcalc_limits+0x140>)
 80a5b7e:	fb02 6505 	mla	r5, r2, r5, r6
 80a5b82:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80a5b84:	4415      	add	r5, r2
 80a5b86:	17ea      	asrs	r2, r5, #31
 80a5b88:	e9c1 5208 	strd	r5, r2, [r1, #32]
 80a5b8c:	3128      	adds	r1, #40	; 0x28
 80a5b8e:	458b      	cmp	fp, r1
 80a5b90:	d1e1      	bne.n	80a5b56 <__tzcalc_limits+0x6a>
 80a5b92:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 80a5b96:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 80a5b9a:	428c      	cmp	r4, r1
 80a5b9c:	eb72 0303 	sbcs.w	r3, r2, r3
 80a5ba0:	bfb4      	ite	lt
 80a5ba2:	2301      	movlt	r3, #1
 80a5ba4:	2300      	movge	r3, #0
 80a5ba6:	6003      	str	r3, [r0, #0]
 80a5ba8:	2001      	movs	r0, #1
 80a5baa:	b003      	add	sp, #12
 80a5bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5bb0:	2500      	movs	r5, #0
 80a5bb2:	e7e0      	b.n	80a5b76 <__tzcalc_limits+0x8a>
 80a5bb4:	2a44      	cmp	r2, #68	; 0x44
 80a5bb6:	d101      	bne.n	80a5bbc <__tzcalc_limits+0xd0>
 80a5bb8:	4425      	add	r5, r4
 80a5bba:	e7de      	b.n	80a5b7a <__tzcalc_limits+0x8e>
 80a5bbc:	bb73      	cbnz	r3, 80a5c1c <__tzcalc_limits+0x130>
 80a5bbe:	f1bc 0f00 	cmp.w	ip, #0
 80a5bc2:	bf0c      	ite	eq
 80a5bc4:	463e      	moveq	r6, r7
 80a5bc6:	2601      	movne	r6, #1
 80a5bc8:	f04f 0830 	mov.w	r8, #48	; 0x30
 80a5bcc:	68ca      	ldr	r2, [r1, #12]
 80a5bce:	f04f 0900 	mov.w	r9, #0
 80a5bd2:	9201      	str	r2, [sp, #4]
 80a5bd4:	4622      	mov	r2, r4
 80a5bd6:	f8df a058 	ldr.w	sl, [pc, #88]	; 80a5c30 <__tzcalc_limits+0x144>
 80a5bda:	fb08 a606 	mla	r6, r8, r6, sl
 80a5bde:	3e04      	subs	r6, #4
 80a5be0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80a5be4:	f109 0901 	add.w	r9, r9, #1
 80a5be8:	45c8      	cmp	r8, r9
 80a5bea:	f856 a029 	ldr.w	sl, [r6, r9, lsl #2]
 80a5bee:	dc17      	bgt.n	80a5c20 <__tzcalc_limits+0x134>
 80a5bf0:	f04f 0807 	mov.w	r8, #7
 80a5bf4:	1d16      	adds	r6, r2, #4
 80a5bf6:	fb96 f9f8 	sdiv	r9, r6, r8
 80a5bfa:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80a5bfe:	eba6 0909 	sub.w	r9, r6, r9
 80a5c02:	ebb5 0909 	subs.w	r9, r5, r9
 80a5c06:	690d      	ldr	r5, [r1, #16]
 80a5c08:	bf48      	it	mi
 80a5c0a:	44c1      	addmi	r9, r8
 80a5c0c:	3d01      	subs	r5, #1
 80a5c0e:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 80a5c12:	444d      	add	r5, r9
 80a5c14:	4555      	cmp	r5, sl
 80a5c16:	da05      	bge.n	80a5c24 <__tzcalc_limits+0x138>
 80a5c18:	4415      	add	r5, r2
 80a5c1a:	e7ae      	b.n	80a5b7a <__tzcalc_limits+0x8e>
 80a5c1c:	463e      	mov	r6, r7
 80a5c1e:	e7d3      	b.n	80a5bc8 <__tzcalc_limits+0xdc>
 80a5c20:	4452      	add	r2, sl
 80a5c22:	e7dd      	b.n	80a5be0 <__tzcalc_limits+0xf4>
 80a5c24:	3d07      	subs	r5, #7
 80a5c26:	e7f5      	b.n	80a5c14 <__tzcalc_limits+0x128>
 80a5c28:	2000      	movs	r0, #0
 80a5c2a:	e7be      	b.n	80a5baa <__tzcalc_limits+0xbe>
 80a5c2c:	00015180 	.word	0x00015180
 80a5c30:	080a771c 	.word	0x080a771c

080a5c34 <__tz_lock>:
 80a5c34:	4801      	ldr	r0, [pc, #4]	; (80a5c3c <__tz_lock+0x8>)
 80a5c36:	f000 be59 	b.w	80a68ec <__retarget_lock_acquire>
 80a5c3a:	bf00      	nop
 80a5c3c:	20000582 	.word	0x20000582

080a5c40 <__tz_unlock>:
 80a5c40:	4801      	ldr	r0, [pc, #4]	; (80a5c48 <__tz_unlock+0x8>)
 80a5c42:	f000 be55 	b.w	80a68f0 <__retarget_lock_release>
 80a5c46:	bf00      	nop
 80a5c48:	20000582 	.word	0x20000582

080a5c4c <_tzset_unlocked>:
 80a5c4c:	4b01      	ldr	r3, [pc, #4]	; (80a5c54 <_tzset_unlocked+0x8>)
 80a5c4e:	6818      	ldr	r0, [r3, #0]
 80a5c50:	f000 b802 	b.w	80a5c58 <_tzset_unlocked_r>
 80a5c54:	2000000c 	.word	0x2000000c

080a5c58 <_tzset_unlocked_r>:
 80a5c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5c5c:	b08d      	sub	sp, #52	; 0x34
 80a5c5e:	4607      	mov	r7, r0
 80a5c60:	f000 fd8e 	bl	80a6780 <__gettzinfo>
 80a5c64:	49b1      	ldr	r1, [pc, #708]	; (80a5f2c <_tzset_unlocked_r+0x2d4>)
 80a5c66:	4605      	mov	r5, r0
 80a5c68:	4638      	mov	r0, r7
 80a5c6a:	f000 fd81 	bl	80a6770 <_getenv_r>
 80a5c6e:	4eb0      	ldr	r6, [pc, #704]	; (80a5f30 <_tzset_unlocked_r+0x2d8>)
 80a5c70:	4604      	mov	r4, r0
 80a5c72:	b970      	cbnz	r0, 80a5c92 <_tzset_unlocked_r+0x3a>
 80a5c74:	4baf      	ldr	r3, [pc, #700]	; (80a5f34 <_tzset_unlocked_r+0x2dc>)
 80a5c76:	4ab0      	ldr	r2, [pc, #704]	; (80a5f38 <_tzset_unlocked_r+0x2e0>)
 80a5c78:	6018      	str	r0, [r3, #0]
 80a5c7a:	4bb0      	ldr	r3, [pc, #704]	; (80a5f3c <_tzset_unlocked_r+0x2e4>)
 80a5c7c:	6018      	str	r0, [r3, #0]
 80a5c7e:	4bb0      	ldr	r3, [pc, #704]	; (80a5f40 <_tzset_unlocked_r+0x2e8>)
 80a5c80:	6830      	ldr	r0, [r6, #0]
 80a5c82:	e9c3 2200 	strd	r2, r2, [r3]
 80a5c86:	f7fb fc87 	bl	80a1598 <free>
 80a5c8a:	6034      	str	r4, [r6, #0]
 80a5c8c:	b00d      	add	sp, #52	; 0x34
 80a5c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5c92:	6831      	ldr	r1, [r6, #0]
 80a5c94:	2900      	cmp	r1, #0
 80a5c96:	d162      	bne.n	80a5d5e <_tzset_unlocked_r+0x106>
 80a5c98:	6830      	ldr	r0, [r6, #0]
 80a5c9a:	f7fb fc7d 	bl	80a1598 <free>
 80a5c9e:	4620      	mov	r0, r4
 80a5ca0:	f7fe ffde 	bl	80a4c60 <strlen>
 80a5ca4:	1c41      	adds	r1, r0, #1
 80a5ca6:	4638      	mov	r0, r7
 80a5ca8:	f7fb fcae 	bl	80a1608 <_malloc_r>
 80a5cac:	6030      	str	r0, [r6, #0]
 80a5cae:	2800      	cmp	r0, #0
 80a5cb0:	d15a      	bne.n	80a5d68 <_tzset_unlocked_r+0x110>
 80a5cb2:	7823      	ldrb	r3, [r4, #0]
 80a5cb4:	ae0a      	add	r6, sp, #40	; 0x28
 80a5cb6:	2b3a      	cmp	r3, #58	; 0x3a
 80a5cb8:	bf08      	it	eq
 80a5cba:	3401      	addeq	r4, #1
 80a5cbc:	4633      	mov	r3, r6
 80a5cbe:	4620      	mov	r0, r4
 80a5cc0:	4aa0      	ldr	r2, [pc, #640]	; (80a5f44 <_tzset_unlocked_r+0x2ec>)
 80a5cc2:	49a1      	ldr	r1, [pc, #644]	; (80a5f48 <_tzset_unlocked_r+0x2f0>)
 80a5cc4:	f7fb fc80 	bl	80a15c8 <siscanf>
 80a5cc8:	2800      	cmp	r0, #0
 80a5cca:	dddf      	ble.n	80a5c8c <_tzset_unlocked_r+0x34>
 80a5ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5cce:	18e7      	adds	r7, r4, r3
 80a5cd0:	5ce3      	ldrb	r3, [r4, r3]
 80a5cd2:	2b2d      	cmp	r3, #45	; 0x2d
 80a5cd4:	d14c      	bne.n	80a5d70 <_tzset_unlocked_r+0x118>
 80a5cd6:	f04f 38ff 	mov.w	r8, #4294967295
 80a5cda:	3701      	adds	r7, #1
 80a5cdc:	2400      	movs	r4, #0
 80a5cde:	f10d 0a20 	add.w	sl, sp, #32
 80a5ce2:	f10d 0b1e 	add.w	fp, sp, #30
 80a5ce6:	4633      	mov	r3, r6
 80a5ce8:	4638      	mov	r0, r7
 80a5cea:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80a5cee:	4997      	ldr	r1, [pc, #604]	; (80a5f4c <_tzset_unlocked_r+0x2f4>)
 80a5cf0:	9603      	str	r6, [sp, #12]
 80a5cf2:	f8cd b000 	str.w	fp, [sp]
 80a5cf6:	aa07      	add	r2, sp, #28
 80a5cf8:	f8ad 401e 	strh.w	r4, [sp, #30]
 80a5cfc:	f8ad 4020 	strh.w	r4, [sp, #32]
 80a5d00:	f7fb fc62 	bl	80a15c8 <siscanf>
 80a5d04:	42a0      	cmp	r0, r4
 80a5d06:	ddc1      	ble.n	80a5c8c <_tzset_unlocked_r+0x34>
 80a5d08:	213c      	movs	r1, #60	; 0x3c
 80a5d0a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a5d0e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a5d12:	f8df 923c 	ldr.w	r9, [pc, #572]	; 80a5f50 <_tzset_unlocked_r+0x2f8>
 80a5d16:	fb01 3302 	mla	r3, r1, r2, r3
 80a5d1a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a5d1e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a5d22:	fb01 3302 	mla	r3, r1, r2, r3
 80a5d26:	fb08 f303 	mul.w	r3, r8, r3
 80a5d2a:	f8df 8214 	ldr.w	r8, [pc, #532]	; 80a5f40 <_tzset_unlocked_r+0x2e8>
 80a5d2e:	62ab      	str	r3, [r5, #40]	; 0x28
 80a5d30:	4b84      	ldr	r3, [pc, #528]	; (80a5f44 <_tzset_unlocked_r+0x2ec>)
 80a5d32:	464a      	mov	r2, r9
 80a5d34:	f8c8 3000 	str.w	r3, [r8]
 80a5d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5d3a:	4983      	ldr	r1, [pc, #524]	; (80a5f48 <_tzset_unlocked_r+0x2f0>)
 80a5d3c:	441f      	add	r7, r3
 80a5d3e:	4638      	mov	r0, r7
 80a5d40:	4633      	mov	r3, r6
 80a5d42:	f7fb fc41 	bl	80a15c8 <siscanf>
 80a5d46:	42a0      	cmp	r0, r4
 80a5d48:	dc18      	bgt.n	80a5d7c <_tzset_unlocked_r+0x124>
 80a5d4a:	f8d8 3000 	ldr.w	r3, [r8]
 80a5d4e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a5d50:	f8c8 3004 	str.w	r3, [r8, #4]
 80a5d54:	4b77      	ldr	r3, [pc, #476]	; (80a5f34 <_tzset_unlocked_r+0x2dc>)
 80a5d56:	601a      	str	r2, [r3, #0]
 80a5d58:	4b78      	ldr	r3, [pc, #480]	; (80a5f3c <_tzset_unlocked_r+0x2e4>)
 80a5d5a:	601c      	str	r4, [r3, #0]
 80a5d5c:	e796      	b.n	80a5c8c <_tzset_unlocked_r+0x34>
 80a5d5e:	f7fe fa1b 	bl	80a4198 <strcmp>
 80a5d62:	2800      	cmp	r0, #0
 80a5d64:	d198      	bne.n	80a5c98 <_tzset_unlocked_r+0x40>
 80a5d66:	e791      	b.n	80a5c8c <_tzset_unlocked_r+0x34>
 80a5d68:	4621      	mov	r1, r4
 80a5d6a:	f7fe fa1f 	bl	80a41ac <strcpy>
 80a5d6e:	e7a0      	b.n	80a5cb2 <_tzset_unlocked_r+0x5a>
 80a5d70:	2b2b      	cmp	r3, #43	; 0x2b
 80a5d72:	f04f 0801 	mov.w	r8, #1
 80a5d76:	bf08      	it	eq
 80a5d78:	3701      	addeq	r7, #1
 80a5d7a:	e7af      	b.n	80a5cdc <_tzset_unlocked_r+0x84>
 80a5d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5d7e:	f8c8 9004 	str.w	r9, [r8, #4]
 80a5d82:	18fc      	adds	r4, r7, r3
 80a5d84:	5cfb      	ldrb	r3, [r7, r3]
 80a5d86:	2b2d      	cmp	r3, #45	; 0x2d
 80a5d88:	f040 808c 	bne.w	80a5ea4 <_tzset_unlocked_r+0x24c>
 80a5d8c:	f04f 37ff 	mov.w	r7, #4294967295
 80a5d90:	3401      	adds	r4, #1
 80a5d92:	2300      	movs	r3, #0
 80a5d94:	4620      	mov	r0, r4
 80a5d96:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a5d9a:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a5d9e:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a5da2:	930a      	str	r3, [sp, #40]	; 0x28
 80a5da4:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a5da8:	4633      	mov	r3, r6
 80a5daa:	e9cd b600 	strd	fp, r6, [sp]
 80a5dae:	4967      	ldr	r1, [pc, #412]	; (80a5f4c <_tzset_unlocked_r+0x2f4>)
 80a5db0:	aa07      	add	r2, sp, #28
 80a5db2:	f7fb fc09 	bl	80a15c8 <siscanf>
 80a5db6:	2800      	cmp	r0, #0
 80a5db8:	dc7a      	bgt.n	80a5eb0 <_tzset_unlocked_r+0x258>
 80a5dba:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80a5dbc:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80a5dc0:	462f      	mov	r7, r5
 80a5dc2:	f04f 0900 	mov.w	r9, #0
 80a5dc6:	652b      	str	r3, [r5, #80]	; 0x50
 80a5dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5dca:	441c      	add	r4, r3
 80a5dcc:	7823      	ldrb	r3, [r4, #0]
 80a5dce:	2b2c      	cmp	r3, #44	; 0x2c
 80a5dd0:	bf08      	it	eq
 80a5dd2:	3401      	addeq	r4, #1
 80a5dd4:	f894 8000 	ldrb.w	r8, [r4]
 80a5dd8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a5ddc:	d17a      	bne.n	80a5ed4 <_tzset_unlocked_r+0x27c>
 80a5dde:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a5de2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80a5de6:	ab09      	add	r3, sp, #36	; 0x24
 80a5de8:	9300      	str	r3, [sp, #0]
 80a5dea:	4620      	mov	r0, r4
 80a5dec:	4633      	mov	r3, r6
 80a5dee:	4959      	ldr	r1, [pc, #356]	; (80a5f54 <_tzset_unlocked_r+0x2fc>)
 80a5df0:	9603      	str	r6, [sp, #12]
 80a5df2:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a5df6:	f7fb fbe7 	bl	80a15c8 <siscanf>
 80a5dfa:	2803      	cmp	r0, #3
 80a5dfc:	f47f af46 	bne.w	80a5c8c <_tzset_unlocked_r+0x34>
 80a5e00:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a5e04:	1e4b      	subs	r3, r1, #1
 80a5e06:	2b0b      	cmp	r3, #11
 80a5e08:	f63f af40 	bhi.w	80a5c8c <_tzset_unlocked_r+0x34>
 80a5e0c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a5e10:	1e53      	subs	r3, r2, #1
 80a5e12:	2b04      	cmp	r3, #4
 80a5e14:	f63f af3a 	bhi.w	80a5c8c <_tzset_unlocked_r+0x34>
 80a5e18:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a5e1c:	2b06      	cmp	r3, #6
 80a5e1e:	f63f af35 	bhi.w	80a5c8c <_tzset_unlocked_r+0x34>
 80a5e22:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80a5e26:	f887 8008 	strb.w	r8, [r7, #8]
 80a5e2a:	617b      	str	r3, [r7, #20]
 80a5e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5e2e:	eb04 0803 	add.w	r8, r4, r3
 80a5e32:	2302      	movs	r3, #2
 80a5e34:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a5e38:	2300      	movs	r3, #0
 80a5e3a:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a5e3e:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a5e42:	930a      	str	r3, [sp, #40]	; 0x28
 80a5e44:	f898 3000 	ldrb.w	r3, [r8]
 80a5e48:	2b2f      	cmp	r3, #47	; 0x2f
 80a5e4a:	d109      	bne.n	80a5e60 <_tzset_unlocked_r+0x208>
 80a5e4c:	4633      	mov	r3, r6
 80a5e4e:	4640      	mov	r0, r8
 80a5e50:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a5e54:	e9cd b600 	strd	fp, r6, [sp]
 80a5e58:	493f      	ldr	r1, [pc, #252]	; (80a5f58 <_tzset_unlocked_r+0x300>)
 80a5e5a:	aa07      	add	r2, sp, #28
 80a5e5c:	f7fb fbb4 	bl	80a15c8 <siscanf>
 80a5e60:	213c      	movs	r1, #60	; 0x3c
 80a5e62:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a5e66:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a5e6a:	3728      	adds	r7, #40	; 0x28
 80a5e6c:	fb01 3302 	mla	r3, r1, r2, r3
 80a5e70:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a5e74:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a5e78:	fb01 3302 	mla	r3, r1, r2, r3
 80a5e7c:	f847 3c10 	str.w	r3, [r7, #-16]
 80a5e80:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a5e82:	4444      	add	r4, r8
 80a5e84:	f1b9 0f00 	cmp.w	r9, #0
 80a5e88:	d021      	beq.n	80a5ece <_tzset_unlocked_r+0x276>
 80a5e8a:	6868      	ldr	r0, [r5, #4]
 80a5e8c:	f7ff fe2e 	bl	80a5aec <__tzcalc_limits>
 80a5e90:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a5e92:	4b28      	ldr	r3, [pc, #160]	; (80a5f34 <_tzset_unlocked_r+0x2dc>)
 80a5e94:	601a      	str	r2, [r3, #0]
 80a5e96:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80a5e98:	1a9b      	subs	r3, r3, r2
 80a5e9a:	bf18      	it	ne
 80a5e9c:	2301      	movne	r3, #1
 80a5e9e:	4a27      	ldr	r2, [pc, #156]	; (80a5f3c <_tzset_unlocked_r+0x2e4>)
 80a5ea0:	6013      	str	r3, [r2, #0]
 80a5ea2:	e6f3      	b.n	80a5c8c <_tzset_unlocked_r+0x34>
 80a5ea4:	2b2b      	cmp	r3, #43	; 0x2b
 80a5ea6:	f04f 0701 	mov.w	r7, #1
 80a5eaa:	bf08      	it	eq
 80a5eac:	3401      	addeq	r4, #1
 80a5eae:	e770      	b.n	80a5d92 <_tzset_unlocked_r+0x13a>
 80a5eb0:	213c      	movs	r1, #60	; 0x3c
 80a5eb2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a5eb6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a5eba:	fb01 3302 	mla	r3, r1, r2, r3
 80a5ebe:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a5ec2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a5ec6:	fb01 3302 	mla	r3, r1, r2, r3
 80a5eca:	437b      	muls	r3, r7
 80a5ecc:	e778      	b.n	80a5dc0 <_tzset_unlocked_r+0x168>
 80a5ece:	f04f 0901 	mov.w	r9, #1
 80a5ed2:	e77b      	b.n	80a5dcc <_tzset_unlocked_r+0x174>
 80a5ed4:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a5ed8:	bf0a      	itet	eq
 80a5eda:	4643      	moveq	r3, r8
 80a5edc:	2344      	movne	r3, #68	; 0x44
 80a5ede:	3401      	addeq	r4, #1
 80a5ee0:	220a      	movs	r2, #10
 80a5ee2:	4620      	mov	r0, r4
 80a5ee4:	a90b      	add	r1, sp, #44	; 0x2c
 80a5ee6:	9305      	str	r3, [sp, #20]
 80a5ee8:	f7ff fdf6 	bl	80a5ad8 <strtoul>
 80a5eec:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a5ef0:	9b05      	ldr	r3, [sp, #20]
 80a5ef2:	45a0      	cmp	r8, r4
 80a5ef4:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a5ef8:	d114      	bne.n	80a5f24 <_tzset_unlocked_r+0x2cc>
 80a5efa:	234d      	movs	r3, #77	; 0x4d
 80a5efc:	f1b9 0f00 	cmp.w	r9, #0
 80a5f00:	d107      	bne.n	80a5f12 <_tzset_unlocked_r+0x2ba>
 80a5f02:	2103      	movs	r1, #3
 80a5f04:	722b      	strb	r3, [r5, #8]
 80a5f06:	2302      	movs	r3, #2
 80a5f08:	f8c5 9014 	str.w	r9, [r5, #20]
 80a5f0c:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80a5f10:	e78f      	b.n	80a5e32 <_tzset_unlocked_r+0x1da>
 80a5f12:	220b      	movs	r2, #11
 80a5f14:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80a5f18:	2301      	movs	r3, #1
 80a5f1a:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80a5f1e:	2300      	movs	r3, #0
 80a5f20:	63eb      	str	r3, [r5, #60]	; 0x3c
 80a5f22:	e786      	b.n	80a5e32 <_tzset_unlocked_r+0x1da>
 80a5f24:	b280      	uxth	r0, r0
 80a5f26:	723b      	strb	r3, [r7, #8]
 80a5f28:	6178      	str	r0, [r7, #20]
 80a5f2a:	e782      	b.n	80a5e32 <_tzset_unlocked_r+0x1da>
 80a5f2c:	080a7af0 	.word	0x080a7af0
 80a5f30:	200004e4 	.word	0x200004e4
 80a5f34:	200004ec 	.word	0x200004ec
 80a5f38:	080a7af3 	.word	0x080a7af3
 80a5f3c:	200004e8 	.word	0x200004e8
 80a5f40:	20000070 	.word	0x20000070
 80a5f44:	200004d7 	.word	0x200004d7
 80a5f48:	080a7af7 	.word	0x080a7af7
 80a5f4c:	080a7b1a 	.word	0x080a7b1a
 80a5f50:	200004cc 	.word	0x200004cc
 80a5f54:	080a7b06 	.word	0x080a7b06
 80a5f58:	080a7b19 	.word	0x080a7b19

080a5f5c <__register_exitproc>:
 80a5f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a5f60:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80a6010 <__register_exitproc+0xb4>
 80a5f64:	4606      	mov	r6, r0
 80a5f66:	f8d8 0000 	ldr.w	r0, [r8]
 80a5f6a:	461f      	mov	r7, r3
 80a5f6c:	460d      	mov	r5, r1
 80a5f6e:	4691      	mov	r9, r2
 80a5f70:	f000 fcbd 	bl	80a68ee <__retarget_lock_acquire_recursive>
 80a5f74:	4b27      	ldr	r3, [pc, #156]	; (80a6014 <__register_exitproc+0xb8>)
 80a5f76:	681c      	ldr	r4, [r3, #0]
 80a5f78:	b934      	cbnz	r4, 80a5f88 <__register_exitproc+0x2c>
 80a5f7a:	4c27      	ldr	r4, [pc, #156]	; (80a6018 <__register_exitproc+0xbc>)
 80a5f7c:	601c      	str	r4, [r3, #0]
 80a5f7e:	4b27      	ldr	r3, [pc, #156]	; (80a601c <__register_exitproc+0xc0>)
 80a5f80:	b113      	cbz	r3, 80a5f88 <__register_exitproc+0x2c>
 80a5f82:	681b      	ldr	r3, [r3, #0]
 80a5f84:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a5f88:	6863      	ldr	r3, [r4, #4]
 80a5f8a:	2b1f      	cmp	r3, #31
 80a5f8c:	dd07      	ble.n	80a5f9e <__register_exitproc+0x42>
 80a5f8e:	f8d8 0000 	ldr.w	r0, [r8]
 80a5f92:	f000 fcae 	bl	80a68f2 <__retarget_lock_release_recursive>
 80a5f96:	f04f 30ff 	mov.w	r0, #4294967295
 80a5f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a5f9e:	b35e      	cbz	r6, 80a5ff8 <__register_exitproc+0x9c>
 80a5fa0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a5fa4:	b988      	cbnz	r0, 80a5fca <__register_exitproc+0x6e>
 80a5fa6:	4b1e      	ldr	r3, [pc, #120]	; (80a6020 <__register_exitproc+0xc4>)
 80a5fa8:	b923      	cbnz	r3, 80a5fb4 <__register_exitproc+0x58>
 80a5faa:	f8d8 0000 	ldr.w	r0, [r8]
 80a5fae:	f000 fc9f 	bl	80a68f0 <__retarget_lock_release>
 80a5fb2:	e7f0      	b.n	80a5f96 <__register_exitproc+0x3a>
 80a5fb4:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a5fb8:	f7fb fae6 	bl	80a1588 <malloc>
 80a5fbc:	2800      	cmp	r0, #0
 80a5fbe:	d0f4      	beq.n	80a5faa <__register_exitproc+0x4e>
 80a5fc0:	2300      	movs	r3, #0
 80a5fc2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a5fc6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a5fca:	2201      	movs	r2, #1
 80a5fcc:	6863      	ldr	r3, [r4, #4]
 80a5fce:	2e02      	cmp	r6, #2
 80a5fd0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a5fd4:	fa02 f203 	lsl.w	r2, r2, r3
 80a5fd8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a5fdc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a5fe0:	ea43 0302 	orr.w	r3, r3, r2
 80a5fe4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a5fe8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a5fec:	bf02      	ittt	eq
 80a5fee:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a5ff2:	4313      	orreq	r3, r2
 80a5ff4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80a5ff8:	6863      	ldr	r3, [r4, #4]
 80a5ffa:	f8d8 0000 	ldr.w	r0, [r8]
 80a5ffe:	1c5a      	adds	r2, r3, #1
 80a6000:	3302      	adds	r3, #2
 80a6002:	6062      	str	r2, [r4, #4]
 80a6004:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a6008:	f000 fc73 	bl	80a68f2 <__retarget_lock_release_recursive>
 80a600c:	2000      	movs	r0, #0
 80a600e:	e7c4      	b.n	80a5f9a <__register_exitproc+0x3e>
 80a6010:	20000078 	.word	0x20000078
 80a6014:	2000057c 	.word	0x2000057c
 80a6018:	200004f0 	.word	0x200004f0
 80a601c:	00000000 	.word	0x00000000
 80a6020:	080a1589 	.word	0x080a1589

080a6024 <abs>:
 80a6024:	2800      	cmp	r0, #0
 80a6026:	bfb8      	it	lt
 80a6028:	4240      	neglt	r0, r0
 80a602a:	4770      	bx	lr

080a602c <rshift>:
 80a602c:	6903      	ldr	r3, [r0, #16]
 80a602e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a6032:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80a6036:	f100 0414 	add.w	r4, r0, #20
 80a603a:	ea4f 1261 	mov.w	r2, r1, asr #5
 80a603e:	dd46      	ble.n	80a60ce <rshift+0xa2>
 80a6040:	f011 011f 	ands.w	r1, r1, #31
 80a6044:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80a6048:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80a604c:	d10c      	bne.n	80a6068 <rshift+0x3c>
 80a604e:	4629      	mov	r1, r5
 80a6050:	f100 0710 	add.w	r7, r0, #16
 80a6054:	42b1      	cmp	r1, r6
 80a6056:	d335      	bcc.n	80a60c4 <rshift+0x98>
 80a6058:	1a9b      	subs	r3, r3, r2
 80a605a:	009b      	lsls	r3, r3, #2
 80a605c:	1eea      	subs	r2, r5, #3
 80a605e:	4296      	cmp	r6, r2
 80a6060:	bf38      	it	cc
 80a6062:	2300      	movcc	r3, #0
 80a6064:	4423      	add	r3, r4
 80a6066:	e015      	b.n	80a6094 <rshift+0x68>
 80a6068:	46a1      	mov	r9, r4
 80a606a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80a606e:	f1c1 0820 	rsb	r8, r1, #32
 80a6072:	40cf      	lsrs	r7, r1
 80a6074:	f105 0e04 	add.w	lr, r5, #4
 80a6078:	4576      	cmp	r6, lr
 80a607a:	46f4      	mov	ip, lr
 80a607c:	d816      	bhi.n	80a60ac <rshift+0x80>
 80a607e:	1a9a      	subs	r2, r3, r2
 80a6080:	0092      	lsls	r2, r2, #2
 80a6082:	3a04      	subs	r2, #4
 80a6084:	3501      	adds	r5, #1
 80a6086:	42ae      	cmp	r6, r5
 80a6088:	bf38      	it	cc
 80a608a:	2200      	movcc	r2, #0
 80a608c:	18a3      	adds	r3, r4, r2
 80a608e:	50a7      	str	r7, [r4, r2]
 80a6090:	b107      	cbz	r7, 80a6094 <rshift+0x68>
 80a6092:	3304      	adds	r3, #4
 80a6094:	42a3      	cmp	r3, r4
 80a6096:	eba3 0204 	sub.w	r2, r3, r4
 80a609a:	bf08      	it	eq
 80a609c:	2300      	moveq	r3, #0
 80a609e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80a60a2:	6102      	str	r2, [r0, #16]
 80a60a4:	bf08      	it	eq
 80a60a6:	6143      	streq	r3, [r0, #20]
 80a60a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a60ac:	f8dc c000 	ldr.w	ip, [ip]
 80a60b0:	fa0c fc08 	lsl.w	ip, ip, r8
 80a60b4:	ea4c 0707 	orr.w	r7, ip, r7
 80a60b8:	f849 7b04 	str.w	r7, [r9], #4
 80a60bc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80a60c0:	40cf      	lsrs	r7, r1
 80a60c2:	e7d9      	b.n	80a6078 <rshift+0x4c>
 80a60c4:	f851 cb04 	ldr.w	ip, [r1], #4
 80a60c8:	f847 cf04 	str.w	ip, [r7, #4]!
 80a60cc:	e7c2      	b.n	80a6054 <rshift+0x28>
 80a60ce:	4623      	mov	r3, r4
 80a60d0:	e7e0      	b.n	80a6094 <rshift+0x68>

080a60d2 <__hexdig_fun>:
 80a60d2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a60d6:	2b09      	cmp	r3, #9
 80a60d8:	d802      	bhi.n	80a60e0 <__hexdig_fun+0xe>
 80a60da:	3820      	subs	r0, #32
 80a60dc:	b2c0      	uxtb	r0, r0
 80a60de:	4770      	bx	lr
 80a60e0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80a60e4:	2b05      	cmp	r3, #5
 80a60e6:	d801      	bhi.n	80a60ec <__hexdig_fun+0x1a>
 80a60e8:	3847      	subs	r0, #71	; 0x47
 80a60ea:	e7f7      	b.n	80a60dc <__hexdig_fun+0xa>
 80a60ec:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80a60f0:	2b05      	cmp	r3, #5
 80a60f2:	d801      	bhi.n	80a60f8 <__hexdig_fun+0x26>
 80a60f4:	3827      	subs	r0, #39	; 0x27
 80a60f6:	e7f1      	b.n	80a60dc <__hexdig_fun+0xa>
 80a60f8:	2000      	movs	r0, #0
 80a60fa:	4770      	bx	lr

080a60fc <__gethex>:
 80a60fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6100:	b08b      	sub	sp, #44	; 0x2c
 80a6102:	9305      	str	r3, [sp, #20]
 80a6104:	4bb2      	ldr	r3, [pc, #712]	; (80a63d0 <__gethex+0x2d4>)
 80a6106:	9002      	str	r0, [sp, #8]
 80a6108:	681b      	ldr	r3, [r3, #0]
 80a610a:	468b      	mov	fp, r1
 80a610c:	4618      	mov	r0, r3
 80a610e:	4690      	mov	r8, r2
 80a6110:	9303      	str	r3, [sp, #12]
 80a6112:	f7fe fda5 	bl	80a4c60 <strlen>
 80a6116:	4682      	mov	sl, r0
 80a6118:	9b03      	ldr	r3, [sp, #12]
 80a611a:	f8db 2000 	ldr.w	r2, [fp]
 80a611e:	4403      	add	r3, r0
 80a6120:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80a6124:	9306      	str	r3, [sp, #24]
 80a6126:	1c93      	adds	r3, r2, #2
 80a6128:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80a612c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80a6130:	32fe      	adds	r2, #254	; 0xfe
 80a6132:	18d1      	adds	r1, r2, r3
 80a6134:	461f      	mov	r7, r3
 80a6136:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a613a:	9101      	str	r1, [sp, #4]
 80a613c:	2830      	cmp	r0, #48	; 0x30
 80a613e:	d0f8      	beq.n	80a6132 <__gethex+0x36>
 80a6140:	f7ff ffc7 	bl	80a60d2 <__hexdig_fun>
 80a6144:	4604      	mov	r4, r0
 80a6146:	2800      	cmp	r0, #0
 80a6148:	d13a      	bne.n	80a61c0 <__gethex+0xc4>
 80a614a:	4652      	mov	r2, sl
 80a614c:	4638      	mov	r0, r7
 80a614e:	9903      	ldr	r1, [sp, #12]
 80a6150:	f7fe fd8e 	bl	80a4c70 <strncmp>
 80a6154:	4605      	mov	r5, r0
 80a6156:	2800      	cmp	r0, #0
 80a6158:	d166      	bne.n	80a6228 <__gethex+0x12c>
 80a615a:	f817 000a 	ldrb.w	r0, [r7, sl]
 80a615e:	eb07 060a 	add.w	r6, r7, sl
 80a6162:	f7ff ffb6 	bl	80a60d2 <__hexdig_fun>
 80a6166:	2800      	cmp	r0, #0
 80a6168:	d060      	beq.n	80a622c <__gethex+0x130>
 80a616a:	4633      	mov	r3, r6
 80a616c:	7818      	ldrb	r0, [r3, #0]
 80a616e:	461f      	mov	r7, r3
 80a6170:	2830      	cmp	r0, #48	; 0x30
 80a6172:	f103 0301 	add.w	r3, r3, #1
 80a6176:	d0f9      	beq.n	80a616c <__gethex+0x70>
 80a6178:	f7ff ffab 	bl	80a60d2 <__hexdig_fun>
 80a617c:	2301      	movs	r3, #1
 80a617e:	fab0 f480 	clz	r4, r0
 80a6182:	4635      	mov	r5, r6
 80a6184:	0964      	lsrs	r4, r4, #5
 80a6186:	9301      	str	r3, [sp, #4]
 80a6188:	463a      	mov	r2, r7
 80a618a:	4616      	mov	r6, r2
 80a618c:	7830      	ldrb	r0, [r6, #0]
 80a618e:	3201      	adds	r2, #1
 80a6190:	f7ff ff9f 	bl	80a60d2 <__hexdig_fun>
 80a6194:	2800      	cmp	r0, #0
 80a6196:	d1f8      	bne.n	80a618a <__gethex+0x8e>
 80a6198:	4652      	mov	r2, sl
 80a619a:	4630      	mov	r0, r6
 80a619c:	9903      	ldr	r1, [sp, #12]
 80a619e:	f7fe fd67 	bl	80a4c70 <strncmp>
 80a61a2:	b980      	cbnz	r0, 80a61c6 <__gethex+0xca>
 80a61a4:	b94d      	cbnz	r5, 80a61ba <__gethex+0xbe>
 80a61a6:	eb06 050a 	add.w	r5, r6, sl
 80a61aa:	462a      	mov	r2, r5
 80a61ac:	4616      	mov	r6, r2
 80a61ae:	7830      	ldrb	r0, [r6, #0]
 80a61b0:	3201      	adds	r2, #1
 80a61b2:	f7ff ff8e 	bl	80a60d2 <__hexdig_fun>
 80a61b6:	2800      	cmp	r0, #0
 80a61b8:	d1f8      	bne.n	80a61ac <__gethex+0xb0>
 80a61ba:	1bad      	subs	r5, r5, r6
 80a61bc:	00ad      	lsls	r5, r5, #2
 80a61be:	e004      	b.n	80a61ca <__gethex+0xce>
 80a61c0:	2400      	movs	r4, #0
 80a61c2:	4625      	mov	r5, r4
 80a61c4:	e7e0      	b.n	80a6188 <__gethex+0x8c>
 80a61c6:	2d00      	cmp	r5, #0
 80a61c8:	d1f7      	bne.n	80a61ba <__gethex+0xbe>
 80a61ca:	7833      	ldrb	r3, [r6, #0]
 80a61cc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80a61d0:	2b50      	cmp	r3, #80	; 0x50
 80a61d2:	d139      	bne.n	80a6248 <__gethex+0x14c>
 80a61d4:	7873      	ldrb	r3, [r6, #1]
 80a61d6:	2b2b      	cmp	r3, #43	; 0x2b
 80a61d8:	d02a      	beq.n	80a6230 <__gethex+0x134>
 80a61da:	2b2d      	cmp	r3, #45	; 0x2d
 80a61dc:	d02c      	beq.n	80a6238 <__gethex+0x13c>
 80a61de:	f04f 0900 	mov.w	r9, #0
 80a61e2:	1c71      	adds	r1, r6, #1
 80a61e4:	7808      	ldrb	r0, [r1, #0]
 80a61e6:	f7ff ff74 	bl	80a60d2 <__hexdig_fun>
 80a61ea:	1e43      	subs	r3, r0, #1
 80a61ec:	b2db      	uxtb	r3, r3
 80a61ee:	2b18      	cmp	r3, #24
 80a61f0:	d82a      	bhi.n	80a6248 <__gethex+0x14c>
 80a61f2:	f1a0 0210 	sub.w	r2, r0, #16
 80a61f6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80a61fa:	f7ff ff6a 	bl	80a60d2 <__hexdig_fun>
 80a61fe:	1e43      	subs	r3, r0, #1
 80a6200:	b2db      	uxtb	r3, r3
 80a6202:	2b18      	cmp	r3, #24
 80a6204:	d91b      	bls.n	80a623e <__gethex+0x142>
 80a6206:	f1b9 0f00 	cmp.w	r9, #0
 80a620a:	d000      	beq.n	80a620e <__gethex+0x112>
 80a620c:	4252      	negs	r2, r2
 80a620e:	4415      	add	r5, r2
 80a6210:	f8cb 1000 	str.w	r1, [fp]
 80a6214:	b1d4      	cbz	r4, 80a624c <__gethex+0x150>
 80a6216:	9b01      	ldr	r3, [sp, #4]
 80a6218:	2b00      	cmp	r3, #0
 80a621a:	bf14      	ite	ne
 80a621c:	2700      	movne	r7, #0
 80a621e:	2706      	moveq	r7, #6
 80a6220:	4638      	mov	r0, r7
 80a6222:	b00b      	add	sp, #44	; 0x2c
 80a6224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6228:	463e      	mov	r6, r7
 80a622a:	4625      	mov	r5, r4
 80a622c:	2401      	movs	r4, #1
 80a622e:	e7cc      	b.n	80a61ca <__gethex+0xce>
 80a6230:	f04f 0900 	mov.w	r9, #0
 80a6234:	1cb1      	adds	r1, r6, #2
 80a6236:	e7d5      	b.n	80a61e4 <__gethex+0xe8>
 80a6238:	f04f 0901 	mov.w	r9, #1
 80a623c:	e7fa      	b.n	80a6234 <__gethex+0x138>
 80a623e:	230a      	movs	r3, #10
 80a6240:	fb03 0202 	mla	r2, r3, r2, r0
 80a6244:	3a10      	subs	r2, #16
 80a6246:	e7d6      	b.n	80a61f6 <__gethex+0xfa>
 80a6248:	4631      	mov	r1, r6
 80a624a:	e7e1      	b.n	80a6210 <__gethex+0x114>
 80a624c:	4621      	mov	r1, r4
 80a624e:	1bf3      	subs	r3, r6, r7
 80a6250:	3b01      	subs	r3, #1
 80a6252:	2b07      	cmp	r3, #7
 80a6254:	dc0a      	bgt.n	80a626c <__gethex+0x170>
 80a6256:	9802      	ldr	r0, [sp, #8]
 80a6258:	f000 fb5e 	bl	80a6918 <_Balloc>
 80a625c:	4604      	mov	r4, r0
 80a625e:	b940      	cbnz	r0, 80a6272 <__gethex+0x176>
 80a6260:	4602      	mov	r2, r0
 80a6262:	21de      	movs	r1, #222	; 0xde
 80a6264:	4b5b      	ldr	r3, [pc, #364]	; (80a63d4 <__gethex+0x2d8>)
 80a6266:	485c      	ldr	r0, [pc, #368]	; (80a63d8 <__gethex+0x2dc>)
 80a6268:	f7fb f9de 	bl	80a1628 <__assert_func>
 80a626c:	3101      	adds	r1, #1
 80a626e:	105b      	asrs	r3, r3, #1
 80a6270:	e7ef      	b.n	80a6252 <__gethex+0x156>
 80a6272:	f04f 0b00 	mov.w	fp, #0
 80a6276:	f100 0914 	add.w	r9, r0, #20
 80a627a:	f1ca 0301 	rsb	r3, sl, #1
 80a627e:	f8cd 9010 	str.w	r9, [sp, #16]
 80a6282:	f8cd b004 	str.w	fp, [sp, #4]
 80a6286:	9308      	str	r3, [sp, #32]
 80a6288:	42b7      	cmp	r7, r6
 80a628a:	d33f      	bcc.n	80a630c <__gethex+0x210>
 80a628c:	9f04      	ldr	r7, [sp, #16]
 80a628e:	9b01      	ldr	r3, [sp, #4]
 80a6290:	f847 3b04 	str.w	r3, [r7], #4
 80a6294:	eba7 0709 	sub.w	r7, r7, r9
 80a6298:	10bf      	asrs	r7, r7, #2
 80a629a:	6127      	str	r7, [r4, #16]
 80a629c:	4618      	mov	r0, r3
 80a629e:	f000 fc2d 	bl	80a6afc <__hi0bits>
 80a62a2:	017f      	lsls	r7, r7, #5
 80a62a4:	f8d8 6000 	ldr.w	r6, [r8]
 80a62a8:	1a3f      	subs	r7, r7, r0
 80a62aa:	42b7      	cmp	r7, r6
 80a62ac:	dd62      	ble.n	80a6374 <__gethex+0x278>
 80a62ae:	1bbf      	subs	r7, r7, r6
 80a62b0:	4639      	mov	r1, r7
 80a62b2:	4620      	mov	r0, r4
 80a62b4:	f000 ffc7 	bl	80a7246 <__any_on>
 80a62b8:	4682      	mov	sl, r0
 80a62ba:	b1a8      	cbz	r0, 80a62e8 <__gethex+0x1ec>
 80a62bc:	f04f 0a01 	mov.w	sl, #1
 80a62c0:	1e7b      	subs	r3, r7, #1
 80a62c2:	1159      	asrs	r1, r3, #5
 80a62c4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80a62c8:	f003 021f 	and.w	r2, r3, #31
 80a62cc:	fa0a f202 	lsl.w	r2, sl, r2
 80a62d0:	420a      	tst	r2, r1
 80a62d2:	d009      	beq.n	80a62e8 <__gethex+0x1ec>
 80a62d4:	4553      	cmp	r3, sl
 80a62d6:	dd05      	ble.n	80a62e4 <__gethex+0x1e8>
 80a62d8:	4620      	mov	r0, r4
 80a62da:	1eb9      	subs	r1, r7, #2
 80a62dc:	f000 ffb3 	bl	80a7246 <__any_on>
 80a62e0:	2800      	cmp	r0, #0
 80a62e2:	d144      	bne.n	80a636e <__gethex+0x272>
 80a62e4:	f04f 0a02 	mov.w	sl, #2
 80a62e8:	4639      	mov	r1, r7
 80a62ea:	4620      	mov	r0, r4
 80a62ec:	f7ff fe9e 	bl	80a602c <rshift>
 80a62f0:	443d      	add	r5, r7
 80a62f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a62f6:	42ab      	cmp	r3, r5
 80a62f8:	da4a      	bge.n	80a6390 <__gethex+0x294>
 80a62fa:	4621      	mov	r1, r4
 80a62fc:	9802      	ldr	r0, [sp, #8]
 80a62fe:	f000 fb4b 	bl	80a6998 <_Bfree>
 80a6302:	2300      	movs	r3, #0
 80a6304:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a6306:	27a3      	movs	r7, #163	; 0xa3
 80a6308:	6013      	str	r3, [r2, #0]
 80a630a:	e789      	b.n	80a6220 <__gethex+0x124>
 80a630c:	1e73      	subs	r3, r6, #1
 80a630e:	9a06      	ldr	r2, [sp, #24]
 80a6310:	9307      	str	r3, [sp, #28]
 80a6312:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80a6316:	4293      	cmp	r3, r2
 80a6318:	d019      	beq.n	80a634e <__gethex+0x252>
 80a631a:	f1bb 0f20 	cmp.w	fp, #32
 80a631e:	d107      	bne.n	80a6330 <__gethex+0x234>
 80a6320:	9b04      	ldr	r3, [sp, #16]
 80a6322:	9a01      	ldr	r2, [sp, #4]
 80a6324:	f843 2b04 	str.w	r2, [r3], #4
 80a6328:	9304      	str	r3, [sp, #16]
 80a632a:	2300      	movs	r3, #0
 80a632c:	469b      	mov	fp, r3
 80a632e:	9301      	str	r3, [sp, #4]
 80a6330:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80a6334:	f7ff fecd 	bl	80a60d2 <__hexdig_fun>
 80a6338:	9b01      	ldr	r3, [sp, #4]
 80a633a:	f000 000f 	and.w	r0, r0, #15
 80a633e:	fa00 f00b 	lsl.w	r0, r0, fp
 80a6342:	4303      	orrs	r3, r0
 80a6344:	9301      	str	r3, [sp, #4]
 80a6346:	f10b 0b04 	add.w	fp, fp, #4
 80a634a:	9b07      	ldr	r3, [sp, #28]
 80a634c:	e00d      	b.n	80a636a <__gethex+0x26e>
 80a634e:	9a08      	ldr	r2, [sp, #32]
 80a6350:	1e73      	subs	r3, r6, #1
 80a6352:	4413      	add	r3, r2
 80a6354:	42bb      	cmp	r3, r7
 80a6356:	d3e0      	bcc.n	80a631a <__gethex+0x21e>
 80a6358:	4618      	mov	r0, r3
 80a635a:	4652      	mov	r2, sl
 80a635c:	9903      	ldr	r1, [sp, #12]
 80a635e:	9309      	str	r3, [sp, #36]	; 0x24
 80a6360:	f7fe fc86 	bl	80a4c70 <strncmp>
 80a6364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a6366:	2800      	cmp	r0, #0
 80a6368:	d1d7      	bne.n	80a631a <__gethex+0x21e>
 80a636a:	461e      	mov	r6, r3
 80a636c:	e78c      	b.n	80a6288 <__gethex+0x18c>
 80a636e:	f04f 0a03 	mov.w	sl, #3
 80a6372:	e7b9      	b.n	80a62e8 <__gethex+0x1ec>
 80a6374:	da09      	bge.n	80a638a <__gethex+0x28e>
 80a6376:	1bf7      	subs	r7, r6, r7
 80a6378:	4621      	mov	r1, r4
 80a637a:	463a      	mov	r2, r7
 80a637c:	9802      	ldr	r0, [sp, #8]
 80a637e:	f000 fd23 	bl	80a6dc8 <__lshift>
 80a6382:	4604      	mov	r4, r0
 80a6384:	1bed      	subs	r5, r5, r7
 80a6386:	f100 0914 	add.w	r9, r0, #20
 80a638a:	f04f 0a00 	mov.w	sl, #0
 80a638e:	e7b0      	b.n	80a62f2 <__gethex+0x1f6>
 80a6390:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80a6394:	42a8      	cmp	r0, r5
 80a6396:	dd72      	ble.n	80a647e <__gethex+0x382>
 80a6398:	1b45      	subs	r5, r0, r5
 80a639a:	42ae      	cmp	r6, r5
 80a639c:	dc35      	bgt.n	80a640a <__gethex+0x30e>
 80a639e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a63a2:	2b02      	cmp	r3, #2
 80a63a4:	d029      	beq.n	80a63fa <__gethex+0x2fe>
 80a63a6:	2b03      	cmp	r3, #3
 80a63a8:	d02b      	beq.n	80a6402 <__gethex+0x306>
 80a63aa:	2b01      	cmp	r3, #1
 80a63ac:	d11c      	bne.n	80a63e8 <__gethex+0x2ec>
 80a63ae:	42ae      	cmp	r6, r5
 80a63b0:	d11a      	bne.n	80a63e8 <__gethex+0x2ec>
 80a63b2:	2e01      	cmp	r6, #1
 80a63b4:	d112      	bne.n	80a63dc <__gethex+0x2e0>
 80a63b6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a63ba:	9a05      	ldr	r2, [sp, #20]
 80a63bc:	2762      	movs	r7, #98	; 0x62
 80a63be:	6013      	str	r3, [r2, #0]
 80a63c0:	2301      	movs	r3, #1
 80a63c2:	6123      	str	r3, [r4, #16]
 80a63c4:	f8c9 3000 	str.w	r3, [r9]
 80a63c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a63ca:	601c      	str	r4, [r3, #0]
 80a63cc:	e728      	b.n	80a6220 <__gethex+0x124>
 80a63ce:	bf00      	nop
 80a63d0:	080a7cc4 	.word	0x080a7cc4
 80a63d4:	080a7c2d 	.word	0x080a7c2d
 80a63d8:	080a7c3e 	.word	0x080a7c3e
 80a63dc:	4620      	mov	r0, r4
 80a63de:	1e71      	subs	r1, r6, #1
 80a63e0:	f000 ff31 	bl	80a7246 <__any_on>
 80a63e4:	2800      	cmp	r0, #0
 80a63e6:	d1e6      	bne.n	80a63b6 <__gethex+0x2ba>
 80a63e8:	4621      	mov	r1, r4
 80a63ea:	9802      	ldr	r0, [sp, #8]
 80a63ec:	f000 fad4 	bl	80a6998 <_Bfree>
 80a63f0:	2300      	movs	r3, #0
 80a63f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a63f4:	2750      	movs	r7, #80	; 0x50
 80a63f6:	6013      	str	r3, [r2, #0]
 80a63f8:	e712      	b.n	80a6220 <__gethex+0x124>
 80a63fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a63fc:	2b00      	cmp	r3, #0
 80a63fe:	d1f3      	bne.n	80a63e8 <__gethex+0x2ec>
 80a6400:	e7d9      	b.n	80a63b6 <__gethex+0x2ba>
 80a6402:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a6404:	2b00      	cmp	r3, #0
 80a6406:	d1d6      	bne.n	80a63b6 <__gethex+0x2ba>
 80a6408:	e7ee      	b.n	80a63e8 <__gethex+0x2ec>
 80a640a:	1e6f      	subs	r7, r5, #1
 80a640c:	f1ba 0f00 	cmp.w	sl, #0
 80a6410:	d132      	bne.n	80a6478 <__gethex+0x37c>
 80a6412:	b127      	cbz	r7, 80a641e <__gethex+0x322>
 80a6414:	4639      	mov	r1, r7
 80a6416:	4620      	mov	r0, r4
 80a6418:	f000 ff15 	bl	80a7246 <__any_on>
 80a641c:	4682      	mov	sl, r0
 80a641e:	2101      	movs	r1, #1
 80a6420:	117b      	asrs	r3, r7, #5
 80a6422:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80a6426:	f007 071f 	and.w	r7, r7, #31
 80a642a:	fa01 f707 	lsl.w	r7, r1, r7
 80a642e:	421f      	tst	r7, r3
 80a6430:	f04f 0702 	mov.w	r7, #2
 80a6434:	4629      	mov	r1, r5
 80a6436:	4620      	mov	r0, r4
 80a6438:	bf18      	it	ne
 80a643a:	f04a 0a02 	orrne.w	sl, sl, #2
 80a643e:	1b76      	subs	r6, r6, r5
 80a6440:	f7ff fdf4 	bl	80a602c <rshift>
 80a6444:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80a6448:	f1ba 0f00 	cmp.w	sl, #0
 80a644c:	d048      	beq.n	80a64e0 <__gethex+0x3e4>
 80a644e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a6452:	2b02      	cmp	r3, #2
 80a6454:	d015      	beq.n	80a6482 <__gethex+0x386>
 80a6456:	2b03      	cmp	r3, #3
 80a6458:	d017      	beq.n	80a648a <__gethex+0x38e>
 80a645a:	2b01      	cmp	r3, #1
 80a645c:	d109      	bne.n	80a6472 <__gethex+0x376>
 80a645e:	f01a 0f02 	tst.w	sl, #2
 80a6462:	d006      	beq.n	80a6472 <__gethex+0x376>
 80a6464:	f8d9 0000 	ldr.w	r0, [r9]
 80a6468:	ea4a 0a00 	orr.w	sl, sl, r0
 80a646c:	f01a 0f01 	tst.w	sl, #1
 80a6470:	d10e      	bne.n	80a6490 <__gethex+0x394>
 80a6472:	f047 0710 	orr.w	r7, r7, #16
 80a6476:	e033      	b.n	80a64e0 <__gethex+0x3e4>
 80a6478:	f04f 0a01 	mov.w	sl, #1
 80a647c:	e7cf      	b.n	80a641e <__gethex+0x322>
 80a647e:	2701      	movs	r7, #1
 80a6480:	e7e2      	b.n	80a6448 <__gethex+0x34c>
 80a6482:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a6484:	f1c3 0301 	rsb	r3, r3, #1
 80a6488:	9315      	str	r3, [sp, #84]	; 0x54
 80a648a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a648c:	2b00      	cmp	r3, #0
 80a648e:	d0f0      	beq.n	80a6472 <__gethex+0x376>
 80a6490:	f04f 0c00 	mov.w	ip, #0
 80a6494:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80a6498:	f104 0314 	add.w	r3, r4, #20
 80a649c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80a64a0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80a64a4:	4618      	mov	r0, r3
 80a64a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80a64aa:	f1b2 3fff 	cmp.w	r2, #4294967295
 80a64ae:	d01c      	beq.n	80a64ea <__gethex+0x3ee>
 80a64b0:	3201      	adds	r2, #1
 80a64b2:	6002      	str	r2, [r0, #0]
 80a64b4:	2f02      	cmp	r7, #2
 80a64b6:	f104 0314 	add.w	r3, r4, #20
 80a64ba:	d13d      	bne.n	80a6538 <__gethex+0x43c>
 80a64bc:	f8d8 2000 	ldr.w	r2, [r8]
 80a64c0:	3a01      	subs	r2, #1
 80a64c2:	42b2      	cmp	r2, r6
 80a64c4:	d10a      	bne.n	80a64dc <__gethex+0x3e0>
 80a64c6:	2201      	movs	r2, #1
 80a64c8:	1171      	asrs	r1, r6, #5
 80a64ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80a64ce:	f006 061f 	and.w	r6, r6, #31
 80a64d2:	fa02 f606 	lsl.w	r6, r2, r6
 80a64d6:	421e      	tst	r6, r3
 80a64d8:	bf18      	it	ne
 80a64da:	4617      	movne	r7, r2
 80a64dc:	f047 0720 	orr.w	r7, r7, #32
 80a64e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a64e2:	601c      	str	r4, [r3, #0]
 80a64e4:	9b05      	ldr	r3, [sp, #20]
 80a64e6:	601d      	str	r5, [r3, #0]
 80a64e8:	e69a      	b.n	80a6220 <__gethex+0x124>
 80a64ea:	4299      	cmp	r1, r3
 80a64ec:	f843 cc04 	str.w	ip, [r3, #-4]
 80a64f0:	d8d8      	bhi.n	80a64a4 <__gethex+0x3a8>
 80a64f2:	68a3      	ldr	r3, [r4, #8]
 80a64f4:	459b      	cmp	fp, r3
 80a64f6:	db17      	blt.n	80a6528 <__gethex+0x42c>
 80a64f8:	6861      	ldr	r1, [r4, #4]
 80a64fa:	9802      	ldr	r0, [sp, #8]
 80a64fc:	3101      	adds	r1, #1
 80a64fe:	f000 fa0b 	bl	80a6918 <_Balloc>
 80a6502:	4681      	mov	r9, r0
 80a6504:	b918      	cbnz	r0, 80a650e <__gethex+0x412>
 80a6506:	4602      	mov	r2, r0
 80a6508:	2184      	movs	r1, #132	; 0x84
 80a650a:	4b19      	ldr	r3, [pc, #100]	; (80a6570 <__gethex+0x474>)
 80a650c:	e6ab      	b.n	80a6266 <__gethex+0x16a>
 80a650e:	6922      	ldr	r2, [r4, #16]
 80a6510:	f104 010c 	add.w	r1, r4, #12
 80a6514:	3202      	adds	r2, #2
 80a6516:	0092      	lsls	r2, r2, #2
 80a6518:	300c      	adds	r0, #12
 80a651a:	f7fd fdf9 	bl	80a4110 <memcpy>
 80a651e:	4621      	mov	r1, r4
 80a6520:	9802      	ldr	r0, [sp, #8]
 80a6522:	f000 fa39 	bl	80a6998 <_Bfree>
 80a6526:	464c      	mov	r4, r9
 80a6528:	6923      	ldr	r3, [r4, #16]
 80a652a:	1c5a      	adds	r2, r3, #1
 80a652c:	6122      	str	r2, [r4, #16]
 80a652e:	2201      	movs	r2, #1
 80a6530:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80a6534:	615a      	str	r2, [r3, #20]
 80a6536:	e7bd      	b.n	80a64b4 <__gethex+0x3b8>
 80a6538:	6922      	ldr	r2, [r4, #16]
 80a653a:	455a      	cmp	r2, fp
 80a653c:	dd0b      	ble.n	80a6556 <__gethex+0x45a>
 80a653e:	2101      	movs	r1, #1
 80a6540:	4620      	mov	r0, r4
 80a6542:	f7ff fd73 	bl	80a602c <rshift>
 80a6546:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a654a:	3501      	adds	r5, #1
 80a654c:	42ab      	cmp	r3, r5
 80a654e:	f6ff aed4 	blt.w	80a62fa <__gethex+0x1fe>
 80a6552:	2701      	movs	r7, #1
 80a6554:	e7c2      	b.n	80a64dc <__gethex+0x3e0>
 80a6556:	f016 061f 	ands.w	r6, r6, #31
 80a655a:	d0fa      	beq.n	80a6552 <__gethex+0x456>
 80a655c:	4453      	add	r3, sl
 80a655e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80a6562:	f000 facb 	bl	80a6afc <__hi0bits>
 80a6566:	f1c6 0620 	rsb	r6, r6, #32
 80a656a:	42b0      	cmp	r0, r6
 80a656c:	dbe7      	blt.n	80a653e <__gethex+0x442>
 80a656e:	e7f0      	b.n	80a6552 <__gethex+0x456>
 80a6570:	080a7c2d 	.word	0x080a7c2d

080a6574 <L_shift>:
 80a6574:	f1c2 0208 	rsb	r2, r2, #8
 80a6578:	0092      	lsls	r2, r2, #2
 80a657a:	b570      	push	{r4, r5, r6, lr}
 80a657c:	f1c2 0620 	rsb	r6, r2, #32
 80a6580:	6843      	ldr	r3, [r0, #4]
 80a6582:	6804      	ldr	r4, [r0, #0]
 80a6584:	fa03 f506 	lsl.w	r5, r3, r6
 80a6588:	432c      	orrs	r4, r5
 80a658a:	40d3      	lsrs	r3, r2
 80a658c:	6004      	str	r4, [r0, #0]
 80a658e:	f840 3f04 	str.w	r3, [r0, #4]!
 80a6592:	4288      	cmp	r0, r1
 80a6594:	d3f4      	bcc.n	80a6580 <L_shift+0xc>
 80a6596:	bd70      	pop	{r4, r5, r6, pc}

080a6598 <__match>:
 80a6598:	b530      	push	{r4, r5, lr}
 80a659a:	6803      	ldr	r3, [r0, #0]
 80a659c:	3301      	adds	r3, #1
 80a659e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a65a2:	b914      	cbnz	r4, 80a65aa <__match+0x12>
 80a65a4:	6003      	str	r3, [r0, #0]
 80a65a6:	2001      	movs	r0, #1
 80a65a8:	bd30      	pop	{r4, r5, pc}
 80a65aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a65ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80a65b2:	2d19      	cmp	r5, #25
 80a65b4:	bf98      	it	ls
 80a65b6:	3220      	addls	r2, #32
 80a65b8:	42a2      	cmp	r2, r4
 80a65ba:	d0f0      	beq.n	80a659e <__match+0x6>
 80a65bc:	2000      	movs	r0, #0
 80a65be:	e7f3      	b.n	80a65a8 <__match+0x10>

080a65c0 <__hexnan>:
 80a65c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a65c4:	2500      	movs	r5, #0
 80a65c6:	680b      	ldr	r3, [r1, #0]
 80a65c8:	4682      	mov	sl, r0
 80a65ca:	115e      	asrs	r6, r3, #5
 80a65cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80a65d0:	f013 031f 	ands.w	r3, r3, #31
 80a65d4:	bf18      	it	ne
 80a65d6:	3604      	addne	r6, #4
 80a65d8:	1f37      	subs	r7, r6, #4
 80a65da:	46b9      	mov	r9, r7
 80a65dc:	463c      	mov	r4, r7
 80a65de:	46ab      	mov	fp, r5
 80a65e0:	b087      	sub	sp, #28
 80a65e2:	4690      	mov	r8, r2
 80a65e4:	6802      	ldr	r2, [r0, #0]
 80a65e6:	9301      	str	r3, [sp, #4]
 80a65e8:	f846 5c04 	str.w	r5, [r6, #-4]
 80a65ec:	9502      	str	r5, [sp, #8]
 80a65ee:	7851      	ldrb	r1, [r2, #1]
 80a65f0:	1c53      	adds	r3, r2, #1
 80a65f2:	9303      	str	r3, [sp, #12]
 80a65f4:	b341      	cbz	r1, 80a6648 <__hexnan+0x88>
 80a65f6:	4608      	mov	r0, r1
 80a65f8:	9205      	str	r2, [sp, #20]
 80a65fa:	9104      	str	r1, [sp, #16]
 80a65fc:	f7ff fd69 	bl	80a60d2 <__hexdig_fun>
 80a6600:	2800      	cmp	r0, #0
 80a6602:	d14f      	bne.n	80a66a4 <__hexnan+0xe4>
 80a6604:	9904      	ldr	r1, [sp, #16]
 80a6606:	9a05      	ldr	r2, [sp, #20]
 80a6608:	2920      	cmp	r1, #32
 80a660a:	d818      	bhi.n	80a663e <__hexnan+0x7e>
 80a660c:	9b02      	ldr	r3, [sp, #8]
 80a660e:	459b      	cmp	fp, r3
 80a6610:	dd13      	ble.n	80a663a <__hexnan+0x7a>
 80a6612:	454c      	cmp	r4, r9
 80a6614:	d206      	bcs.n	80a6624 <__hexnan+0x64>
 80a6616:	2d07      	cmp	r5, #7
 80a6618:	dc04      	bgt.n	80a6624 <__hexnan+0x64>
 80a661a:	462a      	mov	r2, r5
 80a661c:	4649      	mov	r1, r9
 80a661e:	4620      	mov	r0, r4
 80a6620:	f7ff ffa8 	bl	80a6574 <L_shift>
 80a6624:	4544      	cmp	r4, r8
 80a6626:	d950      	bls.n	80a66ca <__hexnan+0x10a>
 80a6628:	2300      	movs	r3, #0
 80a662a:	f1a4 0904 	sub.w	r9, r4, #4
 80a662e:	f844 3c04 	str.w	r3, [r4, #-4]
 80a6632:	461d      	mov	r5, r3
 80a6634:	464c      	mov	r4, r9
 80a6636:	f8cd b008 	str.w	fp, [sp, #8]
 80a663a:	9a03      	ldr	r2, [sp, #12]
 80a663c:	e7d7      	b.n	80a65ee <__hexnan+0x2e>
 80a663e:	2929      	cmp	r1, #41	; 0x29
 80a6640:	d156      	bne.n	80a66f0 <__hexnan+0x130>
 80a6642:	3202      	adds	r2, #2
 80a6644:	f8ca 2000 	str.w	r2, [sl]
 80a6648:	f1bb 0f00 	cmp.w	fp, #0
 80a664c:	d050      	beq.n	80a66f0 <__hexnan+0x130>
 80a664e:	454c      	cmp	r4, r9
 80a6650:	d206      	bcs.n	80a6660 <__hexnan+0xa0>
 80a6652:	2d07      	cmp	r5, #7
 80a6654:	dc04      	bgt.n	80a6660 <__hexnan+0xa0>
 80a6656:	462a      	mov	r2, r5
 80a6658:	4649      	mov	r1, r9
 80a665a:	4620      	mov	r0, r4
 80a665c:	f7ff ff8a 	bl	80a6574 <L_shift>
 80a6660:	4544      	cmp	r4, r8
 80a6662:	d934      	bls.n	80a66ce <__hexnan+0x10e>
 80a6664:	4623      	mov	r3, r4
 80a6666:	f1a8 0204 	sub.w	r2, r8, #4
 80a666a:	f853 1b04 	ldr.w	r1, [r3], #4
 80a666e:	429f      	cmp	r7, r3
 80a6670:	f842 1f04 	str.w	r1, [r2, #4]!
 80a6674:	d2f9      	bcs.n	80a666a <__hexnan+0xaa>
 80a6676:	1b3b      	subs	r3, r7, r4
 80a6678:	f023 0303 	bic.w	r3, r3, #3
 80a667c:	3304      	adds	r3, #4
 80a667e:	3401      	adds	r4, #1
 80a6680:	3e03      	subs	r6, #3
 80a6682:	42b4      	cmp	r4, r6
 80a6684:	bf88      	it	hi
 80a6686:	2304      	movhi	r3, #4
 80a6688:	2200      	movs	r2, #0
 80a668a:	4443      	add	r3, r8
 80a668c:	f843 2b04 	str.w	r2, [r3], #4
 80a6690:	429f      	cmp	r7, r3
 80a6692:	d2fb      	bcs.n	80a668c <__hexnan+0xcc>
 80a6694:	683b      	ldr	r3, [r7, #0]
 80a6696:	b91b      	cbnz	r3, 80a66a0 <__hexnan+0xe0>
 80a6698:	4547      	cmp	r7, r8
 80a669a:	d127      	bne.n	80a66ec <__hexnan+0x12c>
 80a669c:	2301      	movs	r3, #1
 80a669e:	603b      	str	r3, [r7, #0]
 80a66a0:	2005      	movs	r0, #5
 80a66a2:	e026      	b.n	80a66f2 <__hexnan+0x132>
 80a66a4:	3501      	adds	r5, #1
 80a66a6:	2d08      	cmp	r5, #8
 80a66a8:	f10b 0b01 	add.w	fp, fp, #1
 80a66ac:	dd06      	ble.n	80a66bc <__hexnan+0xfc>
 80a66ae:	4544      	cmp	r4, r8
 80a66b0:	d9c3      	bls.n	80a663a <__hexnan+0x7a>
 80a66b2:	2300      	movs	r3, #0
 80a66b4:	2501      	movs	r5, #1
 80a66b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80a66ba:	3c04      	subs	r4, #4
 80a66bc:	6822      	ldr	r2, [r4, #0]
 80a66be:	f000 000f 	and.w	r0, r0, #15
 80a66c2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80a66c6:	6022      	str	r2, [r4, #0]
 80a66c8:	e7b7      	b.n	80a663a <__hexnan+0x7a>
 80a66ca:	2508      	movs	r5, #8
 80a66cc:	e7b5      	b.n	80a663a <__hexnan+0x7a>
 80a66ce:	9b01      	ldr	r3, [sp, #4]
 80a66d0:	2b00      	cmp	r3, #0
 80a66d2:	d0df      	beq.n	80a6694 <__hexnan+0xd4>
 80a66d4:	f04f 32ff 	mov.w	r2, #4294967295
 80a66d8:	f1c3 0320 	rsb	r3, r3, #32
 80a66dc:	fa22 f303 	lsr.w	r3, r2, r3
 80a66e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80a66e4:	401a      	ands	r2, r3
 80a66e6:	f846 2c04 	str.w	r2, [r6, #-4]
 80a66ea:	e7d3      	b.n	80a6694 <__hexnan+0xd4>
 80a66ec:	3f04      	subs	r7, #4
 80a66ee:	e7d1      	b.n	80a6694 <__hexnan+0xd4>
 80a66f0:	2004      	movs	r0, #4
 80a66f2:	b007      	add	sp, #28
 80a66f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a66f8 <_findenv_r>:
 80a66f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a66fc:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80a676c <_findenv_r+0x74>
 80a6700:	4607      	mov	r7, r0
 80a6702:	4689      	mov	r9, r1
 80a6704:	4616      	mov	r6, r2
 80a6706:	f000 fddb 	bl	80a72c0 <__env_lock>
 80a670a:	f8da 4000 	ldr.w	r4, [sl]
 80a670e:	b134      	cbz	r4, 80a671e <_findenv_r+0x26>
 80a6710:	464b      	mov	r3, r9
 80a6712:	4698      	mov	r8, r3
 80a6714:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a6718:	b13a      	cbz	r2, 80a672a <_findenv_r+0x32>
 80a671a:	2a3d      	cmp	r2, #61	; 0x3d
 80a671c:	d1f9      	bne.n	80a6712 <_findenv_r+0x1a>
 80a671e:	4638      	mov	r0, r7
 80a6720:	f000 fdd4 	bl	80a72cc <__env_unlock>
 80a6724:	2000      	movs	r0, #0
 80a6726:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a672a:	eba8 0809 	sub.w	r8, r8, r9
 80a672e:	46a3      	mov	fp, r4
 80a6730:	f854 0b04 	ldr.w	r0, [r4], #4
 80a6734:	2800      	cmp	r0, #0
 80a6736:	d0f2      	beq.n	80a671e <_findenv_r+0x26>
 80a6738:	4642      	mov	r2, r8
 80a673a:	4649      	mov	r1, r9
 80a673c:	f7fe fa98 	bl	80a4c70 <strncmp>
 80a6740:	2800      	cmp	r0, #0
 80a6742:	d1f4      	bne.n	80a672e <_findenv_r+0x36>
 80a6744:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80a6748:	eb03 0508 	add.w	r5, r3, r8
 80a674c:	f813 3008 	ldrb.w	r3, [r3, r8]
 80a6750:	2b3d      	cmp	r3, #61	; 0x3d
 80a6752:	d1ec      	bne.n	80a672e <_findenv_r+0x36>
 80a6754:	f8da 3000 	ldr.w	r3, [sl]
 80a6758:	4638      	mov	r0, r7
 80a675a:	ebab 0303 	sub.w	r3, fp, r3
 80a675e:	109b      	asrs	r3, r3, #2
 80a6760:	6033      	str	r3, [r6, #0]
 80a6762:	f000 fdb3 	bl	80a72cc <__env_unlock>
 80a6766:	1c68      	adds	r0, r5, #1
 80a6768:	e7dd      	b.n	80a6726 <_findenv_r+0x2e>
 80a676a:	bf00      	nop
 80a676c:	20000248 	.word	0x20000248

080a6770 <_getenv_r>:
 80a6770:	b507      	push	{r0, r1, r2, lr}
 80a6772:	aa01      	add	r2, sp, #4
 80a6774:	f7ff ffc0 	bl	80a66f8 <_findenv_r>
 80a6778:	b003      	add	sp, #12
 80a677a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a6780 <__gettzinfo>:
 80a6780:	4800      	ldr	r0, [pc, #0]	; (80a6784 <__gettzinfo+0x4>)
 80a6782:	4770      	bx	lr
 80a6784:	20000080 	.word	0x20000080

080a6788 <gmtime_r>:
 80a6788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a678c:	e9d0 6700 	ldrd	r6, r7, [r0]
 80a6790:	460c      	mov	r4, r1
 80a6792:	2300      	movs	r3, #0
 80a6794:	4630      	mov	r0, r6
 80a6796:	4639      	mov	r1, r7
 80a6798:	4a4e      	ldr	r2, [pc, #312]	; (80a68d4 <gmtime_r+0x14c>)
 80a679a:	f000 fd9d 	bl	80a72d8 <__aeabi_ldivmod>
 80a679e:	4639      	mov	r1, r7
 80a67a0:	4605      	mov	r5, r0
 80a67a2:	2300      	movs	r3, #0
 80a67a4:	4630      	mov	r0, r6
 80a67a6:	4a4b      	ldr	r2, [pc, #300]	; (80a68d4 <gmtime_r+0x14c>)
 80a67a8:	f000 fd96 	bl	80a72d8 <__aeabi_ldivmod>
 80a67ac:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80a67b0:	2a00      	cmp	r2, #0
 80a67b2:	bfbc      	itt	lt
 80a67b4:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a67b8:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a67bc:	fbb2 f1f0 	udiv	r1, r2, r0
 80a67c0:	fb00 2211 	mls	r2, r0, r1, r2
 80a67c4:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80a67c8:	60a1      	str	r1, [r4, #8]
 80a67ca:	fbb2 f1f0 	udiv	r1, r2, r0
 80a67ce:	fb00 2211 	mls	r2, r0, r1, r2
 80a67d2:	6061      	str	r1, [r4, #4]
 80a67d4:	f04f 0107 	mov.w	r1, #7
 80a67d8:	f505 232f 	add.w	r3, r5, #716800	; 0xaf000
 80a67dc:	bfac      	ite	ge
 80a67de:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
 80a67e2:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
 80a67e6:	6022      	str	r2, [r4, #0]
 80a67e8:	1cda      	adds	r2, r3, #3
 80a67ea:	fb92 f1f1 	sdiv	r1, r2, r1
 80a67ee:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80a67f2:	1a52      	subs	r2, r2, r1
 80a67f4:	bf48      	it	mi
 80a67f6:	3207      	addmi	r2, #7
 80a67f8:	2b00      	cmp	r3, #0
 80a67fa:	4d37      	ldr	r5, [pc, #220]	; (80a68d8 <gmtime_r+0x150>)
 80a67fc:	61a2      	str	r2, [r4, #24]
 80a67fe:	bfbd      	ittte	lt
 80a6800:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 80a6804:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 80a6808:	fb92 f5f5 	sdivlt	r5, r2, r5
 80a680c:	fb93 f5f5 	sdivge	r5, r3, r5
 80a6810:	4832      	ldr	r0, [pc, #200]	; (80a68dc <gmtime_r+0x154>)
 80a6812:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a6816:	fb00 3005 	mla	r0, r0, r5, r3
 80a681a:	f240 53b4 	movw	r3, #1460	; 0x5b4
 80a681e:	fbb0 f2f2 	udiv	r2, r0, r2
 80a6822:	fbb0 f1f3 	udiv	r1, r0, r3
 80a6826:	4402      	add	r2, r0
 80a6828:	1a52      	subs	r2, r2, r1
 80a682a:	492d      	ldr	r1, [pc, #180]	; (80a68e0 <gmtime_r+0x158>)
 80a682c:	f240 1c6d 	movw	ip, #365	; 0x16d
 80a6830:	fbb0 f1f1 	udiv	r1, r0, r1
 80a6834:	1a52      	subs	r2, r2, r1
 80a6836:	fbb2 f1fc 	udiv	r1, r2, ip
 80a683a:	2764      	movs	r7, #100	; 0x64
 80a683c:	fbb2 f3f3 	udiv	r3, r2, r3
 80a6840:	fbb1 f6f7 	udiv	r6, r1, r7
 80a6844:	2299      	movs	r2, #153	; 0x99
 80a6846:	1af3      	subs	r3, r6, r3
 80a6848:	4403      	add	r3, r0
 80a684a:	fb0c 3311 	mls	r3, ip, r1, r3
 80a684e:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 80a6852:	f10e 0e02 	add.w	lr, lr, #2
 80a6856:	fbbe f0f2 	udiv	r0, lr, r2
 80a685a:	f04f 0805 	mov.w	r8, #5
 80a685e:	4342      	muls	r2, r0
 80a6860:	3202      	adds	r2, #2
 80a6862:	fbb2 f2f8 	udiv	r2, r2, r8
 80a6866:	f103 0c01 	add.w	ip, r3, #1
 80a686a:	ebac 0c02 	sub.w	ip, ip, r2
 80a686e:	f240 52f9 	movw	r2, #1529	; 0x5f9
 80a6872:	4596      	cmp	lr, r2
 80a6874:	bf94      	ite	ls
 80a6876:	2202      	movls	r2, #2
 80a6878:	f06f 0209 	mvnhi.w	r2, #9
 80a687c:	4410      	add	r0, r2
 80a687e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a6882:	fb02 1505 	mla	r5, r2, r5, r1
 80a6886:	2801      	cmp	r0, #1
 80a6888:	bf98      	it	ls
 80a688a:	3501      	addls	r5, #1
 80a688c:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a6890:	d30d      	bcc.n	80a68ae <gmtime_r+0x126>
 80a6892:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80a6896:	61e3      	str	r3, [r4, #28]
 80a6898:	2300      	movs	r3, #0
 80a689a:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80a689e:	e9c4 0504 	strd	r0, r5, [r4, #16]
 80a68a2:	f8c4 c00c 	str.w	ip, [r4, #12]
 80a68a6:	4620      	mov	r0, r4
 80a68a8:	6223      	str	r3, [r4, #32]
 80a68aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a68ae:	078a      	lsls	r2, r1, #30
 80a68b0:	d102      	bne.n	80a68b8 <gmtime_r+0x130>
 80a68b2:	fb07 1616 	mls	r6, r7, r6, r1
 80a68b6:	b95e      	cbnz	r6, 80a68d0 <gmtime_r+0x148>
 80a68b8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a68bc:	fbb1 f6f2 	udiv	r6, r1, r2
 80a68c0:	fb02 1216 	mls	r2, r2, r6, r1
 80a68c4:	fab2 f282 	clz	r2, r2
 80a68c8:	0952      	lsrs	r2, r2, #5
 80a68ca:	333b      	adds	r3, #59	; 0x3b
 80a68cc:	4413      	add	r3, r2
 80a68ce:	e7e2      	b.n	80a6896 <gmtime_r+0x10e>
 80a68d0:	2201      	movs	r2, #1
 80a68d2:	e7fa      	b.n	80a68ca <gmtime_r+0x142>
 80a68d4:	00015180 	.word	0x00015180
 80a68d8:	00023ab1 	.word	0x00023ab1
 80a68dc:	fffdc54f 	.word	0xfffdc54f
 80a68e0:	00023ab0 	.word	0x00023ab0

080a68e4 <labs>:
 80a68e4:	2800      	cmp	r0, #0
 80a68e6:	bfb8      	it	lt
 80a68e8:	4240      	neglt	r0, r0
 80a68ea:	4770      	bx	lr

080a68ec <__retarget_lock_acquire>:
 80a68ec:	4770      	bx	lr

080a68ee <__retarget_lock_acquire_recursive>:
 80a68ee:	4770      	bx	lr

080a68f0 <__retarget_lock_release>:
 80a68f0:	4770      	bx	lr

080a68f2 <__retarget_lock_release_recursive>:
 80a68f2:	4770      	bx	lr

080a68f4 <__ascii_mbtowc>:
 80a68f4:	b082      	sub	sp, #8
 80a68f6:	b901      	cbnz	r1, 80a68fa <__ascii_mbtowc+0x6>
 80a68f8:	a901      	add	r1, sp, #4
 80a68fa:	b142      	cbz	r2, 80a690e <__ascii_mbtowc+0x1a>
 80a68fc:	b14b      	cbz	r3, 80a6912 <__ascii_mbtowc+0x1e>
 80a68fe:	7813      	ldrb	r3, [r2, #0]
 80a6900:	600b      	str	r3, [r1, #0]
 80a6902:	7812      	ldrb	r2, [r2, #0]
 80a6904:	1e10      	subs	r0, r2, #0
 80a6906:	bf18      	it	ne
 80a6908:	2001      	movne	r0, #1
 80a690a:	b002      	add	sp, #8
 80a690c:	4770      	bx	lr
 80a690e:	4610      	mov	r0, r2
 80a6910:	e7fb      	b.n	80a690a <__ascii_mbtowc+0x16>
 80a6912:	f06f 0001 	mvn.w	r0, #1
 80a6916:	e7f8      	b.n	80a690a <__ascii_mbtowc+0x16>

080a6918 <_Balloc>:
 80a6918:	b570      	push	{r4, r5, r6, lr}
 80a691a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80a691c:	4604      	mov	r4, r0
 80a691e:	460d      	mov	r5, r1
 80a6920:	b976      	cbnz	r6, 80a6940 <_Balloc+0x28>
 80a6922:	2010      	movs	r0, #16
 80a6924:	f7fa fe30 	bl	80a1588 <malloc>
 80a6928:	4602      	mov	r2, r0
 80a692a:	6260      	str	r0, [r4, #36]	; 0x24
 80a692c:	b920      	cbnz	r0, 80a6938 <_Balloc+0x20>
 80a692e:	2166      	movs	r1, #102	; 0x66
 80a6930:	4b17      	ldr	r3, [pc, #92]	; (80a6990 <_Balloc+0x78>)
 80a6932:	4818      	ldr	r0, [pc, #96]	; (80a6994 <_Balloc+0x7c>)
 80a6934:	f7fa fe78 	bl	80a1628 <__assert_func>
 80a6938:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80a693c:	6006      	str	r6, [r0, #0]
 80a693e:	60c6      	str	r6, [r0, #12]
 80a6940:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80a6942:	68f3      	ldr	r3, [r6, #12]
 80a6944:	b183      	cbz	r3, 80a6968 <_Balloc+0x50>
 80a6946:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a6948:	68db      	ldr	r3, [r3, #12]
 80a694a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80a694e:	b9b8      	cbnz	r0, 80a6980 <_Balloc+0x68>
 80a6950:	2101      	movs	r1, #1
 80a6952:	fa01 f605 	lsl.w	r6, r1, r5
 80a6956:	1d72      	adds	r2, r6, #5
 80a6958:	4620      	mov	r0, r4
 80a695a:	0092      	lsls	r2, r2, #2
 80a695c:	f000 fc94 	bl	80a7288 <_calloc_r>
 80a6960:	b160      	cbz	r0, 80a697c <_Balloc+0x64>
 80a6962:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80a6966:	e00e      	b.n	80a6986 <_Balloc+0x6e>
 80a6968:	2221      	movs	r2, #33	; 0x21
 80a696a:	2104      	movs	r1, #4
 80a696c:	4620      	mov	r0, r4
 80a696e:	f000 fc8b 	bl	80a7288 <_calloc_r>
 80a6972:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a6974:	60f0      	str	r0, [r6, #12]
 80a6976:	68db      	ldr	r3, [r3, #12]
 80a6978:	2b00      	cmp	r3, #0
 80a697a:	d1e4      	bne.n	80a6946 <_Balloc+0x2e>
 80a697c:	2000      	movs	r0, #0
 80a697e:	bd70      	pop	{r4, r5, r6, pc}
 80a6980:	6802      	ldr	r2, [r0, #0]
 80a6982:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80a6986:	2300      	movs	r3, #0
 80a6988:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80a698c:	e7f7      	b.n	80a697e <_Balloc+0x66>
 80a698e:	bf00      	nop
 80a6990:	080a777c 	.word	0x080a777c
 80a6994:	080a7cd6 	.word	0x080a7cd6

080a6998 <_Bfree>:
 80a6998:	b570      	push	{r4, r5, r6, lr}
 80a699a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80a699c:	4605      	mov	r5, r0
 80a699e:	460c      	mov	r4, r1
 80a69a0:	b976      	cbnz	r6, 80a69c0 <_Bfree+0x28>
 80a69a2:	2010      	movs	r0, #16
 80a69a4:	f7fa fdf0 	bl	80a1588 <malloc>
 80a69a8:	4602      	mov	r2, r0
 80a69aa:	6268      	str	r0, [r5, #36]	; 0x24
 80a69ac:	b920      	cbnz	r0, 80a69b8 <_Bfree+0x20>
 80a69ae:	218a      	movs	r1, #138	; 0x8a
 80a69b0:	4b08      	ldr	r3, [pc, #32]	; (80a69d4 <_Bfree+0x3c>)
 80a69b2:	4809      	ldr	r0, [pc, #36]	; (80a69d8 <_Bfree+0x40>)
 80a69b4:	f7fa fe38 	bl	80a1628 <__assert_func>
 80a69b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80a69bc:	6006      	str	r6, [r0, #0]
 80a69be:	60c6      	str	r6, [r0, #12]
 80a69c0:	b13c      	cbz	r4, 80a69d2 <_Bfree+0x3a>
 80a69c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80a69c4:	6862      	ldr	r2, [r4, #4]
 80a69c6:	68db      	ldr	r3, [r3, #12]
 80a69c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80a69cc:	6021      	str	r1, [r4, #0]
 80a69ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80a69d2:	bd70      	pop	{r4, r5, r6, pc}
 80a69d4:	080a777c 	.word	0x080a777c
 80a69d8:	080a7cd6 	.word	0x080a7cd6

080a69dc <__multadd>:
 80a69dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a69e0:	4607      	mov	r7, r0
 80a69e2:	460c      	mov	r4, r1
 80a69e4:	461e      	mov	r6, r3
 80a69e6:	2000      	movs	r0, #0
 80a69e8:	690d      	ldr	r5, [r1, #16]
 80a69ea:	f101 0c14 	add.w	ip, r1, #20
 80a69ee:	f8dc 3000 	ldr.w	r3, [ip]
 80a69f2:	3001      	adds	r0, #1
 80a69f4:	b299      	uxth	r1, r3
 80a69f6:	fb02 6101 	mla	r1, r2, r1, r6
 80a69fa:	0c1e      	lsrs	r6, r3, #16
 80a69fc:	0c0b      	lsrs	r3, r1, #16
 80a69fe:	fb02 3306 	mla	r3, r2, r6, r3
 80a6a02:	b289      	uxth	r1, r1
 80a6a04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80a6a08:	4285      	cmp	r5, r0
 80a6a0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80a6a0e:	f84c 1b04 	str.w	r1, [ip], #4
 80a6a12:	dcec      	bgt.n	80a69ee <__multadd+0x12>
 80a6a14:	b30e      	cbz	r6, 80a6a5a <__multadd+0x7e>
 80a6a16:	68a3      	ldr	r3, [r4, #8]
 80a6a18:	42ab      	cmp	r3, r5
 80a6a1a:	dc19      	bgt.n	80a6a50 <__multadd+0x74>
 80a6a1c:	6861      	ldr	r1, [r4, #4]
 80a6a1e:	4638      	mov	r0, r7
 80a6a20:	3101      	adds	r1, #1
 80a6a22:	f7ff ff79 	bl	80a6918 <_Balloc>
 80a6a26:	4680      	mov	r8, r0
 80a6a28:	b928      	cbnz	r0, 80a6a36 <__multadd+0x5a>
 80a6a2a:	4602      	mov	r2, r0
 80a6a2c:	21b5      	movs	r1, #181	; 0xb5
 80a6a2e:	4b0c      	ldr	r3, [pc, #48]	; (80a6a60 <__multadd+0x84>)
 80a6a30:	480c      	ldr	r0, [pc, #48]	; (80a6a64 <__multadd+0x88>)
 80a6a32:	f7fa fdf9 	bl	80a1628 <__assert_func>
 80a6a36:	6922      	ldr	r2, [r4, #16]
 80a6a38:	f104 010c 	add.w	r1, r4, #12
 80a6a3c:	3202      	adds	r2, #2
 80a6a3e:	0092      	lsls	r2, r2, #2
 80a6a40:	300c      	adds	r0, #12
 80a6a42:	f7fd fb65 	bl	80a4110 <memcpy>
 80a6a46:	4621      	mov	r1, r4
 80a6a48:	4638      	mov	r0, r7
 80a6a4a:	f7ff ffa5 	bl	80a6998 <_Bfree>
 80a6a4e:	4644      	mov	r4, r8
 80a6a50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80a6a54:	3501      	adds	r5, #1
 80a6a56:	615e      	str	r6, [r3, #20]
 80a6a58:	6125      	str	r5, [r4, #16]
 80a6a5a:	4620      	mov	r0, r4
 80a6a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a6a60:	080a7c2d 	.word	0x080a7c2d
 80a6a64:	080a7cd6 	.word	0x080a7cd6

080a6a68 <__s2b>:
 80a6a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a6a6c:	4615      	mov	r5, r2
 80a6a6e:	2209      	movs	r2, #9
 80a6a70:	461f      	mov	r7, r3
 80a6a72:	3308      	adds	r3, #8
 80a6a74:	460c      	mov	r4, r1
 80a6a76:	fb93 f3f2 	sdiv	r3, r3, r2
 80a6a7a:	4606      	mov	r6, r0
 80a6a7c:	2201      	movs	r2, #1
 80a6a7e:	2100      	movs	r1, #0
 80a6a80:	429a      	cmp	r2, r3
 80a6a82:	db09      	blt.n	80a6a98 <__s2b+0x30>
 80a6a84:	4630      	mov	r0, r6
 80a6a86:	f7ff ff47 	bl	80a6918 <_Balloc>
 80a6a8a:	b940      	cbnz	r0, 80a6a9e <__s2b+0x36>
 80a6a8c:	4602      	mov	r2, r0
 80a6a8e:	21ce      	movs	r1, #206	; 0xce
 80a6a90:	4b18      	ldr	r3, [pc, #96]	; (80a6af4 <__s2b+0x8c>)
 80a6a92:	4819      	ldr	r0, [pc, #100]	; (80a6af8 <__s2b+0x90>)
 80a6a94:	f7fa fdc8 	bl	80a1628 <__assert_func>
 80a6a98:	0052      	lsls	r2, r2, #1
 80a6a9a:	3101      	adds	r1, #1
 80a6a9c:	e7f0      	b.n	80a6a80 <__s2b+0x18>
 80a6a9e:	9b08      	ldr	r3, [sp, #32]
 80a6aa0:	2d09      	cmp	r5, #9
 80a6aa2:	6143      	str	r3, [r0, #20]
 80a6aa4:	f04f 0301 	mov.w	r3, #1
 80a6aa8:	6103      	str	r3, [r0, #16]
 80a6aaa:	dd16      	ble.n	80a6ada <__s2b+0x72>
 80a6aac:	f104 0909 	add.w	r9, r4, #9
 80a6ab0:	46c8      	mov	r8, r9
 80a6ab2:	442c      	add	r4, r5
 80a6ab4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80a6ab8:	4601      	mov	r1, r0
 80a6aba:	220a      	movs	r2, #10
 80a6abc:	4630      	mov	r0, r6
 80a6abe:	3b30      	subs	r3, #48	; 0x30
 80a6ac0:	f7ff ff8c 	bl	80a69dc <__multadd>
 80a6ac4:	45a0      	cmp	r8, r4
 80a6ac6:	d1f5      	bne.n	80a6ab4 <__s2b+0x4c>
 80a6ac8:	f1a5 0408 	sub.w	r4, r5, #8
 80a6acc:	444c      	add	r4, r9
 80a6ace:	1b2d      	subs	r5, r5, r4
 80a6ad0:	1963      	adds	r3, r4, r5
 80a6ad2:	42bb      	cmp	r3, r7
 80a6ad4:	db04      	blt.n	80a6ae0 <__s2b+0x78>
 80a6ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a6ada:	2509      	movs	r5, #9
 80a6adc:	340a      	adds	r4, #10
 80a6ade:	e7f6      	b.n	80a6ace <__s2b+0x66>
 80a6ae0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80a6ae4:	4601      	mov	r1, r0
 80a6ae6:	220a      	movs	r2, #10
 80a6ae8:	4630      	mov	r0, r6
 80a6aea:	3b30      	subs	r3, #48	; 0x30
 80a6aec:	f7ff ff76 	bl	80a69dc <__multadd>
 80a6af0:	e7ee      	b.n	80a6ad0 <__s2b+0x68>
 80a6af2:	bf00      	nop
 80a6af4:	080a7c2d 	.word	0x080a7c2d
 80a6af8:	080a7cd6 	.word	0x080a7cd6

080a6afc <__hi0bits>:
 80a6afc:	0c02      	lsrs	r2, r0, #16
 80a6afe:	0412      	lsls	r2, r2, #16
 80a6b00:	4603      	mov	r3, r0
 80a6b02:	b9ca      	cbnz	r2, 80a6b38 <__hi0bits+0x3c>
 80a6b04:	0403      	lsls	r3, r0, #16
 80a6b06:	2010      	movs	r0, #16
 80a6b08:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80a6b0c:	bf04      	itt	eq
 80a6b0e:	021b      	lsleq	r3, r3, #8
 80a6b10:	3008      	addeq	r0, #8
 80a6b12:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80a6b16:	bf04      	itt	eq
 80a6b18:	011b      	lsleq	r3, r3, #4
 80a6b1a:	3004      	addeq	r0, #4
 80a6b1c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80a6b20:	bf04      	itt	eq
 80a6b22:	009b      	lsleq	r3, r3, #2
 80a6b24:	3002      	addeq	r0, #2
 80a6b26:	2b00      	cmp	r3, #0
 80a6b28:	db05      	blt.n	80a6b36 <__hi0bits+0x3a>
 80a6b2a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80a6b2e:	f100 0001 	add.w	r0, r0, #1
 80a6b32:	bf08      	it	eq
 80a6b34:	2020      	moveq	r0, #32
 80a6b36:	4770      	bx	lr
 80a6b38:	2000      	movs	r0, #0
 80a6b3a:	e7e5      	b.n	80a6b08 <__hi0bits+0xc>

080a6b3c <__lo0bits>:
 80a6b3c:	6803      	ldr	r3, [r0, #0]
 80a6b3e:	4602      	mov	r2, r0
 80a6b40:	f013 0007 	ands.w	r0, r3, #7
 80a6b44:	d00b      	beq.n	80a6b5e <__lo0bits+0x22>
 80a6b46:	07d9      	lsls	r1, r3, #31
 80a6b48:	d421      	bmi.n	80a6b8e <__lo0bits+0x52>
 80a6b4a:	0798      	lsls	r0, r3, #30
 80a6b4c:	bf49      	itett	mi
 80a6b4e:	085b      	lsrmi	r3, r3, #1
 80a6b50:	089b      	lsrpl	r3, r3, #2
 80a6b52:	2001      	movmi	r0, #1
 80a6b54:	6013      	strmi	r3, [r2, #0]
 80a6b56:	bf5c      	itt	pl
 80a6b58:	2002      	movpl	r0, #2
 80a6b5a:	6013      	strpl	r3, [r2, #0]
 80a6b5c:	4770      	bx	lr
 80a6b5e:	b299      	uxth	r1, r3
 80a6b60:	b909      	cbnz	r1, 80a6b66 <__lo0bits+0x2a>
 80a6b62:	2010      	movs	r0, #16
 80a6b64:	0c1b      	lsrs	r3, r3, #16
 80a6b66:	b2d9      	uxtb	r1, r3
 80a6b68:	b909      	cbnz	r1, 80a6b6e <__lo0bits+0x32>
 80a6b6a:	3008      	adds	r0, #8
 80a6b6c:	0a1b      	lsrs	r3, r3, #8
 80a6b6e:	0719      	lsls	r1, r3, #28
 80a6b70:	bf04      	itt	eq
 80a6b72:	091b      	lsreq	r3, r3, #4
 80a6b74:	3004      	addeq	r0, #4
 80a6b76:	0799      	lsls	r1, r3, #30
 80a6b78:	bf04      	itt	eq
 80a6b7a:	089b      	lsreq	r3, r3, #2
 80a6b7c:	3002      	addeq	r0, #2
 80a6b7e:	07d9      	lsls	r1, r3, #31
 80a6b80:	d403      	bmi.n	80a6b8a <__lo0bits+0x4e>
 80a6b82:	085b      	lsrs	r3, r3, #1
 80a6b84:	f100 0001 	add.w	r0, r0, #1
 80a6b88:	d003      	beq.n	80a6b92 <__lo0bits+0x56>
 80a6b8a:	6013      	str	r3, [r2, #0]
 80a6b8c:	4770      	bx	lr
 80a6b8e:	2000      	movs	r0, #0
 80a6b90:	4770      	bx	lr
 80a6b92:	2020      	movs	r0, #32
 80a6b94:	4770      	bx	lr
	...

080a6b98 <__i2b>:
 80a6b98:	b510      	push	{r4, lr}
 80a6b9a:	460c      	mov	r4, r1
 80a6b9c:	2101      	movs	r1, #1
 80a6b9e:	f7ff febb 	bl	80a6918 <_Balloc>
 80a6ba2:	4602      	mov	r2, r0
 80a6ba4:	b928      	cbnz	r0, 80a6bb2 <__i2b+0x1a>
 80a6ba6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80a6baa:	4b04      	ldr	r3, [pc, #16]	; (80a6bbc <__i2b+0x24>)
 80a6bac:	4804      	ldr	r0, [pc, #16]	; (80a6bc0 <__i2b+0x28>)
 80a6bae:	f7fa fd3b 	bl	80a1628 <__assert_func>
 80a6bb2:	2301      	movs	r3, #1
 80a6bb4:	6144      	str	r4, [r0, #20]
 80a6bb6:	6103      	str	r3, [r0, #16]
 80a6bb8:	bd10      	pop	{r4, pc}
 80a6bba:	bf00      	nop
 80a6bbc:	080a7c2d 	.word	0x080a7c2d
 80a6bc0:	080a7cd6 	.word	0x080a7cd6

080a6bc4 <__multiply>:
 80a6bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6bc8:	4691      	mov	r9, r2
 80a6bca:	690a      	ldr	r2, [r1, #16]
 80a6bcc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80a6bd0:	460c      	mov	r4, r1
 80a6bd2:	429a      	cmp	r2, r3
 80a6bd4:	bfbe      	ittt	lt
 80a6bd6:	460b      	movlt	r3, r1
 80a6bd8:	464c      	movlt	r4, r9
 80a6bda:	4699      	movlt	r9, r3
 80a6bdc:	6927      	ldr	r7, [r4, #16]
 80a6bde:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80a6be2:	68a3      	ldr	r3, [r4, #8]
 80a6be4:	6861      	ldr	r1, [r4, #4]
 80a6be6:	eb07 060a 	add.w	r6, r7, sl
 80a6bea:	42b3      	cmp	r3, r6
 80a6bec:	b085      	sub	sp, #20
 80a6bee:	bfb8      	it	lt
 80a6bf0:	3101      	addlt	r1, #1
 80a6bf2:	f7ff fe91 	bl	80a6918 <_Balloc>
 80a6bf6:	b930      	cbnz	r0, 80a6c06 <__multiply+0x42>
 80a6bf8:	4602      	mov	r2, r0
 80a6bfa:	f240 115d 	movw	r1, #349	; 0x15d
 80a6bfe:	4b43      	ldr	r3, [pc, #268]	; (80a6d0c <__multiply+0x148>)
 80a6c00:	4843      	ldr	r0, [pc, #268]	; (80a6d10 <__multiply+0x14c>)
 80a6c02:	f7fa fd11 	bl	80a1628 <__assert_func>
 80a6c06:	f100 0514 	add.w	r5, r0, #20
 80a6c0a:	462b      	mov	r3, r5
 80a6c0c:	2200      	movs	r2, #0
 80a6c0e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80a6c12:	4543      	cmp	r3, r8
 80a6c14:	d321      	bcc.n	80a6c5a <__multiply+0x96>
 80a6c16:	f104 0314 	add.w	r3, r4, #20
 80a6c1a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80a6c1e:	f109 0314 	add.w	r3, r9, #20
 80a6c22:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80a6c26:	9202      	str	r2, [sp, #8]
 80a6c28:	1b3a      	subs	r2, r7, r4
 80a6c2a:	3a15      	subs	r2, #21
 80a6c2c:	f022 0203 	bic.w	r2, r2, #3
 80a6c30:	3204      	adds	r2, #4
 80a6c32:	f104 0115 	add.w	r1, r4, #21
 80a6c36:	428f      	cmp	r7, r1
 80a6c38:	bf38      	it	cc
 80a6c3a:	2204      	movcc	r2, #4
 80a6c3c:	9201      	str	r2, [sp, #4]
 80a6c3e:	9a02      	ldr	r2, [sp, #8]
 80a6c40:	9303      	str	r3, [sp, #12]
 80a6c42:	429a      	cmp	r2, r3
 80a6c44:	d80c      	bhi.n	80a6c60 <__multiply+0x9c>
 80a6c46:	2e00      	cmp	r6, #0
 80a6c48:	dd03      	ble.n	80a6c52 <__multiply+0x8e>
 80a6c4a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80a6c4e:	2b00      	cmp	r3, #0
 80a6c50:	d059      	beq.n	80a6d06 <__multiply+0x142>
 80a6c52:	6106      	str	r6, [r0, #16]
 80a6c54:	b005      	add	sp, #20
 80a6c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6c5a:	f843 2b04 	str.w	r2, [r3], #4
 80a6c5e:	e7d8      	b.n	80a6c12 <__multiply+0x4e>
 80a6c60:	f8b3 a000 	ldrh.w	sl, [r3]
 80a6c64:	f1ba 0f00 	cmp.w	sl, #0
 80a6c68:	d023      	beq.n	80a6cb2 <__multiply+0xee>
 80a6c6a:	46a9      	mov	r9, r5
 80a6c6c:	f04f 0c00 	mov.w	ip, #0
 80a6c70:	f104 0e14 	add.w	lr, r4, #20
 80a6c74:	f85e 2b04 	ldr.w	r2, [lr], #4
 80a6c78:	f8d9 1000 	ldr.w	r1, [r9]
 80a6c7c:	fa1f fb82 	uxth.w	fp, r2
 80a6c80:	b289      	uxth	r1, r1
 80a6c82:	fb0a 110b 	mla	r1, sl, fp, r1
 80a6c86:	4461      	add	r1, ip
 80a6c88:	f8d9 c000 	ldr.w	ip, [r9]
 80a6c8c:	0c12      	lsrs	r2, r2, #16
 80a6c8e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80a6c92:	fb0a c202 	mla	r2, sl, r2, ip
 80a6c96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80a6c9a:	b289      	uxth	r1, r1
 80a6c9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80a6ca0:	4577      	cmp	r7, lr
 80a6ca2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80a6ca6:	f849 1b04 	str.w	r1, [r9], #4
 80a6caa:	d8e3      	bhi.n	80a6c74 <__multiply+0xb0>
 80a6cac:	9a01      	ldr	r2, [sp, #4]
 80a6cae:	f845 c002 	str.w	ip, [r5, r2]
 80a6cb2:	9a03      	ldr	r2, [sp, #12]
 80a6cb4:	3304      	adds	r3, #4
 80a6cb6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80a6cba:	f1b9 0f00 	cmp.w	r9, #0
 80a6cbe:	d020      	beq.n	80a6d02 <__multiply+0x13e>
 80a6cc0:	46ae      	mov	lr, r5
 80a6cc2:	f04f 0a00 	mov.w	sl, #0
 80a6cc6:	6829      	ldr	r1, [r5, #0]
 80a6cc8:	f104 0c14 	add.w	ip, r4, #20
 80a6ccc:	f8bc b000 	ldrh.w	fp, [ip]
 80a6cd0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80a6cd4:	b289      	uxth	r1, r1
 80a6cd6:	fb09 220b 	mla	r2, r9, fp, r2
 80a6cda:	4492      	add	sl, r2
 80a6cdc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80a6ce0:	f84e 1b04 	str.w	r1, [lr], #4
 80a6ce4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80a6ce8:	f8be 1000 	ldrh.w	r1, [lr]
 80a6cec:	0c12      	lsrs	r2, r2, #16
 80a6cee:	fb09 1102 	mla	r1, r9, r2, r1
 80a6cf2:	4567      	cmp	r7, ip
 80a6cf4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80a6cf8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80a6cfc:	d8e6      	bhi.n	80a6ccc <__multiply+0x108>
 80a6cfe:	9a01      	ldr	r2, [sp, #4]
 80a6d00:	50a9      	str	r1, [r5, r2]
 80a6d02:	3504      	adds	r5, #4
 80a6d04:	e79b      	b.n	80a6c3e <__multiply+0x7a>
 80a6d06:	3e01      	subs	r6, #1
 80a6d08:	e79d      	b.n	80a6c46 <__multiply+0x82>
 80a6d0a:	bf00      	nop
 80a6d0c:	080a7c2d 	.word	0x080a7c2d
 80a6d10:	080a7cd6 	.word	0x080a7cd6

080a6d14 <__pow5mult>:
 80a6d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a6d18:	4615      	mov	r5, r2
 80a6d1a:	f012 0203 	ands.w	r2, r2, #3
 80a6d1e:	4606      	mov	r6, r0
 80a6d20:	460f      	mov	r7, r1
 80a6d22:	d007      	beq.n	80a6d34 <__pow5mult+0x20>
 80a6d24:	4c25      	ldr	r4, [pc, #148]	; (80a6dbc <__pow5mult+0xa8>)
 80a6d26:	3a01      	subs	r2, #1
 80a6d28:	2300      	movs	r3, #0
 80a6d2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80a6d2e:	f7ff fe55 	bl	80a69dc <__multadd>
 80a6d32:	4607      	mov	r7, r0
 80a6d34:	10ad      	asrs	r5, r5, #2
 80a6d36:	d03d      	beq.n	80a6db4 <__pow5mult+0xa0>
 80a6d38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80a6d3a:	b97c      	cbnz	r4, 80a6d5c <__pow5mult+0x48>
 80a6d3c:	2010      	movs	r0, #16
 80a6d3e:	f7fa fc23 	bl	80a1588 <malloc>
 80a6d42:	4602      	mov	r2, r0
 80a6d44:	6270      	str	r0, [r6, #36]	; 0x24
 80a6d46:	b928      	cbnz	r0, 80a6d54 <__pow5mult+0x40>
 80a6d48:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80a6d4c:	4b1c      	ldr	r3, [pc, #112]	; (80a6dc0 <__pow5mult+0xac>)
 80a6d4e:	481d      	ldr	r0, [pc, #116]	; (80a6dc4 <__pow5mult+0xb0>)
 80a6d50:	f7fa fc6a 	bl	80a1628 <__assert_func>
 80a6d54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80a6d58:	6004      	str	r4, [r0, #0]
 80a6d5a:	60c4      	str	r4, [r0, #12]
 80a6d5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80a6d60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80a6d64:	b94c      	cbnz	r4, 80a6d7a <__pow5mult+0x66>
 80a6d66:	f240 2171 	movw	r1, #625	; 0x271
 80a6d6a:	4630      	mov	r0, r6
 80a6d6c:	f7ff ff14 	bl	80a6b98 <__i2b>
 80a6d70:	2300      	movs	r3, #0
 80a6d72:	4604      	mov	r4, r0
 80a6d74:	f8c8 0008 	str.w	r0, [r8, #8]
 80a6d78:	6003      	str	r3, [r0, #0]
 80a6d7a:	f04f 0900 	mov.w	r9, #0
 80a6d7e:	07eb      	lsls	r3, r5, #31
 80a6d80:	d50a      	bpl.n	80a6d98 <__pow5mult+0x84>
 80a6d82:	4639      	mov	r1, r7
 80a6d84:	4622      	mov	r2, r4
 80a6d86:	4630      	mov	r0, r6
 80a6d88:	f7ff ff1c 	bl	80a6bc4 <__multiply>
 80a6d8c:	4680      	mov	r8, r0
 80a6d8e:	4639      	mov	r1, r7
 80a6d90:	4630      	mov	r0, r6
 80a6d92:	f7ff fe01 	bl	80a6998 <_Bfree>
 80a6d96:	4647      	mov	r7, r8
 80a6d98:	106d      	asrs	r5, r5, #1
 80a6d9a:	d00b      	beq.n	80a6db4 <__pow5mult+0xa0>
 80a6d9c:	6820      	ldr	r0, [r4, #0]
 80a6d9e:	b938      	cbnz	r0, 80a6db0 <__pow5mult+0x9c>
 80a6da0:	4622      	mov	r2, r4
 80a6da2:	4621      	mov	r1, r4
 80a6da4:	4630      	mov	r0, r6
 80a6da6:	f7ff ff0d 	bl	80a6bc4 <__multiply>
 80a6daa:	6020      	str	r0, [r4, #0]
 80a6dac:	f8c0 9000 	str.w	r9, [r0]
 80a6db0:	4604      	mov	r4, r0
 80a6db2:	e7e4      	b.n	80a6d7e <__pow5mult+0x6a>
 80a6db4:	4638      	mov	r0, r7
 80a6db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a6dba:	bf00      	nop
 80a6dbc:	080a7e48 	.word	0x080a7e48
 80a6dc0:	080a777c 	.word	0x080a777c
 80a6dc4:	080a7cd6 	.word	0x080a7cd6

080a6dc8 <__lshift>:
 80a6dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a6dcc:	460c      	mov	r4, r1
 80a6dce:	4607      	mov	r7, r0
 80a6dd0:	4691      	mov	r9, r2
 80a6dd2:	6923      	ldr	r3, [r4, #16]
 80a6dd4:	6849      	ldr	r1, [r1, #4]
 80a6dd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80a6dda:	68a3      	ldr	r3, [r4, #8]
 80a6ddc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80a6de0:	f108 0601 	add.w	r6, r8, #1
 80a6de4:	42b3      	cmp	r3, r6
 80a6de6:	db0b      	blt.n	80a6e00 <__lshift+0x38>
 80a6de8:	4638      	mov	r0, r7
 80a6dea:	f7ff fd95 	bl	80a6918 <_Balloc>
 80a6dee:	4605      	mov	r5, r0
 80a6df0:	b948      	cbnz	r0, 80a6e06 <__lshift+0x3e>
 80a6df2:	4602      	mov	r2, r0
 80a6df4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80a6df8:	4b29      	ldr	r3, [pc, #164]	; (80a6ea0 <__lshift+0xd8>)
 80a6dfa:	482a      	ldr	r0, [pc, #168]	; (80a6ea4 <__lshift+0xdc>)
 80a6dfc:	f7fa fc14 	bl	80a1628 <__assert_func>
 80a6e00:	3101      	adds	r1, #1
 80a6e02:	005b      	lsls	r3, r3, #1
 80a6e04:	e7ee      	b.n	80a6de4 <__lshift+0x1c>
 80a6e06:	2300      	movs	r3, #0
 80a6e08:	f100 0114 	add.w	r1, r0, #20
 80a6e0c:	f100 0210 	add.w	r2, r0, #16
 80a6e10:	4618      	mov	r0, r3
 80a6e12:	4553      	cmp	r3, sl
 80a6e14:	db37      	blt.n	80a6e86 <__lshift+0xbe>
 80a6e16:	6920      	ldr	r0, [r4, #16]
 80a6e18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80a6e1c:	f104 0314 	add.w	r3, r4, #20
 80a6e20:	f019 091f 	ands.w	r9, r9, #31
 80a6e24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80a6e28:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80a6e2c:	d02f      	beq.n	80a6e8e <__lshift+0xc6>
 80a6e2e:	468a      	mov	sl, r1
 80a6e30:	f04f 0c00 	mov.w	ip, #0
 80a6e34:	f1c9 0e20 	rsb	lr, r9, #32
 80a6e38:	681a      	ldr	r2, [r3, #0]
 80a6e3a:	fa02 f209 	lsl.w	r2, r2, r9
 80a6e3e:	ea42 020c 	orr.w	r2, r2, ip
 80a6e42:	f84a 2b04 	str.w	r2, [sl], #4
 80a6e46:	f853 2b04 	ldr.w	r2, [r3], #4
 80a6e4a:	4298      	cmp	r0, r3
 80a6e4c:	fa22 fc0e 	lsr.w	ip, r2, lr
 80a6e50:	d8f2      	bhi.n	80a6e38 <__lshift+0x70>
 80a6e52:	1b03      	subs	r3, r0, r4
 80a6e54:	3b15      	subs	r3, #21
 80a6e56:	f023 0303 	bic.w	r3, r3, #3
 80a6e5a:	3304      	adds	r3, #4
 80a6e5c:	f104 0215 	add.w	r2, r4, #21
 80a6e60:	4290      	cmp	r0, r2
 80a6e62:	bf38      	it	cc
 80a6e64:	2304      	movcc	r3, #4
 80a6e66:	f841 c003 	str.w	ip, [r1, r3]
 80a6e6a:	f1bc 0f00 	cmp.w	ip, #0
 80a6e6e:	d001      	beq.n	80a6e74 <__lshift+0xac>
 80a6e70:	f108 0602 	add.w	r6, r8, #2
 80a6e74:	3e01      	subs	r6, #1
 80a6e76:	4638      	mov	r0, r7
 80a6e78:	4621      	mov	r1, r4
 80a6e7a:	612e      	str	r6, [r5, #16]
 80a6e7c:	f7ff fd8c 	bl	80a6998 <_Bfree>
 80a6e80:	4628      	mov	r0, r5
 80a6e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a6e86:	f842 0f04 	str.w	r0, [r2, #4]!
 80a6e8a:	3301      	adds	r3, #1
 80a6e8c:	e7c1      	b.n	80a6e12 <__lshift+0x4a>
 80a6e8e:	3904      	subs	r1, #4
 80a6e90:	f853 2b04 	ldr.w	r2, [r3], #4
 80a6e94:	4298      	cmp	r0, r3
 80a6e96:	f841 2f04 	str.w	r2, [r1, #4]!
 80a6e9a:	d8f9      	bhi.n	80a6e90 <__lshift+0xc8>
 80a6e9c:	e7ea      	b.n	80a6e74 <__lshift+0xac>
 80a6e9e:	bf00      	nop
 80a6ea0:	080a7c2d 	.word	0x080a7c2d
 80a6ea4:	080a7cd6 	.word	0x080a7cd6

080a6ea8 <__mcmp>:
 80a6ea8:	4603      	mov	r3, r0
 80a6eaa:	690a      	ldr	r2, [r1, #16]
 80a6eac:	6900      	ldr	r0, [r0, #16]
 80a6eae:	b530      	push	{r4, r5, lr}
 80a6eb0:	1a80      	subs	r0, r0, r2
 80a6eb2:	d10d      	bne.n	80a6ed0 <__mcmp+0x28>
 80a6eb4:	3314      	adds	r3, #20
 80a6eb6:	3114      	adds	r1, #20
 80a6eb8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80a6ebc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80a6ec0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80a6ec4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80a6ec8:	4295      	cmp	r5, r2
 80a6eca:	d002      	beq.n	80a6ed2 <__mcmp+0x2a>
 80a6ecc:	d304      	bcc.n	80a6ed8 <__mcmp+0x30>
 80a6ece:	2001      	movs	r0, #1
 80a6ed0:	bd30      	pop	{r4, r5, pc}
 80a6ed2:	42a3      	cmp	r3, r4
 80a6ed4:	d3f4      	bcc.n	80a6ec0 <__mcmp+0x18>
 80a6ed6:	e7fb      	b.n	80a6ed0 <__mcmp+0x28>
 80a6ed8:	f04f 30ff 	mov.w	r0, #4294967295
 80a6edc:	e7f8      	b.n	80a6ed0 <__mcmp+0x28>
	...

080a6ee0 <__mdiff>:
 80a6ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6ee4:	460d      	mov	r5, r1
 80a6ee6:	4607      	mov	r7, r0
 80a6ee8:	4611      	mov	r1, r2
 80a6eea:	4628      	mov	r0, r5
 80a6eec:	4614      	mov	r4, r2
 80a6eee:	f7ff ffdb 	bl	80a6ea8 <__mcmp>
 80a6ef2:	1e06      	subs	r6, r0, #0
 80a6ef4:	d111      	bne.n	80a6f1a <__mdiff+0x3a>
 80a6ef6:	4631      	mov	r1, r6
 80a6ef8:	4638      	mov	r0, r7
 80a6efa:	f7ff fd0d 	bl	80a6918 <_Balloc>
 80a6efe:	4602      	mov	r2, r0
 80a6f00:	b928      	cbnz	r0, 80a6f0e <__mdiff+0x2e>
 80a6f02:	f240 2132 	movw	r1, #562	; 0x232
 80a6f06:	4b3a      	ldr	r3, [pc, #232]	; (80a6ff0 <__mdiff+0x110>)
 80a6f08:	483a      	ldr	r0, [pc, #232]	; (80a6ff4 <__mdiff+0x114>)
 80a6f0a:	f7fa fb8d 	bl	80a1628 <__assert_func>
 80a6f0e:	2301      	movs	r3, #1
 80a6f10:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80a6f14:	4610      	mov	r0, r2
 80a6f16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6f1a:	bfa4      	itt	ge
 80a6f1c:	4623      	movge	r3, r4
 80a6f1e:	462c      	movge	r4, r5
 80a6f20:	4638      	mov	r0, r7
 80a6f22:	6861      	ldr	r1, [r4, #4]
 80a6f24:	bfa6      	itte	ge
 80a6f26:	461d      	movge	r5, r3
 80a6f28:	2600      	movge	r6, #0
 80a6f2a:	2601      	movlt	r6, #1
 80a6f2c:	f7ff fcf4 	bl	80a6918 <_Balloc>
 80a6f30:	4602      	mov	r2, r0
 80a6f32:	b918      	cbnz	r0, 80a6f3c <__mdiff+0x5c>
 80a6f34:	f44f 7110 	mov.w	r1, #576	; 0x240
 80a6f38:	4b2d      	ldr	r3, [pc, #180]	; (80a6ff0 <__mdiff+0x110>)
 80a6f3a:	e7e5      	b.n	80a6f08 <__mdiff+0x28>
 80a6f3c:	f102 0814 	add.w	r8, r2, #20
 80a6f40:	46c2      	mov	sl, r8
 80a6f42:	f04f 0c00 	mov.w	ip, #0
 80a6f46:	6927      	ldr	r7, [r4, #16]
 80a6f48:	60c6      	str	r6, [r0, #12]
 80a6f4a:	692e      	ldr	r6, [r5, #16]
 80a6f4c:	f104 0014 	add.w	r0, r4, #20
 80a6f50:	f105 0914 	add.w	r9, r5, #20
 80a6f54:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80a6f58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80a6f5c:	3410      	adds	r4, #16
 80a6f5e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80a6f62:	f859 3b04 	ldr.w	r3, [r9], #4
 80a6f66:	fa1f f18b 	uxth.w	r1, fp
 80a6f6a:	448c      	add	ip, r1
 80a6f6c:	b299      	uxth	r1, r3
 80a6f6e:	0c1b      	lsrs	r3, r3, #16
 80a6f70:	ebac 0101 	sub.w	r1, ip, r1
 80a6f74:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80a6f78:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80a6f7c:	b289      	uxth	r1, r1
 80a6f7e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80a6f82:	454e      	cmp	r6, r9
 80a6f84:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80a6f88:	f84a 3b04 	str.w	r3, [sl], #4
 80a6f8c:	d8e7      	bhi.n	80a6f5e <__mdiff+0x7e>
 80a6f8e:	1b73      	subs	r3, r6, r5
 80a6f90:	3b15      	subs	r3, #21
 80a6f92:	f023 0303 	bic.w	r3, r3, #3
 80a6f96:	3515      	adds	r5, #21
 80a6f98:	3304      	adds	r3, #4
 80a6f9a:	42ae      	cmp	r6, r5
 80a6f9c:	bf38      	it	cc
 80a6f9e:	2304      	movcc	r3, #4
 80a6fa0:	4418      	add	r0, r3
 80a6fa2:	4443      	add	r3, r8
 80a6fa4:	461e      	mov	r6, r3
 80a6fa6:	4605      	mov	r5, r0
 80a6fa8:	4575      	cmp	r5, lr
 80a6faa:	d30e      	bcc.n	80a6fca <__mdiff+0xea>
 80a6fac:	f10e 0103 	add.w	r1, lr, #3
 80a6fb0:	1a09      	subs	r1, r1, r0
 80a6fb2:	f021 0103 	bic.w	r1, r1, #3
 80a6fb6:	3803      	subs	r0, #3
 80a6fb8:	4586      	cmp	lr, r0
 80a6fba:	bf38      	it	cc
 80a6fbc:	2100      	movcc	r1, #0
 80a6fbe:	4419      	add	r1, r3
 80a6fc0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80a6fc4:	b18b      	cbz	r3, 80a6fea <__mdiff+0x10a>
 80a6fc6:	6117      	str	r7, [r2, #16]
 80a6fc8:	e7a4      	b.n	80a6f14 <__mdiff+0x34>
 80a6fca:	f855 8b04 	ldr.w	r8, [r5], #4
 80a6fce:	fa1f f188 	uxth.w	r1, r8
 80a6fd2:	4461      	add	r1, ip
 80a6fd4:	140c      	asrs	r4, r1, #16
 80a6fd6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80a6fda:	b289      	uxth	r1, r1
 80a6fdc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80a6fe0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80a6fe4:	f846 1b04 	str.w	r1, [r6], #4
 80a6fe8:	e7de      	b.n	80a6fa8 <__mdiff+0xc8>
 80a6fea:	3f01      	subs	r7, #1
 80a6fec:	e7e8      	b.n	80a6fc0 <__mdiff+0xe0>
 80a6fee:	bf00      	nop
 80a6ff0:	080a7c2d 	.word	0x080a7c2d
 80a6ff4:	080a7cd6 	.word	0x080a7cd6

080a6ff8 <__ulp>:
 80a6ff8:	4b11      	ldr	r3, [pc, #68]	; (80a7040 <__ulp+0x48>)
 80a6ffa:	400b      	ands	r3, r1
 80a6ffc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80a7000:	2b00      	cmp	r3, #0
 80a7002:	dd02      	ble.n	80a700a <__ulp+0x12>
 80a7004:	2000      	movs	r0, #0
 80a7006:	4619      	mov	r1, r3
 80a7008:	4770      	bx	lr
 80a700a:	425b      	negs	r3, r3
 80a700c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80a7010:	f04f 0000 	mov.w	r0, #0
 80a7014:	f04f 0100 	mov.w	r1, #0
 80a7018:	ea4f 5223 	mov.w	r2, r3, asr #20
 80a701c:	da04      	bge.n	80a7028 <__ulp+0x30>
 80a701e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80a7022:	fa43 f102 	asr.w	r1, r3, r2
 80a7026:	4770      	bx	lr
 80a7028:	f1a2 0314 	sub.w	r3, r2, #20
 80a702c:	2b1e      	cmp	r3, #30
 80a702e:	bfd6      	itet	le
 80a7030:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80a7034:	2301      	movgt	r3, #1
 80a7036:	fa22 f303 	lsrle.w	r3, r2, r3
 80a703a:	4618      	mov	r0, r3
 80a703c:	4770      	bx	lr
 80a703e:	bf00      	nop
 80a7040:	7ff00000 	.word	0x7ff00000

080a7044 <__b2d>:
 80a7044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a7048:	6907      	ldr	r7, [r0, #16]
 80a704a:	f100 0914 	add.w	r9, r0, #20
 80a704e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80a7052:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80a7056:	f1a7 0804 	sub.w	r8, r7, #4
 80a705a:	4630      	mov	r0, r6
 80a705c:	f7ff fd4e 	bl	80a6afc <__hi0bits>
 80a7060:	f1c0 0320 	rsb	r3, r0, #32
 80a7064:	280a      	cmp	r0, #10
 80a7066:	600b      	str	r3, [r1, #0]
 80a7068:	491f      	ldr	r1, [pc, #124]	; (80a70e8 <__b2d+0xa4>)
 80a706a:	dc17      	bgt.n	80a709c <__b2d+0x58>
 80a706c:	45c1      	cmp	r9, r8
 80a706e:	bf28      	it	cs
 80a7070:	2200      	movcs	r2, #0
 80a7072:	f1c0 0c0b 	rsb	ip, r0, #11
 80a7076:	fa26 f30c 	lsr.w	r3, r6, ip
 80a707a:	bf38      	it	cc
 80a707c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80a7080:	ea43 0501 	orr.w	r5, r3, r1
 80a7084:	f100 0315 	add.w	r3, r0, #21
 80a7088:	fa06 f303 	lsl.w	r3, r6, r3
 80a708c:	fa22 f20c 	lsr.w	r2, r2, ip
 80a7090:	ea43 0402 	orr.w	r4, r3, r2
 80a7094:	4620      	mov	r0, r4
 80a7096:	4629      	mov	r1, r5
 80a7098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a709c:	45c1      	cmp	r9, r8
 80a709e:	bf2e      	itee	cs
 80a70a0:	2200      	movcs	r2, #0
 80a70a2:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80a70a6:	f1a7 0808 	subcc.w	r8, r7, #8
 80a70aa:	f1b0 030b 	subs.w	r3, r0, #11
 80a70ae:	d016      	beq.n	80a70de <__b2d+0x9a>
 80a70b0:	f1c3 0720 	rsb	r7, r3, #32
 80a70b4:	fa22 f107 	lsr.w	r1, r2, r7
 80a70b8:	45c8      	cmp	r8, r9
 80a70ba:	fa06 f603 	lsl.w	r6, r6, r3
 80a70be:	ea46 0601 	orr.w	r6, r6, r1
 80a70c2:	bf94      	ite	ls
 80a70c4:	2100      	movls	r1, #0
 80a70c6:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80a70ca:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80a70ce:	fa02 f003 	lsl.w	r0, r2, r3
 80a70d2:	40f9      	lsrs	r1, r7
 80a70d4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80a70d8:	ea40 0401 	orr.w	r4, r0, r1
 80a70dc:	e7da      	b.n	80a7094 <__b2d+0x50>
 80a70de:	4614      	mov	r4, r2
 80a70e0:	ea46 0501 	orr.w	r5, r6, r1
 80a70e4:	e7d6      	b.n	80a7094 <__b2d+0x50>
 80a70e6:	bf00      	nop
 80a70e8:	3ff00000 	.word	0x3ff00000

080a70ec <__d2b>:
 80a70ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a70f0:	2101      	movs	r1, #1
 80a70f2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80a70f6:	4690      	mov	r8, r2
 80a70f8:	461d      	mov	r5, r3
 80a70fa:	f7ff fc0d 	bl	80a6918 <_Balloc>
 80a70fe:	4604      	mov	r4, r0
 80a7100:	b930      	cbnz	r0, 80a7110 <__d2b+0x24>
 80a7102:	4602      	mov	r2, r0
 80a7104:	f240 310a 	movw	r1, #778	; 0x30a
 80a7108:	4b24      	ldr	r3, [pc, #144]	; (80a719c <__d2b+0xb0>)
 80a710a:	4825      	ldr	r0, [pc, #148]	; (80a71a0 <__d2b+0xb4>)
 80a710c:	f7fa fa8c 	bl	80a1628 <__assert_func>
 80a7110:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80a7114:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80a7118:	bb2d      	cbnz	r5, 80a7166 <__d2b+0x7a>
 80a711a:	9301      	str	r3, [sp, #4]
 80a711c:	f1b8 0300 	subs.w	r3, r8, #0
 80a7120:	d026      	beq.n	80a7170 <__d2b+0x84>
 80a7122:	4668      	mov	r0, sp
 80a7124:	9300      	str	r3, [sp, #0]
 80a7126:	f7ff fd09 	bl	80a6b3c <__lo0bits>
 80a712a:	9900      	ldr	r1, [sp, #0]
 80a712c:	b1f0      	cbz	r0, 80a716c <__d2b+0x80>
 80a712e:	9a01      	ldr	r2, [sp, #4]
 80a7130:	f1c0 0320 	rsb	r3, r0, #32
 80a7134:	fa02 f303 	lsl.w	r3, r2, r3
 80a7138:	430b      	orrs	r3, r1
 80a713a:	40c2      	lsrs	r2, r0
 80a713c:	6163      	str	r3, [r4, #20]
 80a713e:	9201      	str	r2, [sp, #4]
 80a7140:	9b01      	ldr	r3, [sp, #4]
 80a7142:	2b00      	cmp	r3, #0
 80a7144:	bf14      	ite	ne
 80a7146:	2102      	movne	r1, #2
 80a7148:	2101      	moveq	r1, #1
 80a714a:	61a3      	str	r3, [r4, #24]
 80a714c:	6121      	str	r1, [r4, #16]
 80a714e:	b1c5      	cbz	r5, 80a7182 <__d2b+0x96>
 80a7150:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80a7154:	4405      	add	r5, r0
 80a7156:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80a715a:	603d      	str	r5, [r7, #0]
 80a715c:	6030      	str	r0, [r6, #0]
 80a715e:	4620      	mov	r0, r4
 80a7160:	b002      	add	sp, #8
 80a7162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a7166:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a716a:	e7d6      	b.n	80a711a <__d2b+0x2e>
 80a716c:	6161      	str	r1, [r4, #20]
 80a716e:	e7e7      	b.n	80a7140 <__d2b+0x54>
 80a7170:	a801      	add	r0, sp, #4
 80a7172:	f7ff fce3 	bl	80a6b3c <__lo0bits>
 80a7176:	2101      	movs	r1, #1
 80a7178:	9b01      	ldr	r3, [sp, #4]
 80a717a:	6121      	str	r1, [r4, #16]
 80a717c:	6163      	str	r3, [r4, #20]
 80a717e:	3020      	adds	r0, #32
 80a7180:	e7e5      	b.n	80a714e <__d2b+0x62>
 80a7182:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80a7186:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80a718a:	6038      	str	r0, [r7, #0]
 80a718c:	6918      	ldr	r0, [r3, #16]
 80a718e:	f7ff fcb5 	bl	80a6afc <__hi0bits>
 80a7192:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80a7196:	6031      	str	r1, [r6, #0]
 80a7198:	e7e1      	b.n	80a715e <__d2b+0x72>
 80a719a:	bf00      	nop
 80a719c:	080a7c2d 	.word	0x080a7c2d
 80a71a0:	080a7cd6 	.word	0x080a7cd6

080a71a4 <__ratio>:
 80a71a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a71a8:	4688      	mov	r8, r1
 80a71aa:	4669      	mov	r1, sp
 80a71ac:	4681      	mov	r9, r0
 80a71ae:	f7ff ff49 	bl	80a7044 <__b2d>
 80a71b2:	460f      	mov	r7, r1
 80a71b4:	4604      	mov	r4, r0
 80a71b6:	460d      	mov	r5, r1
 80a71b8:	4640      	mov	r0, r8
 80a71ba:	a901      	add	r1, sp, #4
 80a71bc:	f7ff ff42 	bl	80a7044 <__b2d>
 80a71c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80a71c4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80a71c8:	468b      	mov	fp, r1
 80a71ca:	eba3 0c02 	sub.w	ip, r3, r2
 80a71ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 80a71d2:	1a9b      	subs	r3, r3, r2
 80a71d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80a71d8:	2b00      	cmp	r3, #0
 80a71da:	bfd5      	itete	le
 80a71dc:	460a      	movle	r2, r1
 80a71de:	462a      	movgt	r2, r5
 80a71e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80a71e4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80a71e8:	bfd8      	it	le
 80a71ea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80a71ee:	465b      	mov	r3, fp
 80a71f0:	4602      	mov	r2, r0
 80a71f2:	4639      	mov	r1, r7
 80a71f4:	4620      	mov	r0, r4
 80a71f6:	f7fc f937 	bl	80a3468 <__aeabi_ddiv>
 80a71fa:	b003      	add	sp, #12
 80a71fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a7200 <__copybits>:
 80a7200:	3901      	subs	r1, #1
 80a7202:	b570      	push	{r4, r5, r6, lr}
 80a7204:	1149      	asrs	r1, r1, #5
 80a7206:	6914      	ldr	r4, [r2, #16]
 80a7208:	3101      	adds	r1, #1
 80a720a:	f102 0314 	add.w	r3, r2, #20
 80a720e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80a7212:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80a7216:	1f05      	subs	r5, r0, #4
 80a7218:	42a3      	cmp	r3, r4
 80a721a:	d30c      	bcc.n	80a7236 <__copybits+0x36>
 80a721c:	1aa3      	subs	r3, r4, r2
 80a721e:	3b11      	subs	r3, #17
 80a7220:	f023 0303 	bic.w	r3, r3, #3
 80a7224:	3211      	adds	r2, #17
 80a7226:	42a2      	cmp	r2, r4
 80a7228:	bf88      	it	hi
 80a722a:	2300      	movhi	r3, #0
 80a722c:	4418      	add	r0, r3
 80a722e:	2300      	movs	r3, #0
 80a7230:	4288      	cmp	r0, r1
 80a7232:	d305      	bcc.n	80a7240 <__copybits+0x40>
 80a7234:	bd70      	pop	{r4, r5, r6, pc}
 80a7236:	f853 6b04 	ldr.w	r6, [r3], #4
 80a723a:	f845 6f04 	str.w	r6, [r5, #4]!
 80a723e:	e7eb      	b.n	80a7218 <__copybits+0x18>
 80a7240:	f840 3b04 	str.w	r3, [r0], #4
 80a7244:	e7f4      	b.n	80a7230 <__copybits+0x30>

080a7246 <__any_on>:
 80a7246:	f100 0214 	add.w	r2, r0, #20
 80a724a:	6900      	ldr	r0, [r0, #16]
 80a724c:	114b      	asrs	r3, r1, #5
 80a724e:	4298      	cmp	r0, r3
 80a7250:	b510      	push	{r4, lr}
 80a7252:	db11      	blt.n	80a7278 <__any_on+0x32>
 80a7254:	dd0a      	ble.n	80a726c <__any_on+0x26>
 80a7256:	f011 011f 	ands.w	r1, r1, #31
 80a725a:	d007      	beq.n	80a726c <__any_on+0x26>
 80a725c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80a7260:	fa24 f001 	lsr.w	r0, r4, r1
 80a7264:	fa00 f101 	lsl.w	r1, r0, r1
 80a7268:	428c      	cmp	r4, r1
 80a726a:	d10b      	bne.n	80a7284 <__any_on+0x3e>
 80a726c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a7270:	4293      	cmp	r3, r2
 80a7272:	d803      	bhi.n	80a727c <__any_on+0x36>
 80a7274:	2000      	movs	r0, #0
 80a7276:	bd10      	pop	{r4, pc}
 80a7278:	4603      	mov	r3, r0
 80a727a:	e7f7      	b.n	80a726c <__any_on+0x26>
 80a727c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80a7280:	2900      	cmp	r1, #0
 80a7282:	d0f5      	beq.n	80a7270 <__any_on+0x2a>
 80a7284:	2001      	movs	r0, #1
 80a7286:	e7f6      	b.n	80a7276 <__any_on+0x30>

080a7288 <_calloc_r>:
 80a7288:	b538      	push	{r3, r4, r5, lr}
 80a728a:	fb02 f501 	mul.w	r5, r2, r1
 80a728e:	4629      	mov	r1, r5
 80a7290:	f7fa f9ba 	bl	80a1608 <_malloc_r>
 80a7294:	4604      	mov	r4, r0
 80a7296:	b118      	cbz	r0, 80a72a0 <_calloc_r+0x18>
 80a7298:	462a      	mov	r2, r5
 80a729a:	2100      	movs	r1, #0
 80a729c:	f7fc ff46 	bl	80a412c <memset>
 80a72a0:	4620      	mov	r0, r4
 80a72a2:	bd38      	pop	{r3, r4, r5, pc}

080a72a4 <__ascii_wctomb>:
 80a72a4:	4603      	mov	r3, r0
 80a72a6:	4608      	mov	r0, r1
 80a72a8:	b141      	cbz	r1, 80a72bc <__ascii_wctomb+0x18>
 80a72aa:	2aff      	cmp	r2, #255	; 0xff
 80a72ac:	d904      	bls.n	80a72b8 <__ascii_wctomb+0x14>
 80a72ae:	228a      	movs	r2, #138	; 0x8a
 80a72b0:	f04f 30ff 	mov.w	r0, #4294967295
 80a72b4:	601a      	str	r2, [r3, #0]
 80a72b6:	4770      	bx	lr
 80a72b8:	2001      	movs	r0, #1
 80a72ba:	700a      	strb	r2, [r1, #0]
 80a72bc:	4770      	bx	lr
	...

080a72c0 <__env_lock>:
 80a72c0:	4801      	ldr	r0, [pc, #4]	; (80a72c8 <__env_lock+0x8>)
 80a72c2:	f7ff bb14 	b.w	80a68ee <__retarget_lock_acquire_recursive>
 80a72c6:	bf00      	nop
 80a72c8:	20000581 	.word	0x20000581

080a72cc <__env_unlock>:
 80a72cc:	4801      	ldr	r0, [pc, #4]	; (80a72d4 <__env_unlock+0x8>)
 80a72ce:	f7ff bb10 	b.w	80a68f2 <__retarget_lock_release_recursive>
 80a72d2:	bf00      	nop
 80a72d4:	20000581 	.word	0x20000581

080a72d8 <__aeabi_ldivmod>:
 80a72d8:	b97b      	cbnz	r3, 80a72fa <__aeabi_ldivmod+0x22>
 80a72da:	b972      	cbnz	r2, 80a72fa <__aeabi_ldivmod+0x22>
 80a72dc:	2900      	cmp	r1, #0
 80a72de:	bfbe      	ittt	lt
 80a72e0:	2000      	movlt	r0, #0
 80a72e2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80a72e6:	e006      	blt.n	80a72f6 <__aeabi_ldivmod+0x1e>
 80a72e8:	bf08      	it	eq
 80a72ea:	2800      	cmpeq	r0, #0
 80a72ec:	bf1c      	itt	ne
 80a72ee:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80a72f2:	f04f 30ff 	movne.w	r0, #4294967295
 80a72f6:	f7fc bde3 	b.w	80a3ec0 <__aeabi_idiv0>
 80a72fa:	f1ad 0c08 	sub.w	ip, sp, #8
 80a72fe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a7302:	2900      	cmp	r1, #0
 80a7304:	db09      	blt.n	80a731a <__aeabi_ldivmod+0x42>
 80a7306:	2b00      	cmp	r3, #0
 80a7308:	db1a      	blt.n	80a7340 <__aeabi_ldivmod+0x68>
 80a730a:	f7fc fc6f 	bl	80a3bec <__udivmoddi4>
 80a730e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a7312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a7316:	b004      	add	sp, #16
 80a7318:	4770      	bx	lr
 80a731a:	4240      	negs	r0, r0
 80a731c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a7320:	2b00      	cmp	r3, #0
 80a7322:	db1b      	blt.n	80a735c <__aeabi_ldivmod+0x84>
 80a7324:	f7fc fc62 	bl	80a3bec <__udivmoddi4>
 80a7328:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a732c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a7330:	b004      	add	sp, #16
 80a7332:	4240      	negs	r0, r0
 80a7334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a7338:	4252      	negs	r2, r2
 80a733a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a733e:	4770      	bx	lr
 80a7340:	4252      	negs	r2, r2
 80a7342:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a7346:	f7fc fc51 	bl	80a3bec <__udivmoddi4>
 80a734a:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a734e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a7352:	b004      	add	sp, #16
 80a7354:	4240      	negs	r0, r0
 80a7356:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a735a:	4770      	bx	lr
 80a735c:	4252      	negs	r2, r2
 80a735e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a7362:	f7fc fc43 	bl	80a3bec <__udivmoddi4>
 80a7366:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a736a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a736e:	b004      	add	sp, #16
 80a7370:	4252      	negs	r2, r2
 80a7372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a7376:	4770      	bx	lr

080a7378 <__aeabi_d2lz>:
 80a7378:	b538      	push	{r3, r4, r5, lr}
 80a737a:	4605      	mov	r5, r0
 80a737c:	460c      	mov	r4, r1
 80a737e:	2200      	movs	r2, #0
 80a7380:	2300      	movs	r3, #0
 80a7382:	4628      	mov	r0, r5
 80a7384:	4621      	mov	r1, r4
 80a7386:	f7fc f9b7 	bl	80a36f8 <__aeabi_dcmplt>
 80a738a:	b928      	cbnz	r0, 80a7398 <__aeabi_d2lz+0x20>
 80a738c:	4628      	mov	r0, r5
 80a738e:	4621      	mov	r1, r4
 80a7390:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a7394:	f7fc bc0c 	b.w	80a3bb0 <__aeabi_d2ulz>
 80a7398:	4628      	mov	r0, r5
 80a739a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80a739e:	f7fc fc07 	bl	80a3bb0 <__aeabi_d2ulz>
 80a73a2:	4240      	negs	r0, r0
 80a73a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a73a8:	bd38      	pop	{r3, r4, r5, pc}
 80a73aa:	bf00      	nop

080a73ac <dynalib_user>:
 80a73ac:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80a73bc:	0000 0000 6f4c 2077 6574 706d 7265 7461     ....Low temperat
 80a73cc:	7275 2065 6564 6574 7463 6465 202e 6554     ure detected. Te
 80a73dc:	706d 7265 7461 7275 2065 203d 5700 444c     mperature = .WLD
 80a73ec:	6c41 7261 4c6d 776f 6554 706d 4800 6769     AlarmLowTemp.Hig
 80a73fc:	2068 6574 706d 7265 7461 7275 2065 6564     h temperature de
 80a740c:	6574 7463 6465 202e 6554 706d 7265 7461     tected. Temperat
 80a741c:	7275 2065 203d 5700 444c 6c41 7261 486d     ure = .WLDAlarmH
 80a742c:	6769 5468 6d65 0070 6157 6574 2072 654c     ighTemp.Water Le
 80a743c:	6b61 4120 616c 6d72 4420 7465 6365 6574     ak Alarm Detecte
 80a744c:	2e64 5700 7461 7265 6c20 6165 206b 6544     d..Water leak De
 80a745c:	6574 7463 6465 5700 444c 6c41 7261 576d     tected.WLDAlarmW
 80a746c:	7461 7265 654c 6b61 5400 6968 2073 7369     aterLeak.This is
 80a747c:	6120 7420 7365 2074 666f 7420 6568 5720      a test of the W
 80a748c:	444c 6120 616c 6d72 7320 7379 6574 006d     LD alarm system.
 80a749c:	4c57 4144 616c 6d72 6554 7473 2000 5455     WLDAlarmTest. UT
 80a74ac:	0043 0031 002c 6854 2065 7453 7572 7463     C.1.,.The Struct
 80a74bc:	4420 7461 0061 6e49 6f66 5400 6d65 6570      Data.Info.Tempe
 80a74cc:	6172 7574 6572 4800 6d75 6469 7469 0079     rature.Humidity.
 80a74dc:	6c41 7261 736d 4c00 776f 5420 6d65 2070     Alarms.Low Temp 
 80a74ec:	6c41 7261 206d 694c 696d 0074 6948 6867     Alarm Limit.High
 80a74fc:	5420 6d65 2070 6c41 7261 206d 694c 696d      Temp Alarm Limi
 80a750c:	0074 6553 2074 6554 706d 4120 616c 6d72     t.Set Temp Alarm
 80a751c:	4c20 6d69 7469 0073 6553 646e 6120 7420      Limits.Send a t
 80a752c:	7365 2074 6c61 7261 006d 6946 6d72 6177     est alarm.Firmwa
 80a753c:	6572 5620 7265 7369 6e6f 3220 302e 202e     re Verison 2.0. 
 80a754c:	614c 7473 7220 7365 7465 6120 3a74 0020     Last reset at: .
 80a755c:	2c30 2c30 0030 7061 0070 2b25 3330 3a64     0,0,0.app.%+03d:
 80a756c:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a757c:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a758c:	0000 0000                                   ....

080a7590 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a7598:	2085 080a 208b 080a 20c9 080a 2099 080a     . ... ... ... ..
 80a75a8:	2087 080a                                   . ..

080a75ac <_ZTV9IPAddress>:
	...
 80a75b4:	260b 080a 2609 080a 263d 080a               .&...&..=&..

080a75c0 <_ZTV9USBSerial>:
	...
 80a75c8:	26d7 080a 273d 080a 2715 080a 1bcd 080a     .&..='...'......
 80a75d8:	2707 080a 26d9 080a 26e9 080a 2737 080a     .'...&...&..7'..
 80a75e8:	26f9 080a 26d1 080a                         .&...&..

080a75f0 <_ZTV11USARTSerial>:
	...
 80a75f8:	2929 080a 2991 080a 296d 080a 1bcd 080a     ))...)..m)......
 80a7608:	293d 080a 2959 080a 294b 080a 2967 080a     =)..Y)..K)..g)..
 80a7618:	292b 080a 292f 080a                         +)../)..

080a7620 <_ZTV7TwoWire>:
	...
 80a7628:	29f1 080a 2a3b 080a 2a13 080a 29f3 080a     .)..;*...*...)..
 80a7638:	2a1b 080a 2a23 080a 2a2b 080a 2a33 080a     .*..#*..+*..3*..

080a7648 <_ZTVN5spark9WiFiClassE>:
	...
 80a7650:	2b0f 080a 2b05 080a 2afb 080a 2a6d 080a     .+...+...*..m*..
 80a7660:	2aef 080a 2ae3 080a 2b6d 080a 2b75 080a     .*...*..m+..u+..
 80a7670:	2ad7 080a 2acf 080a 2ac5 080a 2abb 080a     .*...*...*...*..
 80a7680:	2a77 080a                                   w*..

080a7684 <_ZTVN5spark12NetworkClassE>:
	...
 80a768c:	2b2d 080a 2b37 080a 2b41 080a 2b4b 080a     -+..7+..A+..K+..
 80a769c:	2b55 080a 2b61 080a 2b6d 080a 2b75 080a     U+..a+..m+..u+..
 80a76ac:	2b7d 080a 2b89 080a 2b91 080a 2b9b 080a     }+...+...+...+..
 80a76bc:	2ba5 080a                                   .+..

080a76c0 <_ZSt7nothrow>:
 80a76c0:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
 80a76d0:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

080a76e1 <day_name.1>:
 80a76e1:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80a76f1:	6972 6153                                    riSat

080a76f6 <mon_name.0>:
 80a76f6:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80a7706:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80a7716:	4476 6365 0000                              vDec..

080a771c <__month_lengths>:
 80a771c:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a772c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a773c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a774c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a775c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a776c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a777c:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
 80a778c:	6563 6465 6465 2f00 6e6d 2f74 6f77 6b72     ceeded./mnt/work
 80a779c:	7073 6361 2f65 6f77 6b72 7073 6361 2f65     space/workspace/
 80a77ac:	4347 2d43 3031 702d 7069 6c65 6e69 2f65     GCC-10-pipeline/
 80a77bc:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
 80a77cc:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
 80a77dc:	3231 5f34 3631 3630 3831 3630 3134 732f     124_1606180641/s
 80a77ec:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
 80a77fc:	6c2f 6269 2f63 7473 6c64 6269 722f 6e61     /libc/stdlib/ran
 80a780c:	2e64 0063 7325 2e25 642a 2500 2573 2e30     d.c.%s%.*d.%s%0.
 80a781c:	642a 2b00 2d00 2500 6432 2500 322e 2f64     *d.+.-.%2d.%.2d/
 80a782c:	2e25 6432 252f 322e 0064 6c25 0075 2d59     %.2d/%.2d.%lu.Y-
 80a783c:	6d25 252d 0064 2a2e 0075 2e25 6433 2500     %m-%d..*u.%.3d.%
 80a784c:	6c6c 0064 2e25 6432 253a 322e 3a64 2e25     lld.%.2d:%.2d:%.
 80a785c:	6432 2500 302b 6c33 2564 322e 646c 6e00     2d.%+03ld%.2ld.n
 80a786c:	0066 6e69 7469 0079                         f.inity.

080a7874 <fpi.1>:
 80a7874:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 80a7884:	0000 0000                                   ....

080a7888 <fpinan.0>:
 80a7888:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

080a78a0 <tinytens>:
 80a78a0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 80a78b0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 80a78c0:	6f43 64ac 0628 1168 614a 006e 6546 0062     Co.d(.h.Jan.Feb.
 80a78d0:	614d 0072 7041 0072 614d 0079 754a 006e     Mar.Apr.May.Jun.
 80a78e0:	754a 006c 7541 0067 6553 0070 634f 0074     Jul.Aug.Sep.Oct.
 80a78f0:	6f4e 0076 6544 0063 614a 756e 7261 0079     Nov.Dec.January.
 80a7900:	6546 7262 6175 7972 4d00 7261 6863 4100     February.March.A
 80a7910:	7270 6c69 4a00 6e75 0065 754a 796c 4100     pril.June.July.A
 80a7920:	6775 7375 0074 6553 7470 6d65 6562 0072     ugust.September.
 80a7930:	634f 6f74 6562 0072 6f4e 6576 626d 7265     October.November
 80a7940:	4400 6365 6d65 6562 0072 7553 006e 6f4d     .December.Sun.Mo
 80a7950:	006e 7554 0065 6557 0064 6854 0075 7246     n.Tue.Wed.Thu.Fr
 80a7960:	0069 6153 0074 7553 646e 7961 4d00 6e6f     i.Sat.Sunday.Mon
 80a7970:	6164 0079 7554 7365 6164 0079 6557 6e64     day.Tuesday.Wedn
 80a7980:	7365 6164 0079 6854 7275 6473 7961 4600     esday.Thursday.F
 80a7990:	6972 6164 0079 6153 7574 6472 7961 2500     riday.Saturday.%
 80a79a0:	3a48 4d25 253a 0053 6d25 252f 2f64 7925     H:%M:%S.%m/%d/%y
 80a79b0:	2500 2061 6225 2520 2065 4825 253a 3a4d     .%a %b %e %H:%M:
 80a79c0:	5325 2520 0059 4d41 5000 004d 6125 2520     %S %Y.AM.PM.%a %
 80a79d0:	2062 6525 2520 3a48 4d25 253a 2053 5a25     b %e %H:%M:%S %Z
 80a79e0:	2520 0059 646d 2500 3a49 4d25 253a 2053      %Y.md.%I:%M:%S 
 80a79f0:	7025 0000                                   %p..

080a79f4 <_C_time_locale>:
 80a79f4:	78c8 080a 78cc 080a 78d0 080a 78d4 080a     .x...x...x...x..
 80a7a04:	78d8 080a 78dc 080a 78e0 080a 78e4 080a     .x...x...x...x..
 80a7a14:	78e8 080a 78ec 080a 78f0 080a 78f4 080a     .x...x...x...x..
 80a7a24:	78f8 080a 7900 080a 7909 080a 790f 080a     .x...y...y...y..
 80a7a34:	78d8 080a 7915 080a 791a 080a 791f 080a     .x...y...y...y..
 80a7a44:	7926 080a 7930 080a 7938 080a 7941 080a     &y..0y..8y..Ay..
 80a7a54:	794a 080a 794e 080a 7952 080a 7956 080a     Jy..Ny..Ry..Vy..
 80a7a64:	795a 080a 795e 080a 7962 080a 7966 080a     Zy..^y..by..fy..
 80a7a74:	796d 080a 7974 080a 797c 080a 7986 080a     my..ty..|y...y..
 80a7a84:	798f 080a 7996 080a 799f 080a 79a8 080a     .y...y...y...y..
 80a7a94:	79b1 080a 79c6 080a 79c9 080a 79cc 080a     .y...y...y...y..
 80a7aa4:	78f8 080a 7900 080a 7909 080a 790f 080a     .x...y...y...y..
 80a7ab4:	78d8 080a 7915 080a 791a 080a 791f 080a     .x...y...y...y..
 80a7ac4:	7926 080a 7930 080a 7938 080a 7941 080a     &y..0y..8y..Ay..
 80a7ad4:	79e4 080a 79e7 080a 76e0 080a 76e0 080a     .y...y...v...v..
 80a7ae4:	76e0 080a 76e0 080a 76e0 080a 5a54 4700     .v...v...v..TZ.G
 80a7af4:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 80a7b04:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 80a7b14:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 80a7b24:	3a6e 6825 2575 006e                         n:%hu%n.

080a7b2c <_ctype_>:
 80a7b2c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a7b3c:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a7b4c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a7b5c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a7b6c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a7b7c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a7b8c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a7b9c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a7bac:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
 80a7c2c:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
 80a7c3c:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
 80a7c4c:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
 80a7c5c:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
 80a7c6c:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
 80a7c7c:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
 80a7c8c:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
 80a7c9c:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
 80a7cac:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
 80a7cbc:	6874 7865 632e 0000                         thex.c..

080a7cc4 <_C_numeric_locale>:
 80a7cc4:	744d 080a 76e0 080a 00d8 2000 4f50 4953     Mt...v..... POSI
 80a7cd4:	0058 6d2f 746e 772f 726f 736b 6170 6563     X./mnt/workspace
 80a7ce4:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
 80a7cf4:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
 80a7d04:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
 80a7d14:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
 80a7d24:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
 80a7d34:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
 80a7d44:	732f 6474 696c 2f62 706d 6572 2e63 0063     /stdlib/mprec.c.
 80a7d54:	0000 0000                                   ....

080a7d58 <__mprec_bigtens>:
 80a7d58:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 80a7d68:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 80a7d78:	bf3c 7f73 4fdd 7515                         <.s..O.u

080a7d80 <__mprec_tens>:
 80a7d80:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 80a7d90:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 80a7da0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 80a7db0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 80a7dc0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 80a7dd0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 80a7de0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 80a7df0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 80a7e00:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 80a7e10:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 80a7e20:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 80a7e30:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 80a7e40:	9db4 79d9 7843 44ea                         ...yCx.D

080a7e48 <p05.0>:
 80a7e48:	0005 0000 0019 0000 007d 0000               ........}...

080a7e54 <link_const_variable_data_end>:
 80a7e54:	080a02b1 	.word	0x080a02b1
 80a7e58:	080a0c21 	.word	0x080a0c21
 80a7e5c:	080a1759 	.word	0x080a1759
 80a7e60:	080a1c59 	.word	0x080a1c59
 80a7e64:	080a1eb1 	.word	0x080a1eb1
 80a7e68:	080a1f19 	.word	0x080a1f19
 80a7e6c:	080a2b19 	.word	0x080a2b19
 80a7e70:	080a2bf5 	.word	0x080a2bf5
 80a7e74:	080a2df1 	.word	0x080a2df1

080a7e78 <link_constructors_end>:
	...
